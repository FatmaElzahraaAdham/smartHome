
control_AnotherRoom_temp2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ae0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002ae0  00002b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800068  00800068  00002b7c  2**0
                  ALLOC
  3 .stab         000023b8  00000000  00000000  00002b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010aa  00000000  00000000  00004f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000613e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000062cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008312  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009413  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a398  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a7da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__vector_1>
       8:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__vector_2>
       c:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__vector_10>
      2c:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 37       	cpi	r26, 0x74	; 116
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 ee       	ldi	r30, 0xE0	; 224
      78:	fa e2       	ldi	r31, 0x2A	; 42
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <main>
      8a:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_VidInit>:
#include "ADC.h"




void ADC_VidInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	8c 93       	st	X, r24

	CLR_BIT(ADMUX,ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,ADATE);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,ADPS0);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADEN);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_U16GetDigitalValue>:

u16 ADC_U16GetDigitalValue(u8 Copy_U8ChannelNumber){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <ADC_U16GetDigitalValue+0x6>
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_U16_value;
	ADMUX &=0b11100000;
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 7e       	andi	r24, 0xE0	; 224
     d36:	8c 93       	st	X, r24
	ADMUX |=Copy_U8ChannelNumber ;
     d38:	a7 e2       	ldi	r26, 0x27	; 39
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e7 e2       	ldi	r30, 0x27	; 39
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	90 81       	ld	r25, Z
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	89 2b       	or	r24, r25
     d46:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);
     d48:	a6 e2       	ldi	r26, 0x26	; 38
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e6 e2       	ldi	r30, 0x26	; 38
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 64       	ori	r24, 0x40	; 64
     d54:	8c 93       	st	X, r24

	while((GET_BIT(ADCSRA , ADIF))==0);
     d56:	e6 e2       	ldi	r30, 0x26	; 38
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	82 95       	swap	r24
     d5e:	8f 70       	andi	r24, 0x0F	; 15
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	81 70       	andi	r24, 0x01	; 1
     d66:	90 70       	andi	r25, 0x00	; 0
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	a9 f3       	breq	.-22     	; 0xd56 <ADC_U16GetDigitalValue+0x3a>

	SET_BIT(ADCSRA , ADIF);
     d6c:	a6 e2       	ldi	r26, 0x26	; 38
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e6 e2       	ldi	r30, 0x26	; 38
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 61       	ori	r24, 0x10	; 16
     d78:	8c 93       	st	X, r24

	Local_U16_value=ADC;
     d7a:	e4 e2       	ldi	r30, 0x24	; 36
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01

	return Local_U16_value;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02

}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <DIO_VidSetPinDirection>:
#include"STD_Lib.h"
#include"BIT_Math.h"
#include"avr/io.h"
#include"DIO.h"

void DIO_VidSetPinDirection(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_u8Direction){
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	27 97       	sbiw	r28, 0x07	; 7
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	6a 83       	std	Y+2, r22	; 0x02
     dae:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Direction== DIO_Output){
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	09 f0       	breq	.+2      	; 0xdb8 <DIO_VidSetPinDirection+0x22>
     db6:	6f c0       	rjmp	.+222    	; 0xe96 <DIO_VidSetPinDirection+0x100>
		switch(Copy_U8Port){
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	3f 83       	std	Y+7, r19	; 0x07
     dc0:	2e 83       	std	Y+6, r18	; 0x06
     dc2:	8e 81       	ldd	r24, Y+6	; 0x06
     dc4:	9f 81       	ldd	r25, Y+7	; 0x07
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	91 05       	cpc	r25, r1
     dca:	49 f1       	breq	.+82     	; 0xe1e <DIO_VidSetPinDirection+0x88>
     dcc:	2e 81       	ldd	r18, Y+6	; 0x06
     dce:	3f 81       	ldd	r19, Y+7	; 0x07
     dd0:	22 30       	cpi	r18, 0x02	; 2
     dd2:	31 05       	cpc	r19, r1
     dd4:	2c f4       	brge	.+10     	; 0xde0 <DIO_VidSetPinDirection+0x4a>
     dd6:	8e 81       	ldd	r24, Y+6	; 0x06
     dd8:	9f 81       	ldd	r25, Y+7	; 0x07
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	61 f0       	breq	.+24     	; 0xdf6 <DIO_VidSetPinDirection+0x60>
     dde:	d2 c0       	rjmp	.+420    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
     de0:	2e 81       	ldd	r18, Y+6	; 0x06
     de2:	3f 81       	ldd	r19, Y+7	; 0x07
     de4:	22 30       	cpi	r18, 0x02	; 2
     de6:	31 05       	cpc	r19, r1
     de8:	71 f1       	breq	.+92     	; 0xe46 <DIO_VidSetPinDirection+0xb0>
     dea:	8e 81       	ldd	r24, Y+6	; 0x06
     dec:	9f 81       	ldd	r25, Y+7	; 0x07
     dee:	83 30       	cpi	r24, 0x03	; 3
     df0:	91 05       	cpc	r25, r1
     df2:	e9 f1       	breq	.+122    	; 0xe6e <DIO_VidSetPinDirection+0xd8>
     df4:	c7 c0       	rjmp	.+398    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>

				case DIO_PORTA:
					SET_BIT(DDRA,Copy_U8Pin);
     df6:	aa e3       	ldi	r26, 0x3A	; 58
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ea e3       	ldi	r30, 0x3A	; 58
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_VidSetPinDirection+0x7e>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_VidSetPinDirection+0x7a>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	b3 c0       	rjmp	.+358    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
					break;
				case DIO_PORTB:
					SET_BIT(DDRB,Copy_U8Pin);
     e1e:	a7 e3       	ldi	r26, 0x37	; 55
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e7 e3       	ldi	r30, 0x37	; 55
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_VidSetPinDirection+0xa6>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_VidSetPinDirection+0xa2>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	9f c0       	rjmp	.+318    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
					break;
				case DIO_PORTC:
					SET_BIT(DDRC,Copy_U8Pin);
     e46:	a4 e3       	ldi	r26, 0x34	; 52
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e4 e3       	ldi	r30, 0x34	; 52
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_VidSetPinDirection+0xce>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_VidSetPinDirection+0xca>
     e68:	84 2b       	or	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	8b c0       	rjmp	.+278    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
					break;
				case DIO_PORTD:
					SET_BIT(DDRD,Copy_U8Pin);
     e6e:	a1 e3       	ldi	r26, 0x31	; 49
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e1 e3       	ldi	r30, 0x31	; 49
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	48 2f       	mov	r20, r24
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_VidSetPinDirection+0xf6>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_VidSetPinDirection+0xf2>
     e90:	84 2b       	or	r24, r20
     e92:	8c 93       	st	X, r24
     e94:	77 c0       	rjmp	.+238    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
					break;
				}
	}
	else if(Copy_u8Direction==DIO_Intput){
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	88 23       	and	r24, r24
     e9a:	09 f0       	breq	.+2      	; 0xe9e <DIO_VidSetPinDirection+0x108>
     e9c:	73 c0       	rjmp	.+230    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
		switch(Copy_U8Port){
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	3d 83       	std	Y+5, r19	; 0x05
     ea6:	2c 83       	std	Y+4, r18	; 0x04
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	91 05       	cpc	r25, r1
     eb0:	59 f1       	breq	.+86     	; 0xf08 <DIO_VidSetPinDirection+0x172>
     eb2:	2c 81       	ldd	r18, Y+4	; 0x04
     eb4:	3d 81       	ldd	r19, Y+5	; 0x05
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	2c f4       	brge	.+10     	; 0xec6 <DIO_VidSetPinDirection+0x130>
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	9d 81       	ldd	r25, Y+5	; 0x05
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	69 f0       	breq	.+26     	; 0xede <DIO_VidSetPinDirection+0x148>
     ec4:	5f c0       	rjmp	.+190    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
     ec6:	2c 81       	ldd	r18, Y+4	; 0x04
     ec8:	3d 81       	ldd	r19, Y+5	; 0x05
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	31 05       	cpc	r19, r1
     ece:	89 f1       	breq	.+98     	; 0xf32 <DIO_VidSetPinDirection+0x19c>
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	9d 81       	ldd	r25, Y+5	; 0x05
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <DIO_VidSetPinDirection+0x146>
     eda:	40 c0       	rjmp	.+128    	; 0xf5c <DIO_VidSetPinDirection+0x1c6>
     edc:	53 c0       	rjmp	.+166    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
				case DIO_PORTA:
					CLR_BIT(DDRA,Copy_U8Pin);
     ede:	aa e3       	ldi	r26, 0x3A	; 58
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ea e3       	ldi	r30, 0x3A	; 58
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_VidSetPinDirection+0x166>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_VidSetPinDirection+0x162>
     f00:	80 95       	com	r24
     f02:	84 23       	and	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	3e c0       	rjmp	.+124    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
					break;
				case DIO_PORTB:
					CLR_BIT(DDRB,Copy_U8Pin);
     f08:	a7 e3       	ldi	r26, 0x37	; 55
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e7 e3       	ldi	r30, 0x37	; 55
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_VidSetPinDirection+0x190>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_VidSetPinDirection+0x18c>
     f2a:	80 95       	com	r24
     f2c:	84 23       	and	r24, r20
     f2e:	8c 93       	st	X, r24
     f30:	29 c0       	rjmp	.+82     	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
					break;
				case DIO_PORTC:
					CLR_BIT(DDRC,Copy_U8Pin);
     f32:	a4 e3       	ldi	r26, 0x34	; 52
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e4 e3       	ldi	r30, 0x34	; 52
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_VidSetPinDirection+0x1ba>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_VidSetPinDirection+0x1b6>
     f54:	80 95       	com	r24
     f56:	84 23       	and	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	14 c0       	rjmp	.+40     	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
					break;
				case DIO_PORTD:
					CLR_BIT(DDRD,Copy_U8Pin);
     f5c:	a1 e3       	ldi	r26, 0x31	; 49
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e1 e3       	ldi	r30, 0x31	; 49
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_VidSetPinDirection+0x1e4>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <DIO_VidSetPinDirection+0x1e0>
     f7e:	80 95       	com	r24
     f80:	84 23       	and	r24, r20
     f82:	8c 93       	st	X, r24
					break;

				}
	}

}
     f84:	27 96       	adiw	r28, 0x07	; 7
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_u8Value){
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	27 97       	sbiw	r28, 0x07	; 7
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	6a 83       	std	Y+2, r22	; 0x02
     fae:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Value== DIO_High){
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <DIO_VidSetPinValue+0x22>
     fb6:	6f c0       	rjmp	.+222    	; 0x1096 <DIO_VidSetPinValue+0x100>
		switch(Copy_U8Port){
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	3f 83       	std	Y+7, r19	; 0x07
     fc0:	2e 83       	std	Y+6, r18	; 0x06
     fc2:	8e 81       	ldd	r24, Y+6	; 0x06
     fc4:	9f 81       	ldd	r25, Y+7	; 0x07
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	91 05       	cpc	r25, r1
     fca:	49 f1       	breq	.+82     	; 0x101e <DIO_VidSetPinValue+0x88>
     fcc:	2e 81       	ldd	r18, Y+6	; 0x06
     fce:	3f 81       	ldd	r19, Y+7	; 0x07
     fd0:	22 30       	cpi	r18, 0x02	; 2
     fd2:	31 05       	cpc	r19, r1
     fd4:	2c f4       	brge	.+10     	; 0xfe0 <DIO_VidSetPinValue+0x4a>
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	9f 81       	ldd	r25, Y+7	; 0x07
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	61 f0       	breq	.+24     	; 0xff6 <DIO_VidSetPinValue+0x60>
     fde:	d2 c0       	rjmp	.+420    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
     fe0:	2e 81       	ldd	r18, Y+6	; 0x06
     fe2:	3f 81       	ldd	r19, Y+7	; 0x07
     fe4:	22 30       	cpi	r18, 0x02	; 2
     fe6:	31 05       	cpc	r19, r1
     fe8:	71 f1       	breq	.+92     	; 0x1046 <DIO_VidSetPinValue+0xb0>
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
     fec:	9f 81       	ldd	r25, Y+7	; 0x07
     fee:	83 30       	cpi	r24, 0x03	; 3
     ff0:	91 05       	cpc	r25, r1
     ff2:	e9 f1       	breq	.+122    	; 0x106e <DIO_VidSetPinValue+0xd8>
     ff4:	c7 c0       	rjmp	.+398    	; 0x1184 <DIO_VidSetPinValue+0x1ee>

		    case DIO_PORTA :
				SET_BIT(PORTA,Copy_U8Pin);
     ff6:	ab e3       	ldi	r26, 0x3B	; 59
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e3       	ldi	r30, 0x3B	; 59
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_VidSetPinValue+0x7e>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_VidSetPinValue+0x7a>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	b3 c0       	rjmp	.+358    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
				break;

			case DIO_PORTB :
				SET_BIT(PORTB,Copy_U8Pin);
    101e:	a8 e3       	ldi	r26, 0x38	; 56
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e8 e3       	ldi	r30, 0x38	; 56
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_VidSetPinValue+0xa6>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_VidSetPinValue+0xa2>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	9f c0       	rjmp	.+318    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
				break;

			case DIO_PORTC :
				SET_BIT(PORTC,Copy_U8Pin);
    1046:	a5 e3       	ldi	r26, 0x35	; 53
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e5 e3       	ldi	r30, 0x35	; 53
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_VidSetPinValue+0xce>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_VidSetPinValue+0xca>
    1068:	84 2b       	or	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	8b c0       	rjmp	.+278    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
				break;

			case DIO_PORTD :
				SET_BIT(PORTD,Copy_U8Pin);
    106e:	a2 e3       	ldi	r26, 0x32	; 50
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e2 e3       	ldi	r30, 0x32	; 50
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_VidSetPinValue+0xf6>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_VidSetPinValue+0xf2>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	77 c0       	rjmp	.+238    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
				break;

						}
	}
	else if(Copy_u8Value== DIO_Low){
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	88 23       	and	r24, r24
    109a:	09 f0       	breq	.+2      	; 0x109e <DIO_VidSetPinValue+0x108>
    109c:	73 c0       	rjmp	.+230    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
		switch(Copy_U8Port)
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	3d 83       	std	Y+5, r19	; 0x05
    10a6:	2c 83       	std	Y+4, r18	; 0x04
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	9d 81       	ldd	r25, Y+5	; 0x05
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	91 05       	cpc	r25, r1
    10b0:	59 f1       	breq	.+86     	; 0x1108 <DIO_VidSetPinValue+0x172>
    10b2:	2c 81       	ldd	r18, Y+4	; 0x04
    10b4:	3d 81       	ldd	r19, Y+5	; 0x05
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <DIO_VidSetPinValue+0x130>
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	9d 81       	ldd	r25, Y+5	; 0x05
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	69 f0       	breq	.+26     	; 0x10de <DIO_VidSetPinValue+0x148>
    10c4:	5f c0       	rjmp	.+190    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
    10c6:	2c 81       	ldd	r18, Y+4	; 0x04
    10c8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	31 05       	cpc	r19, r1
    10ce:	89 f1       	breq	.+98     	; 0x1132 <DIO_VidSetPinValue+0x19c>
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	9d 81       	ldd	r25, Y+5	; 0x05
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	91 05       	cpc	r25, r1
    10d8:	09 f4       	brne	.+2      	; 0x10dc <DIO_VidSetPinValue+0x146>
    10da:	40 c0       	rjmp	.+128    	; 0x115c <DIO_VidSetPinValue+0x1c6>
    10dc:	53 c0       	rjmp	.+166    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
				{
					case DIO_PORTA :
						CLR_BIT(PORTA,Copy_U8Pin);
    10de:	ab e3       	ldi	r26, 0x3B	; 59
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	eb e3       	ldi	r30, 0x3B	; 59
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_VidSetPinValue+0x166>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_VidSetPinValue+0x162>
    1100:	80 95       	com	r24
    1102:	84 23       	and	r24, r20
    1104:	8c 93       	st	X, r24
    1106:	3e c0       	rjmp	.+124    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
						break;

					case DIO_PORTB :
						CLR_BIT(PORTB,Copy_U8Pin);
    1108:	a8 e3       	ldi	r26, 0x38	; 56
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e8 e3       	ldi	r30, 0x38	; 56
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_VidSetPinValue+0x190>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_VidSetPinValue+0x18c>
    112a:	80 95       	com	r24
    112c:	84 23       	and	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	29 c0       	rjmp	.+82     	; 0x1184 <DIO_VidSetPinValue+0x1ee>
						break;

					case DIO_PORTC :
						CLR_BIT(PORTC,Copy_U8Pin);
    1132:	a5 e3       	ldi	r26, 0x35	; 53
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e5 e3       	ldi	r30, 0x35	; 53
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 2e       	mov	r0, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <DIO_VidSetPinValue+0x1ba>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <DIO_VidSetPinValue+0x1b6>
    1154:	80 95       	com	r24
    1156:	84 23       	and	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	14 c0       	rjmp	.+40     	; 0x1184 <DIO_VidSetPinValue+0x1ee>
						break;

					case DIO_PORTD :
						CLR_BIT(PORTD,Copy_U8Pin);
    115c:	a2 e3       	ldi	r26, 0x32	; 50
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e2 e3       	ldi	r30, 0x32	; 50
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_VidSetPinValue+0x1e4>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_VidSetPinValue+0x1e0>
    117e:	80 95       	com	r24
    1180:	84 23       	and	r24, r20
    1182:	8c 93       	st	X, r24
						break;
				}

	}
}
    1184:	27 96       	adiw	r28, 0x07	; 7
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection( u8 Copy_U8Port , u8 Copy_U8Direction ){
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <DIO_VidSetPortDirection+0x6>
    119c:	00 d0       	rcall	.+0      	; 0x119e <DIO_VidSetPortDirection+0x8>
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3c 83       	std	Y+4, r19	; 0x04
    11ae:	2b 83       	std	Y+3, r18	; 0x03
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	91 05       	cpc	r25, r1
    11b8:	d1 f0       	breq	.+52     	; 0x11ee <DIO_VidSetPortDirection+0x58>
    11ba:	2b 81       	ldd	r18, Y+3	; 0x03
    11bc:	3c 81       	ldd	r19, Y+4	; 0x04
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	2c f4       	brge	.+10     	; 0x11ce <DIO_VidSetPortDirection+0x38>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	61 f0       	breq	.+24     	; 0x11e4 <DIO_VidSetPortDirection+0x4e>
    11cc:	1e c0       	rjmp	.+60     	; 0x120a <DIO_VidSetPortDirection+0x74>
    11ce:	2b 81       	ldd	r18, Y+3	; 0x03
    11d0:	3c 81       	ldd	r19, Y+4	; 0x04
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	81 f0       	breq	.+32     	; 0x11f8 <DIO_VidSetPortDirection+0x62>
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	91 05       	cpc	r25, r1
    11e0:	81 f0       	breq	.+32     	; 0x1202 <DIO_VidSetPortDirection+0x6c>
    11e2:	13 c0       	rjmp	.+38     	; 0x120a <DIO_VidSetPortDirection+0x74>
			{
				case DIO_PORTA :
					DDRA = Copy_U8Direction ;
    11e4:	ea e3       	ldi	r30, 0x3A	; 58
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	80 83       	st	Z, r24
    11ec:	0e c0       	rjmp	.+28     	; 0x120a <DIO_VidSetPortDirection+0x74>
					break;

				case DIO_PORTB :
					DDRB = Copy_U8Direction ;
    11ee:	e7 e3       	ldi	r30, 0x37	; 55
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	80 83       	st	Z, r24
    11f6:	09 c0       	rjmp	.+18     	; 0x120a <DIO_VidSetPortDirection+0x74>
					break;

				case DIO_PORTC :
					DDRC = Copy_U8Direction ;
    11f8:	e4 e3       	ldi	r30, 0x34	; 52
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	80 83       	st	Z, r24
    1200:	04 c0       	rjmp	.+8      	; 0x120a <DIO_VidSetPortDirection+0x74>
					break;

				case DIO_PORTD :
					DDRD = Copy_U8Direction ;
    1202:	e1 e3       	ldi	r30, 0x31	; 49
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	80 83       	st	Z, r24
					break;
			}

}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue ( u8 Copy_U8Port , u8 Copy_U8Value ){
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <DIO_VidSetPortValue+0x6>
    121e:	00 d0       	rcall	.+0      	; 0x1220 <DIO_VidSetPortValue+0x8>
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	3c 83       	std	Y+4, r19	; 0x04
    1230:	2b 83       	std	Y+3, r18	; 0x03
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	91 05       	cpc	r25, r1
    123a:	d1 f0       	breq	.+52     	; 0x1270 <DIO_VidSetPortValue+0x58>
    123c:	2b 81       	ldd	r18, Y+3	; 0x03
    123e:	3c 81       	ldd	r19, Y+4	; 0x04
    1240:	22 30       	cpi	r18, 0x02	; 2
    1242:	31 05       	cpc	r19, r1
    1244:	2c f4       	brge	.+10     	; 0x1250 <DIO_VidSetPortValue+0x38>
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	61 f0       	breq	.+24     	; 0x1266 <DIO_VidSetPortValue+0x4e>
    124e:	1e c0       	rjmp	.+60     	; 0x128c <DIO_VidSetPortValue+0x74>
    1250:	2b 81       	ldd	r18, Y+3	; 0x03
    1252:	3c 81       	ldd	r19, Y+4	; 0x04
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	81 f0       	breq	.+32     	; 0x127a <DIO_VidSetPortValue+0x62>
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	91 05       	cpc	r25, r1
    1262:	81 f0       	breq	.+32     	; 0x1284 <DIO_VidSetPortValue+0x6c>
    1264:	13 c0       	rjmp	.+38     	; 0x128c <DIO_VidSetPortValue+0x74>
			{
				case DIO_PORTA :
					PORTA = Copy_U8Value ;
    1266:	eb e3       	ldi	r30, 0x3B	; 59
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	80 83       	st	Z, r24
    126e:	0e c0       	rjmp	.+28     	; 0x128c <DIO_VidSetPortValue+0x74>
					break;

				case DIO_PORTB :
					PORTB = Copy_U8Value ;
    1270:	e8 e3       	ldi	r30, 0x38	; 56
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 83       	st	Z, r24
    1278:	09 c0       	rjmp	.+18     	; 0x128c <DIO_VidSetPortValue+0x74>
					break;

				case DIO_PORTC :
					PORTC = Copy_U8Value ;
    127a:	e5 e3       	ldi	r30, 0x35	; 53
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	80 83       	st	Z, r24
    1282:	04 c0       	rjmp	.+8      	; 0x128c <DIO_VidSetPortValue+0x74>
					break;

				case DIO_PORTD :
					PORTD = Copy_U8Value ;
    1284:	e2 e3       	ldi	r30, 0x32	; 50
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	80 83       	st	Z, r24
					break;
			}

}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <DIO_VidTogglePinValue>:
void DIO_VidTogglePinValue(u8 Copy_U8Port,u8 Copy_U8Pin){
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <DIO_VidTogglePinValue+0x6>
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <DIO_VidTogglePinValue+0x8>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3c 83       	std	Y+4, r19	; 0x04
    12b2:	2b 83       	std	Y+3, r18	; 0x03
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	49 f1       	breq	.+82     	; 0x1310 <DIO_VidTogglePinValue+0x76>
    12be:	2b 81       	ldd	r18, Y+3	; 0x03
    12c0:	3c 81       	ldd	r19, Y+4	; 0x04
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <DIO_VidTogglePinValue+0x38>
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <DIO_VidTogglePinValue+0x4e>
    12d0:	5a c0       	rjmp	.+180    	; 0x1386 <DIO_VidTogglePinValue+0xec>
    12d2:	2b 81       	ldd	r18, Y+3	; 0x03
    12d4:	3c 81       	ldd	r19, Y+4	; 0x04
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	71 f1       	breq	.+92     	; 0x1338 <DIO_VidTogglePinValue+0x9e>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	83 30       	cpi	r24, 0x03	; 3
    12e2:	91 05       	cpc	r25, r1
    12e4:	e9 f1       	breq	.+122    	; 0x1360 <DIO_VidTogglePinValue+0xc6>
    12e6:	4f c0       	rjmp	.+158    	; 0x1386 <DIO_VidTogglePinValue+0xec>
			{
				case DIO_PORTA :
					TOGGLE_BIT(PORTA,Copy_U8Pin);
    12e8:	ab e3       	ldi	r26, 0x3B	; 59
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_VidTogglePinValue+0x6c>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_VidTogglePinValue+0x68>
    130a:	84 27       	eor	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	3b c0       	rjmp	.+118    	; 0x1386 <DIO_VidTogglePinValue+0xec>
					break;

				case DIO_PORTB :
					TOGGLE_BIT(PORTB,Copy_U8Pin);
    1310:	a8 e3       	ldi	r26, 0x38	; 56
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_VidTogglePinValue+0x94>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_VidTogglePinValue+0x90>
    1332:	84 27       	eor	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	27 c0       	rjmp	.+78     	; 0x1386 <DIO_VidTogglePinValue+0xec>
					break;

				case DIO_PORTC :
					TOGGLE_BIT(PORTC,Copy_U8Pin);
    1338:	a5 e3       	ldi	r26, 0x35	; 53
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e5 e3       	ldi	r30, 0x35	; 53
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_VidTogglePinValue+0xbc>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_VidTogglePinValue+0xb8>
    135a:	84 27       	eor	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	13 c0       	rjmp	.+38     	; 0x1386 <DIO_VidTogglePinValue+0xec>
					break;

				case DIO_PORTD :
					TOGGLE_BIT(PORTD,Copy_U8Pin);
    1360:	a2 e3       	ldi	r26, 0x32	; 50
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e2 e3       	ldi	r30, 0x32	; 50
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_VidTogglePinValue+0xe4>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_VidTogglePinValue+0xe0>
    1382:	84 27       	eor	r24, r20
    1384:	8c 93       	st	X, r24
					break;
			}
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <DIO_GetPinValue>:
u8 DIO_GetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin){
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	29 97       	sbiw	r28, 0x09	; 9
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	38 87       	std	Y+8, r19	; 0x08
    13b4:	2f 83       	std	Y+7, r18	; 0x07
    13b6:	8f 81       	ldd	r24, Y+7	; 0x07
    13b8:	98 85       	ldd	r25, Y+8	; 0x08
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	91 05       	cpc	r25, r1
    13be:	c9 f0       	breq	.+50     	; 0x13f2 <DIO_GetPinValue+0x5e>
    13c0:	2f 81       	ldd	r18, Y+7	; 0x07
    13c2:	38 85       	ldd	r19, Y+8	; 0x08
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	2c f4       	brge	.+10     	; 0x13d4 <DIO_GetPinValue+0x40>
    13ca:	8f 81       	ldd	r24, Y+7	; 0x07
    13cc:	98 85       	ldd	r25, Y+8	; 0x08
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	61 f0       	breq	.+24     	; 0x13ea <DIO_GetPinValue+0x56>
    13d2:	1a c0       	rjmp	.+52     	; 0x1408 <DIO_GetPinValue+0x74>
    13d4:	2f 81       	ldd	r18, Y+7	; 0x07
    13d6:	38 85       	ldd	r19, Y+8	; 0x08
    13d8:	22 30       	cpi	r18, 0x02	; 2
    13da:	31 05       	cpc	r19, r1
    13dc:	71 f0       	breq	.+28     	; 0x13fa <DIO_GetPinValue+0x66>
    13de:	8f 81       	ldd	r24, Y+7	; 0x07
    13e0:	98 85       	ldd	r25, Y+8	; 0x08
    13e2:	83 30       	cpi	r24, 0x03	; 3
    13e4:	91 05       	cpc	r25, r1
    13e6:	69 f0       	breq	.+26     	; 0x1402 <DIO_GetPinValue+0x6e>
    13e8:	0f c0       	rjmp	.+30     	; 0x1408 <DIO_GetPinValue+0x74>
			{
				case DIO_PORTA :
					GET_BIT(PINA,Copy_U8Pin);
    13ea:	e9 e3       	ldi	r30, 0x39	; 57
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	90 81       	ld	r25, Z
    13f0:	0b c0       	rjmp	.+22     	; 0x1408 <DIO_GetPinValue+0x74>
					break;

				case DIO_PORTB :
					GET_BIT(PINB,Copy_U8Pin);
    13f2:	e6 e3       	ldi	r30, 0x36	; 54
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	20 81       	ld	r18, Z
    13f8:	07 c0       	rjmp	.+14     	; 0x1408 <DIO_GetPinValue+0x74>
					break;

				case DIO_PORTC :
					GET_BIT(PINC,Copy_U8Pin);
    13fa:	e3 e3       	ldi	r30, 0x33	; 51
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	30 81       	ld	r19, Z
    1400:	03 c0       	rjmp	.+6      	; 0x1408 <DIO_GetPinValue+0x74>
					break;

				case DIO_PORTD :
					GET_BIT(PIND,Copy_U8Pin);
    1402:	e0 e3       	ldi	r30, 0x30	; 48
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
					break;
			}
}
    1408:	29 96       	adiw	r28, 0x09	; 9
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <EX_INT0VidInit>:

void (*Int0_PFUN)(void);
void (*Int1_PFUN)(void);
void (*Int2_PFUN)(void);

void EX_INT0VidInit(void){
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,7);
    1422:	af e5       	ldi	r26, 0x5F	; 95
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ef e5       	ldi	r30, 0x5F	; 95
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	80 68       	ori	r24, 0x80	; 128
    142e:	8c 93       	st	X, r24
	SET_BIT(GICR ,6);
    1430:	ab e5       	ldi	r26, 0x5B	; 91
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	eb e5       	ldi	r30, 0x5B	; 91
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 64       	ori	r24, 0x40	; 64
    143c:	8c 93       	st	X, r24
//	falling
	CLR_BIT(MCUCR ,0);
    143e:	a5 e5       	ldi	r26, 0x55	; 85
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e5 e5       	ldi	r30, 0x55	; 85
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	8e 7f       	andi	r24, 0xFE	; 254
    144a:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,1);
    144c:	a5 e5       	ldi	r26, 0x55	; 85
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e5 e5       	ldi	r30, 0x55	; 85
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	82 60       	ori	r24, 0x02	; 2
    1458:	8c 93       	st	X, r24
}
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <EX_INT0VidSetCallBack>:

void EX_INT0VidSetCallBack(void (*ptr)(void)){
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <EX_INT0VidSetCallBack+0x6>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
	Int0_PFUN=ptr;
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	90 93 71 00 	sts	0x0071, r25
    1476:	80 93 70 00 	sts	0x0070, r24

}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <EX_INT1VidInit>:
void EX_INT1VidInit(void){
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG ,7);
    148c:	af e5       	ldi	r26, 0x5F	; 95
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ef e5       	ldi	r30, 0x5F	; 95
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	80 68       	ori	r24, 0x80	; 128
    1498:	8c 93       	st	X, r24
	SET_BIT(GICR ,7);
    149a:	ab e5       	ldi	r26, 0x5B	; 91
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	eb e5       	ldi	r30, 0x5B	; 91
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	80 68       	ori	r24, 0x80	; 128
    14a6:	8c 93       	st	X, r24
	CLR_BIT(MCUCR ,2);
    14a8:	a5 e5       	ldi	r26, 0x55	; 85
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e5 e5       	ldi	r30, 0x55	; 85
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8b 7f       	andi	r24, 0xFB	; 251
    14b4:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,3);
    14b6:	a5 e5       	ldi	r26, 0x55	; 85
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e5       	ldi	r30, 0x55	; 85
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	88 60       	ori	r24, 0x08	; 8
    14c2:	8c 93       	st	X, r24
}
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <EX_INT1VidSetCallBack>:
void EX_INT1VidSetCallBack(void (*ptr)(void)){
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <EX_INT1VidSetCallBack+0x6>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	89 83       	std	Y+1, r24	; 0x01
	Int1_PFUN=ptr;
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	90 93 6f 00 	sts	0x006F, r25
    14e0:	80 93 6e 00 	sts	0x006E, r24

}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <EX_INT2VidInit>:

void EX_INT2VidInit(void){
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG ,7);
    14f6:	af e5       	ldi	r26, 0x5F	; 95
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ef e5       	ldi	r30, 0x5F	; 95
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	80 68       	ori	r24, 0x80	; 128
    1502:	8c 93       	st	X, r24
	SET_BIT(GICR ,5);
    1504:	ab e5       	ldi	r26, 0x5B	; 91
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	eb e5       	ldi	r30, 0x5B	; 91
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	80 62       	ori	r24, 0x20	; 32
    1510:	8c 93       	st	X, r24
	CLR_BIT(MCUCSR ,6);
    1512:	a4 e5       	ldi	r26, 0x54	; 84
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e4 e5       	ldi	r30, 0x54	; 84
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8f 7b       	andi	r24, 0xBF	; 191
    151e:	8c 93       	st	X, r24
}
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <EX_INT2VidSetCallBack>:
void EX_INT2VidSetCallBack(void (*ptr)(void)){
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <EX_INT2VidSetCallBack+0x6>
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
	Int2_PFUN=ptr;
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	90 93 6d 00 	sts	0x006D, r25
    153c:	80 93 6c 00 	sts	0x006C, r24

}
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <__vector_1>:

ISR(INT0_vect){
    154a:	1f 92       	push	r1
    154c:	0f 92       	push	r0
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	0f 92       	push	r0
    1552:	11 24       	eor	r1, r1
    1554:	2f 93       	push	r18
    1556:	3f 93       	push	r19
    1558:	4f 93       	push	r20
    155a:	5f 93       	push	r21
    155c:	6f 93       	push	r22
    155e:	7f 93       	push	r23
    1560:	8f 93       	push	r24
    1562:	9f 93       	push	r25
    1564:	af 93       	push	r26
    1566:	bf 93       	push	r27
    1568:	ef 93       	push	r30
    156a:	ff 93       	push	r31
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
	Int0_PFUN();
    1574:	e0 91 70 00 	lds	r30, 0x0070
    1578:	f0 91 71 00 	lds	r31, 0x0071
    157c:	09 95       	icall
}
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	ff 91       	pop	r31
    1584:	ef 91       	pop	r30
    1586:	bf 91       	pop	r27
    1588:	af 91       	pop	r26
    158a:	9f 91       	pop	r25
    158c:	8f 91       	pop	r24
    158e:	7f 91       	pop	r23
    1590:	6f 91       	pop	r22
    1592:	5f 91       	pop	r21
    1594:	4f 91       	pop	r20
    1596:	3f 91       	pop	r19
    1598:	2f 91       	pop	r18
    159a:	0f 90       	pop	r0
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	0f 90       	pop	r0
    15a0:	1f 90       	pop	r1
    15a2:	18 95       	reti

000015a4 <__vector_2>:

ISR(INT1_vect){
    15a4:	1f 92       	push	r1
    15a6:	0f 92       	push	r0
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	0f 92       	push	r0
    15ac:	11 24       	eor	r1, r1
    15ae:	2f 93       	push	r18
    15b0:	3f 93       	push	r19
    15b2:	4f 93       	push	r20
    15b4:	5f 93       	push	r21
    15b6:	6f 93       	push	r22
    15b8:	7f 93       	push	r23
    15ba:	8f 93       	push	r24
    15bc:	9f 93       	push	r25
    15be:	af 93       	push	r26
    15c0:	bf 93       	push	r27
    15c2:	ef 93       	push	r30
    15c4:	ff 93       	push	r31
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
	Int1_PFUN();
    15ce:	e0 91 6e 00 	lds	r30, 0x006E
    15d2:	f0 91 6f 00 	lds	r31, 0x006F
    15d6:	09 95       	icall
}
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	ff 91       	pop	r31
    15de:	ef 91       	pop	r30
    15e0:	bf 91       	pop	r27
    15e2:	af 91       	pop	r26
    15e4:	9f 91       	pop	r25
    15e6:	8f 91       	pop	r24
    15e8:	7f 91       	pop	r23
    15ea:	6f 91       	pop	r22
    15ec:	5f 91       	pop	r21
    15ee:	4f 91       	pop	r20
    15f0:	3f 91       	pop	r19
    15f2:	2f 91       	pop	r18
    15f4:	0f 90       	pop	r0
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	0f 90       	pop	r0
    15fa:	1f 90       	pop	r1
    15fc:	18 95       	reti

000015fe <__vector_3>:

ISR(INT2_vect){
    15fe:	1f 92       	push	r1
    1600:	0f 92       	push	r0
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	0f 92       	push	r0
    1606:	11 24       	eor	r1, r1
    1608:	2f 93       	push	r18
    160a:	3f 93       	push	r19
    160c:	4f 93       	push	r20
    160e:	5f 93       	push	r21
    1610:	6f 93       	push	r22
    1612:	7f 93       	push	r23
    1614:	8f 93       	push	r24
    1616:	9f 93       	push	r25
    1618:	af 93       	push	r26
    161a:	bf 93       	push	r27
    161c:	ef 93       	push	r30
    161e:	ff 93       	push	r31
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62

	Int2_PFUN();
    1628:	e0 91 6c 00 	lds	r30, 0x006C
    162c:	f0 91 6d 00 	lds	r31, 0x006D
    1630:	09 95       	icall
}
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	ff 91       	pop	r31
    1638:	ef 91       	pop	r30
    163a:	bf 91       	pop	r27
    163c:	af 91       	pop	r26
    163e:	9f 91       	pop	r25
    1640:	8f 91       	pop	r24
    1642:	7f 91       	pop	r23
    1644:	6f 91       	pop	r22
    1646:	5f 91       	pop	r21
    1648:	4f 91       	pop	r20
    164a:	3f 91       	pop	r19
    164c:	2f 91       	pop	r18
    164e:	0f 90       	pop	r0
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	0f 90       	pop	r0
    1654:	1f 90       	pop	r1
    1656:	18 95       	reti

00001658 <LCD_VidInit>:
#include"avr/delay.h"
#include"LCD.h"
#include"DIO.h"

void LCD_VidInit(void)
{
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	cc 54       	subi	r28, 0x4C	; 76
    1666:	d0 40       	sbci	r29, 0x00	; 0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
	//Directions
	DIO_VidSetPinDirection( LCD_RS_PORT , LCD_RS_PIN , DIO_Output );
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	41 e0       	ldi	r20, 0x01	; 1
    1678:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection( LCD_RW_PORT , LCD_RW_PIN , DIO_Output );
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	61 e0       	ldi	r22, 0x01	; 1
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection( LCD_E_PORT , LCD_E_PIN , DIO_Output );
    1686:	83 e0       	ldi	r24, 0x03	; 3
    1688:	62 e0       	ldi	r22, 0x02	; 2
    168a:	41 e0       	ldi	r20, 0x01	; 1
    168c:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPortDirection( LCD_DATA_COMMAND_PORT , 0b11111111 );
    1690:	82 e0       	ldi	r24, 0x02	; 2
    1692:	6f ef       	ldi	r22, 0xFF	; 255
    1694:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VidSetPortDirection>
    1698:	fe 01       	movw	r30, r28
    169a:	e7 5b       	subi	r30, 0xB7	; 183
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	ac e0       	ldi	r26, 0x0C	; 12
    16a4:	b2 e4       	ldi	r27, 0x42	; 66
    16a6:	80 83       	st	Z, r24
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	a2 83       	std	Z+2, r26	; 0x02
    16ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ae:	8e 01       	movw	r16, r28
    16b0:	0b 5b       	subi	r16, 0xBB	; 187
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	fe 01       	movw	r30, r28
    16b6:	e7 5b       	subi	r30, 0xB7	; 183
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	60 81       	ld	r22, Z
    16bc:	71 81       	ldd	r23, Z+1	; 0x01
    16be:	82 81       	ldd	r24, Z+2	; 0x02
    16c0:	93 81       	ldd	r25, Z+3	; 0x03
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	4a ef       	ldi	r20, 0xFA	; 250
    16c8:	54 e4       	ldi	r21, 0x44	; 68
    16ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	f8 01       	movw	r30, r16
    16d4:	80 83       	st	Z, r24
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	a2 83       	std	Z+2, r26	; 0x02
    16da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16dc:	fe 01       	movw	r30, r28
    16de:	eb 5b       	subi	r30, 0xBB	; 187
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e8       	ldi	r20, 0x80	; 128
    16f0:	5f e3       	ldi	r21, 0x3F	; 63
    16f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16f6:	88 23       	and	r24, r24
    16f8:	44 f4       	brge	.+16     	; 0x170a <LCD_VidInit+0xb2>
		__ticks = 1;
    16fa:	fe 01       	movw	r30, r28
    16fc:	ed 5b       	subi	r30, 0xBD	; 189
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	80 83       	st	Z, r24
    1708:	64 c0       	rjmp	.+200    	; 0x17d2 <LCD_VidInit+0x17a>
	else if (__tmp > 65535)
    170a:	fe 01       	movw	r30, r28
    170c:	eb 5b       	subi	r30, 0xBB	; 187
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	60 81       	ld	r22, Z
    1712:	71 81       	ldd	r23, Z+1	; 0x01
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	93 81       	ldd	r25, Z+3	; 0x03
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	3f ef       	ldi	r19, 0xFF	; 255
    171c:	4f e7       	ldi	r20, 0x7F	; 127
    171e:	57 e4       	ldi	r21, 0x47	; 71
    1720:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1724:	18 16       	cp	r1, r24
    1726:	0c f0       	brlt	.+2      	; 0x172a <LCD_VidInit+0xd2>
    1728:	43 c0       	rjmp	.+134    	; 0x17b0 <LCD_VidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	fe 01       	movw	r30, r28
    172c:	e7 5b       	subi	r30, 0xB7	; 183
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e2       	ldi	r20, 0x20	; 32
    173e:	51 e4       	ldi	r21, 0x41	; 65
    1740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	8e 01       	movw	r16, r28
    174a:	0d 5b       	subi	r16, 0xBD	; 189
    174c:	1f 4f       	sbci	r17, 0xFF	; 255
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	f8 01       	movw	r30, r16
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	80 83       	st	Z, r24
    1760:	1f c0       	rjmp	.+62     	; 0x17a0 <LCD_VidInit+0x148>
    1762:	fe 01       	movw	r30, r28
    1764:	ef 5b       	subi	r30, 0xBF	; 191
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	88 ec       	ldi	r24, 0xC8	; 200
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1770:	fe 01       	movw	r30, r28
    1772:	ef 5b       	subi	r30, 0xBF	; 191
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <LCD_VidInit+0x122>
    177e:	fe 01       	movw	r30, r28
    1780:	ef 5b       	subi	r30, 0xBF	; 191
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1788:	de 01       	movw	r26, r28
    178a:	ad 5b       	subi	r26, 0xBD	; 189
    178c:	bf 4f       	sbci	r27, 0xFF	; 255
    178e:	fe 01       	movw	r30, r28
    1790:	ed 5b       	subi	r30, 0xBD	; 189
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	11 96       	adiw	r26, 0x01	; 1
    179c:	9c 93       	st	X, r25
    179e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a0:	fe 01       	movw	r30, r28
    17a2:	ed 5b       	subi	r30, 0xBD	; 189
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	91 81       	ldd	r25, Z+1	; 0x01
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	d1 f6       	brne	.-76     	; 0x1762 <LCD_VidInit+0x10a>
    17ae:	24 c0       	rjmp	.+72     	; 0x17f8 <LCD_VidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b0:	8e 01       	movw	r16, r28
    17b2:	0d 5b       	subi	r16, 0xBD	; 189
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	fe 01       	movw	r30, r28
    17b8:	eb 5b       	subi	r30, 0xBB	; 187
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	60 81       	ld	r22, Z
    17be:	71 81       	ldd	r23, Z+1	; 0x01
    17c0:	82 81       	ldd	r24, Z+2	; 0x02
    17c2:	93 81       	ldd	r25, Z+3	; 0x03
    17c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	f8 01       	movw	r30, r16
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
    17d2:	fe 01       	movw	r30, r28
    17d4:	ed 5b       	subi	r30, 0xBD	; 189
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 81       	ld	r24, Z
    17da:	91 81       	ldd	r25, Z+1	; 0x01
    17dc:	fe 01       	movw	r30, r28
    17de:	ff 96       	adiw	r30, 0x3f	; 63
    17e0:	91 83       	std	Z+1, r25	; 0x01
    17e2:	80 83       	st	Z, r24
    17e4:	fe 01       	movw	r30, r28
    17e6:	ff 96       	adiw	r30, 0x3f	; 63
    17e8:	80 81       	ld	r24, Z
    17ea:	91 81       	ldd	r25, Z+1	; 0x01
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	f1 f7       	brne	.-4      	; 0x17ec <LCD_VidInit+0x194>
    17f0:	fe 01       	movw	r30, r28
    17f2:	ff 96       	adiw	r30, 0x3f	; 63
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	80 83       	st	Z, r24


	_delay_ms(35);

	LCD_VidSendCommand( 0b00111000 );
    17f8:	88 e3       	ldi	r24, 0x38	; 56
    17fa:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_VidSendCommand>
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	a4 e3       	ldi	r26, 0x34	; 52
    1804:	b2 e4       	ldi	r27, 0x42	; 66
    1806:	8b af       	std	Y+59, r24	; 0x3b
    1808:	9c af       	std	Y+60, r25	; 0x3c
    180a:	ad af       	std	Y+61, r26	; 0x3d
    180c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    180e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1810:	7c ad       	ldd	r23, Y+60	; 0x3c
    1812:	8d ad       	ldd	r24, Y+61	; 0x3d
    1814:	9e ad       	ldd	r25, Y+62	; 0x3e
    1816:	2b ea       	ldi	r18, 0xAB	; 171
    1818:	3a ea       	ldi	r19, 0xAA	; 170
    181a:	4a e2       	ldi	r20, 0x2A	; 42
    181c:	50 e4       	ldi	r21, 0x40	; 64
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	8f ab       	std	Y+55, r24	; 0x37
    1828:	98 af       	std	Y+56, r25	; 0x38
    182a:	a9 af       	std	Y+57, r26	; 0x39
    182c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    182e:	6f a9       	ldd	r22, Y+55	; 0x37
    1830:	78 ad       	ldd	r23, Y+56	; 0x38
    1832:	89 ad       	ldd	r24, Y+57	; 0x39
    1834:	9a ad       	ldd	r25, Y+58	; 0x3a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e8       	ldi	r20, 0x80	; 128
    183c:	5f e3       	ldi	r21, 0x3F	; 63
    183e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1842:	88 23       	and	r24, r24
    1844:	1c f4       	brge	.+6      	; 0x184c <LCD_VidInit+0x1f4>
		__ticks = 1;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	8e ab       	std	Y+54, r24	; 0x36
    184a:	91 c0       	rjmp	.+290    	; 0x196e <LCD_VidInit+0x316>
	else if (__tmp > 255)
    184c:	6f a9       	ldd	r22, Y+55	; 0x37
    184e:	78 ad       	ldd	r23, Y+56	; 0x38
    1850:	89 ad       	ldd	r24, Y+57	; 0x39
    1852:	9a ad       	ldd	r25, Y+58	; 0x3a
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	4f e7       	ldi	r20, 0x7F	; 127
    185a:	53 e4       	ldi	r21, 0x43	; 67
    185c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1860:	18 16       	cp	r1, r24
    1862:	0c f0       	brlt	.+2      	; 0x1866 <LCD_VidInit+0x20e>
    1864:	7b c0       	rjmp	.+246    	; 0x195c <LCD_VidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1866:	6b ad       	ldd	r22, Y+59	; 0x3b
    1868:	7c ad       	ldd	r23, Y+60	; 0x3c
    186a:	8d ad       	ldd	r24, Y+61	; 0x3d
    186c:	9e ad       	ldd	r25, Y+62	; 0x3e
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	4a e7       	ldi	r20, 0x7A	; 122
    1874:	54 e4       	ldi	r21, 0x44	; 68
    1876:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	8a ab       	std	Y+50, r24	; 0x32
    1880:	9b ab       	std	Y+51, r25	; 0x33
    1882:	ac ab       	std	Y+52, r26	; 0x34
    1884:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1886:	6a a9       	ldd	r22, Y+50	; 0x32
    1888:	7b a9       	ldd	r23, Y+51	; 0x33
    188a:	8c a9       	ldd	r24, Y+52	; 0x34
    188c:	9d a9       	ldd	r25, Y+53	; 0x35
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	4a ef       	ldi	r20, 0xFA	; 250
    1894:	54 e4       	ldi	r21, 0x44	; 68
    1896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	8e a7       	std	Y+46, r24	; 0x2e
    18a0:	9f a7       	std	Y+47, r25	; 0x2f
    18a2:	a8 ab       	std	Y+48, r26	; 0x30
    18a4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    18a6:	6e a5       	ldd	r22, Y+46	; 0x2e
    18a8:	7f a5       	ldd	r23, Y+47	; 0x2f
    18aa:	88 a9       	ldd	r24, Y+48	; 0x30
    18ac:	99 a9       	ldd	r25, Y+49	; 0x31
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e8       	ldi	r20, 0x80	; 128
    18b4:	5f e3       	ldi	r21, 0x3F	; 63
    18b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ba:	88 23       	and	r24, r24
    18bc:	2c f4       	brge	.+10     	; 0x18c8 <LCD_VidInit+0x270>
		__ticks = 1;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9d a7       	std	Y+45, r25	; 0x2d
    18c4:	8c a7       	std	Y+44, r24	; 0x2c
    18c6:	3f c0       	rjmp	.+126    	; 0x1946 <LCD_VidInit+0x2ee>
	else if (__tmp > 65535)
    18c8:	6e a5       	ldd	r22, Y+46	; 0x2e
    18ca:	7f a5       	ldd	r23, Y+47	; 0x2f
    18cc:	88 a9       	ldd	r24, Y+48	; 0x30
    18ce:	99 a9       	ldd	r25, Y+49	; 0x31
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	3f ef       	ldi	r19, 0xFF	; 255
    18d4:	4f e7       	ldi	r20, 0x7F	; 127
    18d6:	57 e4       	ldi	r21, 0x47	; 71
    18d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18dc:	18 16       	cp	r1, r24
    18de:	4c f5       	brge	.+82     	; 0x1932 <LCD_VidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e0:	6a a9       	ldd	r22, Y+50	; 0x32
    18e2:	7b a9       	ldd	r23, Y+51	; 0x33
    18e4:	8c a9       	ldd	r24, Y+52	; 0x34
    18e6:	9d a9       	ldd	r25, Y+53	; 0x35
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e2       	ldi	r20, 0x20	; 32
    18ee:	51 e4       	ldi	r21, 0x41	; 65
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	bc 01       	movw	r22, r24
    18fa:	cd 01       	movw	r24, r26
    18fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	9d a7       	std	Y+45, r25	; 0x2d
    1906:	8c a7       	std	Y+44, r24	; 0x2c
    1908:	0f c0       	rjmp	.+30     	; 0x1928 <LCD_VidInit+0x2d0>
    190a:	88 ec       	ldi	r24, 0xC8	; 200
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9b a7       	std	Y+43, r25	; 0x2b
    1910:	8a a7       	std	Y+42, r24	; 0x2a
    1912:	8a a5       	ldd	r24, Y+42	; 0x2a
    1914:	9b a5       	ldd	r25, Y+43	; 0x2b
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <LCD_VidInit+0x2be>
    191a:	9b a7       	std	Y+43, r25	; 0x2b
    191c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1920:	9d a5       	ldd	r25, Y+45	; 0x2d
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	9d a7       	std	Y+45, r25	; 0x2d
    1926:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1928:	8c a5       	ldd	r24, Y+44	; 0x2c
    192a:	9d a5       	ldd	r25, Y+45	; 0x2d
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	69 f7       	brne	.-38     	; 0x190a <LCD_VidInit+0x2b2>
    1930:	24 c0       	rjmp	.+72     	; 0x197a <LCD_VidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1932:	6e a5       	ldd	r22, Y+46	; 0x2e
    1934:	7f a5       	ldd	r23, Y+47	; 0x2f
    1936:	88 a9       	ldd	r24, Y+48	; 0x30
    1938:	99 a9       	ldd	r25, Y+49	; 0x31
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9d a7       	std	Y+45, r25	; 0x2d
    1944:	8c a7       	std	Y+44, r24	; 0x2c
    1946:	8c a5       	ldd	r24, Y+44	; 0x2c
    1948:	9d a5       	ldd	r25, Y+45	; 0x2d
    194a:	99 a7       	std	Y+41, r25	; 0x29
    194c:	88 a7       	std	Y+40, r24	; 0x28
    194e:	88 a5       	ldd	r24, Y+40	; 0x28
    1950:	99 a5       	ldd	r25, Y+41	; 0x29
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <LCD_VidInit+0x2fa>
    1956:	99 a7       	std	Y+41, r25	; 0x29
    1958:	88 a7       	std	Y+40, r24	; 0x28
    195a:	0f c0       	rjmp	.+30     	; 0x197a <LCD_VidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    195c:	6f a9       	ldd	r22, Y+55	; 0x37
    195e:	78 ad       	ldd	r23, Y+56	; 0x38
    1960:	89 ad       	ldd	r24, Y+57	; 0x39
    1962:	9a ad       	ldd	r25, Y+58	; 0x3a
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	8e ab       	std	Y+54, r24	; 0x36
    196e:	8e a9       	ldd	r24, Y+54	; 0x36
    1970:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1972:	8f a1       	ldd	r24, Y+39	; 0x27
    1974:	8a 95       	dec	r24
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_VidInit+0x31c>
    1978:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(45);

	LCD_VidSendCommand( 0b00001100 );
    197a:	8c e0       	ldi	r24, 0x0C	; 12
    197c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_VidSendCommand>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a4 e3       	ldi	r26, 0x34	; 52
    1986:	b2 e4       	ldi	r27, 0x42	; 66
    1988:	8b a3       	std	Y+35, r24	; 0x23
    198a:	9c a3       	std	Y+36, r25	; 0x24
    198c:	ad a3       	std	Y+37, r26	; 0x25
    198e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1990:	6b a1       	ldd	r22, Y+35	; 0x23
    1992:	7c a1       	ldd	r23, Y+36	; 0x24
    1994:	8d a1       	ldd	r24, Y+37	; 0x25
    1996:	9e a1       	ldd	r25, Y+38	; 0x26
    1998:	2b ea       	ldi	r18, 0xAB	; 171
    199a:	3a ea       	ldi	r19, 0xAA	; 170
    199c:	4a e2       	ldi	r20, 0x2A	; 42
    199e:	50 e4       	ldi	r21, 0x40	; 64
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8f 8f       	std	Y+31, r24	; 0x1f
    19aa:	98 a3       	std	Y+32, r25	; 0x20
    19ac:	a9 a3       	std	Y+33, r26	; 0x21
    19ae:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    19b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19b2:	78 a1       	ldd	r23, Y+32	; 0x20
    19b4:	89 a1       	ldd	r24, Y+33	; 0x21
    19b6:	9a a1       	ldd	r25, Y+34	; 0x22
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	1c f4       	brge	.+6      	; 0x19ce <LCD_VidInit+0x376>
		__ticks = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	8e 8f       	std	Y+30, r24	; 0x1e
    19cc:	91 c0       	rjmp	.+290    	; 0x1af0 <LCD_VidInit+0x498>
	else if (__tmp > 255)
    19ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19d0:	78 a1       	ldd	r23, Y+32	; 0x20
    19d2:	89 a1       	ldd	r24, Y+33	; 0x21
    19d4:	9a a1       	ldd	r25, Y+34	; 0x22
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	53 e4       	ldi	r21, 0x43	; 67
    19de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	0c f0       	brlt	.+2      	; 0x19e8 <LCD_VidInit+0x390>
    19e6:	7b c0       	rjmp	.+246    	; 0x1ade <LCD_VidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    19e8:	6b a1       	ldd	r22, Y+35	; 0x23
    19ea:	7c a1       	ldd	r23, Y+36	; 0x24
    19ec:	8d a1       	ldd	r24, Y+37	; 0x25
    19ee:	9e a1       	ldd	r25, Y+38	; 0x26
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4a e7       	ldi	r20, 0x7A	; 122
    19f6:	54 e4       	ldi	r21, 0x44	; 68
    19f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8a 8f       	std	Y+26, r24	; 0x1a
    1a02:	9b 8f       	std	Y+27, r25	; 0x1b
    1a04:	ac 8f       	std	Y+28, r26	; 0x1c
    1a06:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a08:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a0a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a0e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	4a ef       	ldi	r20, 0xFA	; 250
    1a16:	54 e4       	ldi	r21, 0x44	; 68
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	8e 8b       	std	Y+22, r24	; 0x16
    1a22:	9f 8b       	std	Y+23, r25	; 0x17
    1a24:	a8 8f       	std	Y+24, r26	; 0x18
    1a26:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1a28:	6e 89       	ldd	r22, Y+22	; 0x16
    1a2a:	7f 89       	ldd	r23, Y+23	; 0x17
    1a2c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a2e:	99 8d       	ldd	r25, Y+25	; 0x19
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <LCD_VidInit+0x3f2>
		__ticks = 1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9d 8b       	std	Y+21, r25	; 0x15
    1a46:	8c 8b       	std	Y+20, r24	; 0x14
    1a48:	3f c0       	rjmp	.+126    	; 0x1ac8 <LCD_VidInit+0x470>
	else if (__tmp > 65535)
    1a4a:	6e 89       	ldd	r22, Y+22	; 0x16
    1a4c:	7f 89       	ldd	r23, Y+23	; 0x17
    1a4e:	88 8d       	ldd	r24, Y+24	; 0x18
    1a50:	99 8d       	ldd	r25, Y+25	; 0x19
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	3f ef       	ldi	r19, 0xFF	; 255
    1a56:	4f e7       	ldi	r20, 0x7F	; 127
    1a58:	57 e4       	ldi	r21, 0x47	; 71
    1a5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a5e:	18 16       	cp	r1, r24
    1a60:	4c f5       	brge	.+82     	; 0x1ab4 <LCD_VidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a62:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a64:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a66:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a68:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e2       	ldi	r20, 0x20	; 32
    1a70:	51 e4       	ldi	r21, 0x41	; 65
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9d 8b       	std	Y+21, r25	; 0x15
    1a88:	8c 8b       	std	Y+20, r24	; 0x14
    1a8a:	0f c0       	rjmp	.+30     	; 0x1aaa <LCD_VidInit+0x452>
    1a8c:	88 ec       	ldi	r24, 0xC8	; 200
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9b 8b       	std	Y+19, r25	; 0x13
    1a92:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a94:	8a 89       	ldd	r24, Y+18	; 0x12
    1a96:	9b 89       	ldd	r25, Y+19	; 0x13
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <LCD_VidInit+0x440>
    1a9c:	9b 8b       	std	Y+19, r25	; 0x13
    1a9e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa0:	8c 89       	ldd	r24, Y+20	; 0x14
    1aa2:	9d 89       	ldd	r25, Y+21	; 0x15
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	9d 8b       	std	Y+21, r25	; 0x15
    1aa8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aaa:	8c 89       	ldd	r24, Y+20	; 0x14
    1aac:	9d 89       	ldd	r25, Y+21	; 0x15
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	69 f7       	brne	.-38     	; 0x1a8c <LCD_VidInit+0x434>
    1ab2:	24 c0       	rjmp	.+72     	; 0x1afc <LCD_VidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab4:	6e 89       	ldd	r22, Y+22	; 0x16
    1ab6:	7f 89       	ldd	r23, Y+23	; 0x17
    1ab8:	88 8d       	ldd	r24, Y+24	; 0x18
    1aba:	99 8d       	ldd	r25, Y+25	; 0x19
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9d 8b       	std	Y+21, r25	; 0x15
    1ac6:	8c 8b       	std	Y+20, r24	; 0x14
    1ac8:	8c 89       	ldd	r24, Y+20	; 0x14
    1aca:	9d 89       	ldd	r25, Y+21	; 0x15
    1acc:	99 8b       	std	Y+17, r25	; 0x11
    1ace:	88 8b       	std	Y+16, r24	; 0x10
    1ad0:	88 89       	ldd	r24, Y+16	; 0x10
    1ad2:	99 89       	ldd	r25, Y+17	; 0x11
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <LCD_VidInit+0x47c>
    1ad8:	99 8b       	std	Y+17, r25	; 0x11
    1ada:	88 8b       	std	Y+16, r24	; 0x10
    1adc:	0f c0       	rjmp	.+30     	; 0x1afc <LCD_VidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ade:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ae0:	78 a1       	ldd	r23, Y+32	; 0x20
    1ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8e 8f       	std	Y+30, r24	; 0x1e
    1af0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1af2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1af4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af6:	8a 95       	dec	r24
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_VidInit+0x49e>
    1afa:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_us(45);

	LCD_VidSendCommand( 0b00000001 );
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_VidSendCommand>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a0 e0       	ldi	r26, 0x00	; 0
    1b08:	b0 e4       	ldi	r27, 0x40	; 64
    1b0a:	8b 87       	std	Y+11, r24	; 0x0b
    1b0c:	9c 87       	std	Y+12, r25	; 0x0c
    1b0e:	ad 87       	std	Y+13, r26	; 0x0d
    1b10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a ef       	ldi	r20, 0xFA	; 250
    1b20:	54 e4       	ldi	r21, 0x44	; 68
    1b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	8f 83       	std	Y+7, r24	; 0x07
    1b2c:	98 87       	std	Y+8, r25	; 0x08
    1b2e:	a9 87       	std	Y+9, r26	; 0x09
    1b30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b32:	6f 81       	ldd	r22, Y+7	; 0x07
    1b34:	78 85       	ldd	r23, Y+8	; 0x08
    1b36:	89 85       	ldd	r24, Y+9	; 0x09
    1b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e8       	ldi	r20, 0x80	; 128
    1b40:	5f e3       	ldi	r21, 0x3F	; 63
    1b42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b46:	88 23       	and	r24, r24
    1b48:	2c f4       	brge	.+10     	; 0x1b54 <LCD_VidInit+0x4fc>
		__ticks = 1;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	3f c0       	rjmp	.+126    	; 0x1bd2 <LCD_VidInit+0x57a>
	else if (__tmp > 65535)
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	3f ef       	ldi	r19, 0xFF	; 255
    1b60:	4f e7       	ldi	r20, 0x7F	; 127
    1b62:	57 e4       	ldi	r21, 0x47	; 71
    1b64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b68:	18 16       	cp	r1, r24
    1b6a:	4c f5       	brge	.+82     	; 0x1bbe <LCD_VidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e2       	ldi	r20, 0x20	; 32
    1b7a:	51 e4       	ldi	r21, 0x41	; 65
    1b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	bc 01       	movw	r22, r24
    1b86:	cd 01       	movw	r24, r26
    1b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	0f c0       	rjmp	.+30     	; 0x1bb4 <LCD_VidInit+0x55c>
    1b96:	88 ec       	ldi	r24, 0xC8	; 200
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <LCD_VidInit+0x54a>
    1ba6:	9c 83       	std	Y+4, r25	; 0x04
    1ba8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1baa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bac:	9e 81       	ldd	r25, Y+6	; 0x06
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	9e 83       	std	Y+6, r25	; 0x06
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	69 f7       	brne	.-38     	; 0x1b96 <LCD_VidInit+0x53e>
    1bbc:	14 c0       	rjmp	.+40     	; 0x1be6 <LCD_VidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc0:	78 85       	ldd	r23, Y+8	; 0x08
    1bc2:	89 85       	ldd	r24, Y+9	; 0x09
    1bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_VidInit+0x586>
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	LCD_VidSendCommand( 0b00000110 );
    1be6:	86 e0       	ldi	r24, 0x06	; 6
    1be8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_VidSendCommand>

}
    1bec:	c4 5b       	subi	r28, 0xB4	; 180
    1bee:	df 4f       	sbci	r29, 0xFF	; 255
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <LCD_VidSendCommand>:


void LCD_VidSendCommand( u8 Copy_U8Command )
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	69 97       	sbiw	r28, 0x19	; 25
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	89 8f       	std	Y+25, r24	; 0x19
	//RS = 0
	DIO_VidSetPinValue( LCD_RS_PORT , LCD_RS_PIN , DIO_Low );
    1c1a:	83 e0       	ldi	r24, 0x03	; 3
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

	//RW = 0
	DIO_VidSetPinValue( LCD_RW_PORT , LCD_RW_PIN , DIO_Low );
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	61 e0       	ldi	r22, 0x01	; 1
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

	//Command
	DIO_VidSetPortValue( LCD_DATA_COMMAND_PORT , Copy_U8Command ) ;
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	69 8d       	ldd	r22, Y+25	; 0x19
    1c32:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_VidSetPortValue>


	//E
	DIO_VidSetPinValue( LCD_E_PORT , LCD_E_PIN , DIO_High );
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	62 e0       	ldi	r22, 0x02	; 2
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a0 e8       	ldi	r26, 0x80	; 128
    1c46:	bf e3       	ldi	r27, 0x3F	; 63
    1c48:	8d 8b       	std	Y+21, r24	; 0x15
    1c4a:	9e 8b       	std	Y+22, r25	; 0x16
    1c4c:	af 8b       	std	Y+23, r26	; 0x17
    1c4e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c50:	6d 89       	ldd	r22, Y+21	; 0x15
    1c52:	7e 89       	ldd	r23, Y+22	; 0x16
    1c54:	8f 89       	ldd	r24, Y+23	; 0x17
    1c56:	98 8d       	ldd	r25, Y+24	; 0x18
    1c58:	2b ea       	ldi	r18, 0xAB	; 171
    1c5a:	3a ea       	ldi	r19, 0xAA	; 170
    1c5c:	4a e2       	ldi	r20, 0x2A	; 42
    1c5e:	50 e4       	ldi	r21, 0x40	; 64
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	89 8b       	std	Y+17, r24	; 0x11
    1c6a:	9a 8b       	std	Y+18, r25	; 0x12
    1c6c:	ab 8b       	std	Y+19, r26	; 0x13
    1c6e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c70:	69 89       	ldd	r22, Y+17	; 0x11
    1c72:	7a 89       	ldd	r23, Y+18	; 0x12
    1c74:	8b 89       	ldd	r24, Y+19	; 0x13
    1c76:	9c 89       	ldd	r25, Y+20	; 0x14
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e8       	ldi	r20, 0x80	; 128
    1c7e:	5f e3       	ldi	r21, 0x3F	; 63
    1c80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c84:	88 23       	and	r24, r24
    1c86:	1c f4       	brge	.+6      	; 0x1c8e <LCD_VidSendCommand+0x8a>
		__ticks = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	88 8b       	std	Y+16, r24	; 0x10
    1c8c:	91 c0       	rjmp	.+290    	; 0x1db0 <LCD_VidSendCommand+0x1ac>
	else if (__tmp > 255)
    1c8e:	69 89       	ldd	r22, Y+17	; 0x11
    1c90:	7a 89       	ldd	r23, Y+18	; 0x12
    1c92:	8b 89       	ldd	r24, Y+19	; 0x13
    1c94:	9c 89       	ldd	r25, Y+20	; 0x14
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4f e7       	ldi	r20, 0x7F	; 127
    1c9c:	53 e4       	ldi	r21, 0x43	; 67
    1c9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ca2:	18 16       	cp	r1, r24
    1ca4:	0c f0       	brlt	.+2      	; 0x1ca8 <LCD_VidSendCommand+0xa4>
    1ca6:	7b c0       	rjmp	.+246    	; 0x1d9e <LCD_VidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    1caa:	7e 89       	ldd	r23, Y+22	; 0x16
    1cac:	8f 89       	ldd	r24, Y+23	; 0x17
    1cae:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	4a e7       	ldi	r20, 0x7A	; 122
    1cb6:	54 e4       	ldi	r21, 0x44	; 68
    1cb8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	8c 87       	std	Y+12, r24	; 0x0c
    1cc2:	9d 87       	std	Y+13, r25	; 0x0d
    1cc4:	ae 87       	std	Y+14, r26	; 0x0e
    1cc6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cca:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ccc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cce:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	4a ef       	ldi	r20, 0xFA	; 250
    1cd6:	54 e4       	ldi	r21, 0x44	; 68
    1cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	88 87       	std	Y+8, r24	; 0x08
    1ce2:	99 87       	std	Y+9, r25	; 0x09
    1ce4:	aa 87       	std	Y+10, r26	; 0x0a
    1ce6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ce8:	68 85       	ldd	r22, Y+8	; 0x08
    1cea:	79 85       	ldd	r23, Y+9	; 0x09
    1cec:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cee:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	5f e3       	ldi	r21, 0x3F	; 63
    1cf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfc:	88 23       	and	r24, r24
    1cfe:	2c f4       	brge	.+10     	; 0x1d0a <LCD_VidSendCommand+0x106>
		__ticks = 1;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	9f 83       	std	Y+7, r25	; 0x07
    1d06:	8e 83       	std	Y+6, r24	; 0x06
    1d08:	3f c0       	rjmp	.+126    	; 0x1d88 <LCD_VidSendCommand+0x184>
	else if (__tmp > 65535)
    1d0a:	68 85       	ldd	r22, Y+8	; 0x08
    1d0c:	79 85       	ldd	r23, Y+9	; 0x09
    1d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d10:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	3f ef       	ldi	r19, 0xFF	; 255
    1d16:	4f e7       	ldi	r20, 0x7F	; 127
    1d18:	57 e4       	ldi	r21, 0x47	; 71
    1d1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d1e:	18 16       	cp	r1, r24
    1d20:	4c f5       	brge	.+82     	; 0x1d74 <LCD_VidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d22:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d24:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d26:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d28:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e2       	ldi	r20, 0x20	; 32
    1d30:	51 e4       	ldi	r21, 0x41	; 65
    1d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	bc 01       	movw	r22, r24
    1d3c:	cd 01       	movw	r24, r26
    1d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	9f 83       	std	Y+7, r25	; 0x07
    1d48:	8e 83       	std	Y+6, r24	; 0x06
    1d4a:	0f c0       	rjmp	.+30     	; 0x1d6a <LCD_VidSendCommand+0x166>
    1d4c:	88 ec       	ldi	r24, 0xC8	; 200
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9d 83       	std	Y+5, r25	; 0x05
    1d52:	8c 83       	std	Y+4, r24	; 0x04
    1d54:	8c 81       	ldd	r24, Y+4	; 0x04
    1d56:	9d 81       	ldd	r25, Y+5	; 0x05
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_VidSendCommand+0x154>
    1d5c:	9d 83       	std	Y+5, r25	; 0x05
    1d5e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d60:	8e 81       	ldd	r24, Y+6	; 0x06
    1d62:	9f 81       	ldd	r25, Y+7	; 0x07
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	9f 83       	std	Y+7, r25	; 0x07
    1d68:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	69 f7       	brne	.-38     	; 0x1d4c <LCD_VidSendCommand+0x148>
    1d72:	24 c0       	rjmp	.+72     	; 0x1dbc <LCD_VidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d74:	68 85       	ldd	r22, Y+8	; 0x08
    1d76:	79 85       	ldd	r23, Y+9	; 0x09
    1d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	9f 83       	std	Y+7, r25	; 0x07
    1d86:	8e 83       	std	Y+6, r24	; 0x06
    1d88:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d8c:	9b 83       	std	Y+3, r25	; 0x03
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	9b 81       	ldd	r25, Y+3	; 0x03
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <LCD_VidSendCommand+0x190>
    1d98:	9b 83       	std	Y+3, r25	; 0x03
    1d9a:	8a 83       	std	Y+2, r24	; 0x02
    1d9c:	0f c0       	rjmp	.+30     	; 0x1dbc <LCD_VidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d9e:	69 89       	ldd	r22, Y+17	; 0x11
    1da0:	7a 89       	ldd	r23, Y+18	; 0x12
    1da2:	8b 89       	ldd	r24, Y+19	; 0x13
    1da4:	9c 89       	ldd	r25, Y+20	; 0x14
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	88 8b       	std	Y+16, r24	; 0x10
    1db0:	88 89       	ldd	r24, Y+16	; 0x10
    1db2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	8a 95       	dec	r24
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_VidSendCommand+0x1b2>
    1dba:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1);

	DIO_VidSetPinValue( LCD_E_PORT , LCD_E_PIN , DIO_Low );
    1dbc:	83 e0       	ldi	r24, 0x03	; 3
    1dbe:	62 e0       	ldi	r22, 0x02	; 2
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

}
    1dc6:	69 96       	adiw	r28, 0x19	; 25
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <LCD_VidSendChar>:

void LCD_VidSendChar( u8 Copy_U8Char )
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	69 97       	sbiw	r28, 0x19	; 25
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	89 8f       	std	Y+25, r24	; 0x19
	//RS =1
	DIO_VidSetPinValue( LCD_RS_PORT , LCD_RS_PIN , DIO_High );
    1dee:	83 e0       	ldi	r24, 0x03	; 3
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

	//RW = 0
	DIO_VidSetPinValue( LCD_RW_PORT , LCD_RW_PIN , DIO_Low );
    1df8:	83 e0       	ldi	r24, 0x03	; 3
    1dfa:	61 e0       	ldi	r22, 0x01	; 1
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

	//Command
	DIO_VidSetPortValue( LCD_DATA_COMMAND_PORT , Copy_U8Char ) ;
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	69 8d       	ldd	r22, Y+25	; 0x19
    1e06:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_VidSetPortValue>


	//E
	DIO_VidSetPinValue( LCD_E_PORT , LCD_E_PIN , DIO_High );
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	62 e0       	ldi	r22, 0x02	; 2
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	a0 e8       	ldi	r26, 0x80	; 128
    1e1a:	bf e3       	ldi	r27, 0x3F	; 63
    1e1c:	8d 8b       	std	Y+21, r24	; 0x15
    1e1e:	9e 8b       	std	Y+22, r25	; 0x16
    1e20:	af 8b       	std	Y+23, r26	; 0x17
    1e22:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e24:	6d 89       	ldd	r22, Y+21	; 0x15
    1e26:	7e 89       	ldd	r23, Y+22	; 0x16
    1e28:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2c:	2b ea       	ldi	r18, 0xAB	; 171
    1e2e:	3a ea       	ldi	r19, 0xAA	; 170
    1e30:	4a e2       	ldi	r20, 0x2A	; 42
    1e32:	50 e4       	ldi	r21, 0x40	; 64
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	89 8b       	std	Y+17, r24	; 0x11
    1e3e:	9a 8b       	std	Y+18, r25	; 0x12
    1e40:	ab 8b       	std	Y+19, r26	; 0x13
    1e42:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e44:	69 89       	ldd	r22, Y+17	; 0x11
    1e46:	7a 89       	ldd	r23, Y+18	; 0x12
    1e48:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	1c f4       	brge	.+6      	; 0x1e62 <LCD_VidSendChar+0x8a>
		__ticks = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	88 8b       	std	Y+16, r24	; 0x10
    1e60:	91 c0       	rjmp	.+290    	; 0x1f84 <LCD_VidSendChar+0x1ac>
	else if (__tmp > 255)
    1e62:	69 89       	ldd	r22, Y+17	; 0x11
    1e64:	7a 89       	ldd	r23, Y+18	; 0x12
    1e66:	8b 89       	ldd	r24, Y+19	; 0x13
    1e68:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	53 e4       	ldi	r21, 0x43	; 67
    1e72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	0c f0       	brlt	.+2      	; 0x1e7c <LCD_VidSendChar+0xa4>
    1e7a:	7b c0       	rjmp	.+246    	; 0x1f72 <LCD_VidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e80:	8f 89       	ldd	r24, Y+23	; 0x17
    1e82:	98 8d       	ldd	r25, Y+24	; 0x18
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	4a e7       	ldi	r20, 0x7A	; 122
    1e8a:	54 e4       	ldi	r21, 0x44	; 68
    1e8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	8c 87       	std	Y+12, r24	; 0x0c
    1e96:	9d 87       	std	Y+13, r25	; 0x0d
    1e98:	ae 87       	std	Y+14, r26	; 0x0e
    1e9a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e9e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ea0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ea2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	4a ef       	ldi	r20, 0xFA	; 250
    1eaa:	54 e4       	ldi	r21, 0x44	; 68
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	88 87       	std	Y+8, r24	; 0x08
    1eb6:	99 87       	std	Y+9, r25	; 0x09
    1eb8:	aa 87       	std	Y+10, r26	; 0x0a
    1eba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ebc:	68 85       	ldd	r22, Y+8	; 0x08
    1ebe:	79 85       	ldd	r23, Y+9	; 0x09
    1ec0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e8       	ldi	r20, 0x80	; 128
    1eca:	5f e3       	ldi	r21, 0x3F	; 63
    1ecc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed0:	88 23       	and	r24, r24
    1ed2:	2c f4       	brge	.+10     	; 0x1ede <LCD_VidSendChar+0x106>
		__ticks = 1;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9f 83       	std	Y+7, r25	; 0x07
    1eda:	8e 83       	std	Y+6, r24	; 0x06
    1edc:	3f c0       	rjmp	.+126    	; 0x1f5c <LCD_VidSendChar+0x184>
	else if (__tmp > 65535)
    1ede:	68 85       	ldd	r22, Y+8	; 0x08
    1ee0:	79 85       	ldd	r23, Y+9	; 0x09
    1ee2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ee4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	3f ef       	ldi	r19, 0xFF	; 255
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	57 e4       	ldi	r21, 0x47	; 71
    1eee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	4c f5       	brge	.+82     	; 0x1f48 <LCD_VidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ef8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1efa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1efc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e2       	ldi	r20, 0x20	; 32
    1f04:	51 e4       	ldi	r21, 0x41	; 65
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9f 83       	std	Y+7, r25	; 0x07
    1f1c:	8e 83       	std	Y+6, r24	; 0x06
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <LCD_VidSendChar+0x166>
    1f20:	88 ec       	ldi	r24, 0xC8	; 200
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9d 83       	std	Y+5, r25	; 0x05
    1f26:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_VidSendChar+0x154>
    1f30:	9d 83       	std	Y+5, r25	; 0x05
    1f32:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f34:	8e 81       	ldd	r24, Y+6	; 0x06
    1f36:	9f 81       	ldd	r25, Y+7	; 0x07
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	9f 83       	std	Y+7, r25	; 0x07
    1f3c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f40:	9f 81       	ldd	r25, Y+7	; 0x07
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	69 f7       	brne	.-38     	; 0x1f20 <LCD_VidSendChar+0x148>
    1f46:	24 c0       	rjmp	.+72     	; 0x1f90 <LCD_VidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f48:	68 85       	ldd	r22, Y+8	; 0x08
    1f4a:	79 85       	ldd	r23, Y+9	; 0x09
    1f4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	9f 83       	std	Y+7, r25	; 0x07
    1f5a:	8e 83       	std	Y+6, r24	; 0x06
    1f5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f60:	9b 83       	std	Y+3, r25	; 0x03
    1f62:	8a 83       	std	Y+2, r24	; 0x02
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	9b 81       	ldd	r25, Y+3	; 0x03
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <LCD_VidSendChar+0x190>
    1f6c:	9b 83       	std	Y+3, r25	; 0x03
    1f6e:	8a 83       	std	Y+2, r24	; 0x02
    1f70:	0f c0       	rjmp	.+30     	; 0x1f90 <LCD_VidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f72:	69 89       	ldd	r22, Y+17	; 0x11
    1f74:	7a 89       	ldd	r23, Y+18	; 0x12
    1f76:	8b 89       	ldd	r24, Y+19	; 0x13
    1f78:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	88 8b       	std	Y+16, r24	; 0x10
    1f84:	88 89       	ldd	r24, Y+16	; 0x10
    1f86:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	8a 95       	dec	r24
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_VidSendChar+0x1b2>
    1f8e:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1);

	DIO_VidSetPinValue( LCD_E_PORT , LCD_E_PIN , DIO_Low );
    1f90:	83 e0       	ldi	r24, 0x03	; 3
    1f92:	62 e0       	ldi	r22, 0x02	; 2
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

}
    1f9a:	69 96       	adiw	r28, 0x19	; 25
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <LCD_VidSendString>:
	_delay_ms(5);
	DIO_VidSetPinValue(DIO_PORTA,DIO_PIN2,DIO_Low);
	_delay_ms(5);
}*/

void LCD_VidSendString( u8 *Copy_Pu8String ) {
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <LCD_VidSendString+0x6>
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <LCD_VidSendString+0x8>
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	9c 83       	std	Y+4, r25	; 0x04
    1fba:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;Copy_Pu8String[i]!='\0';i++){
    1fbc:	1a 82       	std	Y+2, r1	; 0x02
    1fbe:	19 82       	std	Y+1, r1	; 0x01
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <LCD_VidSendString+0x34>
		LCD_VidSendChar(Copy_Pu8String[i]);
    1fc2:	29 81       	ldd	r18, Y+1	; 0x01
    1fc4:	3a 81       	ldd	r19, Y+2	; 0x02
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	fc 01       	movw	r30, r24
    1fcc:	e2 0f       	add	r30, r18
    1fce:	f3 1f       	adc	r31, r19
    1fd0:	80 81       	ld	r24, Z
    1fd2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
	DIO_VidSetPinValue(DIO_PORTA,DIO_PIN2,DIO_Low);
	_delay_ms(5);
}*/

void LCD_VidSendString( u8 *Copy_Pu8String ) {
	for(int i=0;Copy_Pu8String[i]!='\0';i++){
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	29 81       	ldd	r18, Y+1	; 0x01
    1fe2:	3a 81       	ldd	r19, Y+2	; 0x02
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	fc 01       	movw	r30, r24
    1fea:	e2 0f       	add	r30, r18
    1fec:	f3 1f       	adc	r31, r19
    1fee:	80 81       	ld	r24, Z
    1ff0:	88 23       	and	r24, r24
    1ff2:	39 f7       	brne	.-50     	; 0x1fc2 <LCD_VidSendString+0x16>
		LCD_VidSendChar(Copy_Pu8String[i]);
	}
}
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <LCD_VidSendNumber>:

//Send Number
void LCD_VidSendNumber( u32 Copy_U32Number ){
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	2c 97       	sbiw	r28, 0x0c	; 12
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	69 87       	std	Y+9, r22	; 0x09
    2018:	7a 87       	std	Y+10, r23	; 0x0a
    201a:	8b 87       	std	Y+11, r24	; 0x0b
    201c:	9c 87       	std	Y+12, r25	; 0x0c

	u32 Local_u32Counter=1 , Local_u32Digit=0;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a0 e0       	ldi	r26, 0x00	; 0
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	8d 83       	std	Y+5, r24	; 0x05
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	af 83       	std	Y+7, r26	; 0x07
    202c:	b8 87       	std	Y+8, r27	; 0x08
    202e:	19 82       	std	Y+1, r1	; 0x01
    2030:	1a 82       	std	Y+2, r1	; 0x02
    2032:	1b 82       	std	Y+3, r1	; 0x03
    2034:	1c 82       	std	Y+4, r1	; 0x04

		if (Copy_U32Number == 0)
    2036:	89 85       	ldd	r24, Y+9	; 0x09
    2038:	9a 85       	ldd	r25, Y+10	; 0x0a
    203a:	ab 85       	ldd	r26, Y+11	; 0x0b
    203c:	bc 85       	ldd	r27, Y+12	; 0x0c
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	a1 05       	cpc	r26, r1
    2042:	b1 05       	cpc	r27, r1
    2044:	b1 f4       	brne	.+44     	; 0x2072 <LCD_VidSendNumber+0x70>
		{
			LCD_VidSendChar('0');
    2046:	80 e3       	ldi	r24, 0x30	; 48
    2048:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
    204c:	7a c0       	rjmp	.+244    	; 0x2142 <LCD_VidSendNumber+0x140>
		}
		else
		{
			while (Copy_U32Number/Local_u32Counter != 0)
			{
				Local_u32Counter *= 10;
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	af 81       	ldd	r26, Y+7	; 0x07
    2054:	b8 85       	ldd	r27, Y+8	; 0x08
    2056:	2a e0       	ldi	r18, 0x0A	; 10
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsi3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	af 83       	std	Y+7, r26	; 0x07
    2070:	b8 87       	std	Y+8, r27	; 0x08
		{
			LCD_VidSendChar('0');
		}
		else
		{
			while (Copy_U32Number/Local_u32Counter != 0)
    2072:	89 85       	ldd	r24, Y+9	; 0x09
    2074:	9a 85       	ldd	r25, Y+10	; 0x0a
    2076:	ab 85       	ldd	r26, Y+11	; 0x0b
    2078:	bc 85       	ldd	r27, Y+12	; 0x0c
    207a:	2d 81       	ldd	r18, Y+5	; 0x05
    207c:	3e 81       	ldd	r19, Y+6	; 0x06
    207e:	4f 81       	ldd	r20, Y+7	; 0x07
    2080:	58 85       	ldd	r21, Y+8	; 0x08
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__udivmodsi4>
    208a:	da 01       	movw	r26, r20
    208c:	c9 01       	movw	r24, r18
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	a1 05       	cpc	r26, r1
    2092:	b1 05       	cpc	r27, r1
    2094:	e1 f6       	brne	.-72     	; 0x204e <LCD_VidSendNumber+0x4c>
			{
				Local_u32Counter *= 10;
			}
			Local_u32Counter /=10;
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	af 81       	ldd	r26, Y+7	; 0x07
    209c:	b8 85       	ldd	r27, Y+8	; 0x08
    209e:	2a e0       	ldi	r18, 0x0A	; 10
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__udivmodsi4>
    20ae:	da 01       	movw	r26, r20
    20b0:	c9 01       	movw	r24, r18
    20b2:	8d 83       	std	Y+5, r24	; 0x05
    20b4:	9e 83       	std	Y+6, r25	; 0x06
    20b6:	af 83       	std	Y+7, r26	; 0x07
    20b8:	b8 87       	std	Y+8, r27	; 0x08
    20ba:	3a c0       	rjmp	.+116    	; 0x2130 <LCD_VidSendNumber+0x12e>

			while (Local_u32Counter != 0)
			{
				Local_u32Digit = Copy_U32Number/Local_u32Counter;
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    20c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    20c4:	2d 81       	ldd	r18, Y+5	; 0x05
    20c6:	3e 81       	ldd	r19, Y+6	; 0x06
    20c8:	4f 81       	ldd	r20, Y+7	; 0x07
    20ca:	58 85       	ldd	r21, Y+8	; 0x08
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__udivmodsi4>
    20d4:	da 01       	movw	r26, r20
    20d6:	c9 01       	movw	r24, r18
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	9a 83       	std	Y+2, r25	; 0x02
    20dc:	ab 83       	std	Y+3, r26	; 0x03
    20de:	bc 83       	std	Y+4, r27	; 0x04

				LCD_VidSendChar(Local_u32Digit + '0');
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	80 5d       	subi	r24, 0xD0	; 208
    20e4:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>

				Copy_U32Number = Copy_U32Number%Local_u32Counter;
    20e8:	89 85       	ldd	r24, Y+9	; 0x09
    20ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ec:	ab 85       	ldd	r26, Y+11	; 0x0b
    20ee:	bc 85       	ldd	r27, Y+12	; 0x0c
    20f0:	2d 81       	ldd	r18, Y+5	; 0x05
    20f2:	3e 81       	ldd	r19, Y+6	; 0x06
    20f4:	4f 81       	ldd	r20, Y+7	; 0x07
    20f6:	58 85       	ldd	r21, Y+8	; 0x08
    20f8:	bc 01       	movw	r22, r24
    20fa:	cd 01       	movw	r24, r26
    20fc:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__udivmodsi4>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	89 87       	std	Y+9, r24	; 0x09
    2106:	9a 87       	std	Y+10, r25	; 0x0a
    2108:	ab 87       	std	Y+11, r26	; 0x0b
    210a:	bc 87       	std	Y+12, r27	; 0x0c

				Local_u32Counter /= 10;
    210c:	8d 81       	ldd	r24, Y+5	; 0x05
    210e:	9e 81       	ldd	r25, Y+6	; 0x06
    2110:	af 81       	ldd	r26, Y+7	; 0x07
    2112:	b8 85       	ldd	r27, Y+8	; 0x08
    2114:	2a e0       	ldi	r18, 0x0A	; 10
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__udivmodsi4>
    2124:	da 01       	movw	r26, r20
    2126:	c9 01       	movw	r24, r18
    2128:	8d 83       	std	Y+5, r24	; 0x05
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	af 83       	std	Y+7, r26	; 0x07
    212e:	b8 87       	std	Y+8, r27	; 0x08
			{
				Local_u32Counter *= 10;
			}
			Local_u32Counter /=10;

			while (Local_u32Counter != 0)
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	af 81       	ldd	r26, Y+7	; 0x07
    2136:	b8 85       	ldd	r27, Y+8	; 0x08
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	a1 05       	cpc	r26, r1
    213c:	b1 05       	cpc	r27, r1
    213e:	09 f0       	breq	.+2      	; 0x2142 <LCD_VidSendNumber+0x140>
    2140:	bd cf       	rjmp	.-134    	; 0x20bc <LCD_VidSendNumber+0xba>
				Copy_U32Number = Copy_U32Number%Local_u32Counter;

				Local_u32Counter /= 10;
			}
		}
}
    2142:	2c 96       	adiw	r28, 0x0c	; 12
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <LCD_VidGoToLocation>:

void LCD_VidGoToLocation ( u8 Copy_U8RowNumber , u8 Copy_U8ColNumber )
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	00 d0       	rcall	.+0      	; 0x215a <LCD_VidGoToLocation+0x6>
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	6a 83       	std	Y+2, r22	; 0x02
	if( Copy_U8RowNumber == LCD_FIRST_LINE )
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	88 23       	and	r24, r24
    2166:	29 f4       	brne	.+10     	; 0x2172 <LCD_VidGoToLocation+0x1e>
	{
		LCD_VidSendCommand( 0b10000000/*For Busy Flag*/ + Copy_U8ColNumber );
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	80 58       	subi	r24, 0x80	; 128
    216c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_VidSendCommand>
    2170:	07 c0       	rjmp	.+14     	; 0x2180 <LCD_VidGoToLocation+0x2c>
	}
	else if( Copy_U8RowNumber == LCD_Second_LINE )
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	81 30       	cpi	r24, 0x01	; 1
    2176:	21 f4       	brne	.+8      	; 0x2180 <LCD_VidGoToLocation+0x2c>
	{
		LCD_VidSendCommand( 0b10000000/*For Busy Flag*/ + 0b01000000/*First address of line 2*/ + Copy_U8ColNumber);
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	80 54       	subi	r24, 0x40	; 64
    217c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_VidSendCommand>
	}
}
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <LCD_VidDelChar>:

void LCD_VidDelChar(void)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0b00000001);
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_VidSendCommand>
	LCD_VidSendCommand(0b10000000);
    2198:	80 e8       	ldi	r24, 0x80	; 128
    219a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <LCD_VidSendCommand>


}
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <SPI_VidMasterInit>:
#include"BIT_Math.h"
#include"avr/io.h"



void SPI_VidMasterInit(void){
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
	//selct master
	SET_BIT(SPCR,MSTR);
    21ac:	ad e2       	ldi	r26, 0x2D	; 45
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	ed e2       	ldi	r30, 0x2D	; 45
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	80 61       	ori	r24, 0x10	; 16
    21b8:	8c 93       	st	X, r24
	//MSB
	CLR_BIT(SPCR,DORD);
    21ba:	ad e2       	ldi	r26, 0x2D	; 45
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	ed e2       	ldi	r30, 0x2D	; 45
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	8f 7d       	andi	r24, 0xDF	; 223
    21c6:	8c 93       	st	X, r24
	// divide by 16
	SET_BIT(SPCR,SPR0);
    21c8:	ad e2       	ldi	r26, 0x2D	; 45
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	ed e2       	ldi	r30, 0x2D	; 45
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	81 60       	ori	r24, 0x01	; 1
    21d4:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPR1);
    21d6:	ad e2       	ldi	r26, 0x2D	; 45
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	ed e2       	ldi	r30, 0x2D	; 45
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	8d 7f       	andi	r24, 0xFD	; 253
    21e2:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPI2X);
    21e4:	ad e2       	ldi	r26, 0x2D	; 45
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	ed e2       	ldi	r30, 0x2D	; 45
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	8e 7f       	andi	r24, 0xFE	; 254
    21f0:	8c 93       	st	X, r24

	//CLK setup
	SET_BIT(SPCR,CPHA);
    21f2:	ad e2       	ldi	r26, 0x2D	; 45
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	ed e2       	ldi	r30, 0x2D	; 45
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	84 60       	ori	r24, 0x04	; 4
    21fe:	8c 93       	st	X, r24
	SET_BIT(SPCR,CPOL);
    2200:	ad e2       	ldi	r26, 0x2D	; 45
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	ed e2       	ldi	r30, 0x2D	; 45
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	88 60       	ori	r24, 0x08	; 8
    220c:	8c 93       	st	X, r24

   //SPI enable
	SET_BIT(SPCR,SPE);
    220e:	ad e2       	ldi	r26, 0x2D	; 45
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	ed e2       	ldi	r30, 0x2D	; 45
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	80 64       	ori	r24, 0x40	; 64
    221a:	8c 93       	st	X, r24
}
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <SPI_VidSlaveInit>:

void SPI_VidSlaveInit(void){
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
	//selct slave
		CLR_BIT(SPCR,MSTR);
    222a:	ad e2       	ldi	r26, 0x2D	; 45
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	ed e2       	ldi	r30, 0x2D	; 45
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8f 7e       	andi	r24, 0xEF	; 239
    2236:	8c 93       	st	X, r24

	//MSB
		CLR_BIT(SPCR,DORD);
    2238:	ad e2       	ldi	r26, 0x2D	; 45
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	ed e2       	ldi	r30, 0x2D	; 45
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8f 7d       	andi	r24, 0xDF	; 223
    2244:	8c 93       	st	X, r24
	//CLK setup
		SET_BIT(SPCR,CPHA);
    2246:	ad e2       	ldi	r26, 0x2D	; 45
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	ed e2       	ldi	r30, 0x2D	; 45
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	84 60       	ori	r24, 0x04	; 4
    2252:	8c 93       	st	X, r24
		SET_BIT(SPCR,CPOL);
    2254:	ad e2       	ldi	r26, 0x2D	; 45
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	ed e2       	ldi	r30, 0x2D	; 45
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	88 60       	ori	r24, 0x08	; 8
    2260:	8c 93       	st	X, r24
	//SPI enable
		SET_BIT(SPCR,SPE);
    2262:	ad e2       	ldi	r26, 0x2D	; 45
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	ed e2       	ldi	r30, 0x2D	; 45
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	80 64       	ori	r24, 0x40	; 64
    226e:	8c 93       	st	X, r24
}
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <SPI_U8Transmit>:

void SPI_U8Transmit(u8 Copy_U8Data){
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	0f 92       	push	r0
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_U8Data;
    2282:	ef e2       	ldi	r30, 0x2F	; 47
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	80 83       	st	Z, r24
}
    228a:	0f 90       	pop	r0
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <SPI_U8Recieve>:
u8 SPI_U8Recieve(void){
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
	while((GET_BIT(SPSR,SPIF))==0);
    229a:	ee e2       	ldi	r30, 0x2E	; 46
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	88 23       	and	r24, r24
    22a2:	dc f7       	brge	.-10     	; 0x229a <SPI_U8Recieve+0x8>
	return SPDR;
    22a4:	ef e2       	ldi	r30, 0x2F	; 47
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
}
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <Timers_VidTimer0Init>:

void (*Timer0_PFun)(void);


void Timers_VidTimer0Init(void)
{
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT( TCCR0 , WGM01 );
	/*CTC Mode*/
//	CLR_BIT( TCCR0 , WGM00 );
//	SET_BIT( TCCR0 , WGM01 );
	//fast PWM mode
	SET_BIT( TCCR0 , WGM00 );
    22b8:	a3 e5       	ldi	r26, 0x53	; 83
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e3 e5       	ldi	r30, 0x53	; 83
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	80 64       	ori	r24, 0x40	; 64
    22c4:	8c 93       	st	X, r24
	SET_BIT( TCCR0 , WGM01 );
    22c6:	a3 e5       	ldi	r26, 0x53	; 83
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e3 e5       	ldi	r30, 0x53	; 83
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	88 60       	ori	r24, 0x08	; 8
    22d2:	8c 93       	st	X, r24

	/*setup the mode of OC0 pin*/

	CLR_BIT(TCCR0,COM00);
    22d4:	a3 e5       	ldi	r26, 0x53	; 83
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e3 e5       	ldi	r30, 0x53	; 83
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	8f 7e       	andi	r24, 0xEF	; 239
    22e0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    22e2:	a3 e5       	ldi	r26, 0x53	; 83
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e3 e5       	ldi	r30, 0x53	; 83
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	80 62       	ori	r24, 0x20	; 32
    22ee:	8c 93       	st	X, r24
	/*Setup the OCR Value*/
	//OCR0 = 99 ;

	/*Select Prescaler factor*/
	/*/8 */
	CLR_BIT( TCCR0 , CS00 );
    22f0:	a3 e5       	ldi	r26, 0x53	; 83
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e3 e5       	ldi	r30, 0x53	; 83
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	8e 7f       	andi	r24, 0xFE	; 254
    22fc:	8c 93       	st	X, r24
	SET_BIT( TCCR0 , CS01 );
    22fe:	a3 e5       	ldi	r26, 0x53	; 83
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e3 e5       	ldi	r30, 0x53	; 83
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	82 60       	ori	r24, 0x02	; 2
    230a:	8c 93       	st	X, r24
	CLR_BIT( TCCR0 , CS02 );
    230c:	a3 e5       	ldi	r26, 0x53	; 83
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e3 e5       	ldi	r30, 0x53	; 83
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	8b 7f       	andi	r24, 0xFB	; 251
    2318:	8c 93       	st	X, r24
}
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <Timers_VidTimer0SetCallBack>:

void Timers_VidTimer0SetCallBack( void (*Timer0_Ptr)(void) )
{
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	00 d0       	rcall	.+0      	; 0x2326 <Timers_VidTimer0SetCallBack+0x6>
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PFun = Timer0_Ptr ;
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	90 93 73 00 	sts	0x0073, r25
    2336:	80 93 72 00 	sts	0x0072, r24
}
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    2344:	1f 92       	push	r1
    2346:	0f 92       	push	r0
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	0f 92       	push	r0
    234c:	11 24       	eor	r1, r1
    234e:	2f 93       	push	r18
    2350:	3f 93       	push	r19
    2352:	4f 93       	push	r20
    2354:	5f 93       	push	r21
    2356:	6f 93       	push	r22
    2358:	7f 93       	push	r23
    235a:	8f 93       	push	r24
    235c:	9f 93       	push	r25
    235e:	af 93       	push	r26
    2360:	bf 93       	push	r27
    2362:	ef 93       	push	r30
    2364:	ff 93       	push	r31
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_U16CounterOVF = 0 ;
	Local_U16CounterOVF++ ;
    236e:	80 91 68 00 	lds	r24, 0x0068
    2372:	90 91 69 00 	lds	r25, 0x0069
    2376:	01 96       	adiw	r24, 0x01	; 1
    2378:	90 93 69 00 	sts	0x0069, r25
    237c:	80 93 68 00 	sts	0x0068, r24
	if( Local_U16CounterOVF == 3907 )
    2380:	80 91 68 00 	lds	r24, 0x0068
    2384:	90 91 69 00 	lds	r25, 0x0069
    2388:	2f e0       	ldi	r18, 0x0F	; 15
    238a:	83 34       	cpi	r24, 0x43	; 67
    238c:	92 07       	cpc	r25, r18
    238e:	69 f4       	brne	.+26     	; 0x23aa <__vector_11+0x66>
	{
		Local_U16CounterOVF = 0 ;
    2390:	10 92 69 00 	sts	0x0069, r1
    2394:	10 92 68 00 	sts	0x0068, r1
		TCNT0 = 192 ;
    2398:	e2 e5       	ldi	r30, 0x52	; 82
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 ec       	ldi	r24, 0xC0	; 192
    239e:	80 83       	st	Z, r24

		Timer0_PFun();
    23a0:	e0 91 72 00 	lds	r30, 0x0072
    23a4:	f0 91 73 00 	lds	r31, 0x0073
    23a8:	09 95       	icall
	}

}
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	ff 91       	pop	r31
    23b0:	ef 91       	pop	r30
    23b2:	bf 91       	pop	r27
    23b4:	af 91       	pop	r26
    23b6:	9f 91       	pop	r25
    23b8:	8f 91       	pop	r24
    23ba:	7f 91       	pop	r23
    23bc:	6f 91       	pop	r22
    23be:	5f 91       	pop	r21
    23c0:	4f 91       	pop	r20
    23c2:	3f 91       	pop	r19
    23c4:	2f 91       	pop	r18
    23c6:	0f 90       	pop	r0
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	0f 90       	pop	r0
    23cc:	1f 90       	pop	r1
    23ce:	18 95       	reti

000023d0 <__vector_10>:



ISR(TIMER0_COMP_vect)
{
    23d0:	1f 92       	push	r1
    23d2:	0f 92       	push	r0
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	0f 92       	push	r0
    23d8:	11 24       	eor	r1, r1
    23da:	2f 93       	push	r18
    23dc:	3f 93       	push	r19
    23de:	4f 93       	push	r20
    23e0:	5f 93       	push	r21
    23e2:	6f 93       	push	r22
    23e4:	7f 93       	push	r23
    23e6:	8f 93       	push	r24
    23e8:	9f 93       	push	r25
    23ea:	af 93       	push	r26
    23ec:	bf 93       	push	r27
    23ee:	ef 93       	push	r30
    23f0:	ff 93       	push	r31
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_U16CounterCTC = 0 ;
	Local_U16CounterCTC++ ;
    23fa:	80 91 6a 00 	lds	r24, 0x006A
    23fe:	90 91 6b 00 	lds	r25, 0x006B
    2402:	01 96       	adiw	r24, 0x01	; 1
    2404:	90 93 6b 00 	sts	0x006B, r25
    2408:	80 93 6a 00 	sts	0x006A, r24
	if( Local_U16CounterCTC == 10000 )
    240c:	80 91 6a 00 	lds	r24, 0x006A
    2410:	90 91 6b 00 	lds	r25, 0x006B
    2414:	27 e2       	ldi	r18, 0x27	; 39
    2416:	80 31       	cpi	r24, 0x10	; 16
    2418:	92 07       	cpc	r25, r18
    241a:	49 f4       	brne	.+18     	; 0x242e <__vector_10+0x5e>
	{
		Local_U16CounterCTC = 0 ;
    241c:	10 92 6b 00 	sts	0x006B, r1
    2420:	10 92 6a 00 	sts	0x006A, r1
		Timer0_PFun();
    2424:	e0 91 72 00 	lds	r30, 0x0072
    2428:	f0 91 73 00 	lds	r31, 0x0073
    242c:	09 95       	icall
	}
}
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	ff 91       	pop	r31
    2434:	ef 91       	pop	r30
    2436:	bf 91       	pop	r27
    2438:	af 91       	pop	r26
    243a:	9f 91       	pop	r25
    243c:	8f 91       	pop	r24
    243e:	7f 91       	pop	r23
    2440:	6f 91       	pop	r22
    2442:	5f 91       	pop	r21
    2444:	4f 91       	pop	r20
    2446:	3f 91       	pop	r19
    2448:	2f 91       	pop	r18
    244a:	0f 90       	pop	r0
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	0f 90       	pop	r0
    2450:	1f 90       	pop	r1
    2452:	18 95       	reti

00002454 <Timer_VidTimer1Init>:



//servo motor

void Timer_VidTimer1Init(void){
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
	// select mode
	//fast PWM -->14
	CLR_BIT(TCCR1A,WGM10);
    245c:	af e4       	ldi	r26, 0x4F	; 79
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	ef e4       	ldi	r30, 0x4F	; 79
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	8e 7f       	andi	r24, 0xFE	; 254
    2468:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    246a:	af e4       	ldi	r26, 0x4F	; 79
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	ef e4       	ldi	r30, 0x4F	; 79
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	82 60       	ori	r24, 0x02	; 2
    2476:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    2478:	ae e4       	ldi	r26, 0x4E	; 78
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	ee e4       	ldi	r30, 0x4E	; 78
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	88 60       	ori	r24, 0x08	; 8
    2484:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    2486:	ae e4       	ldi	r26, 0x4E	; 78
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	ee e4       	ldi	r30, 0x4E	; 78
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	80 61       	ori	r24, 0x10	; 16
    2492:	8c 93       	st	X, r24
	//select OC1A PIN -->Fast PWM
	CLR_BIT(TCCR1A,COM1A0);
    2494:	af e4       	ldi	r26, 0x4F	; 79
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	ef e4       	ldi	r30, 0x4F	; 79
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	8f 7b       	andi	r24, 0xBF	; 191
    24a0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    24a2:	af e4       	ldi	r26, 0x4F	; 79
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	ef e4       	ldi	r30, 0x4F	; 79
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	80 68       	ori	r24, 0x80	; 128
    24ae:	8c 93       	st	X, r24
	//setup value of ICR1

	ICR1=19999;
    24b0:	e6 e4       	ldi	r30, 0x46	; 70
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	8f e1       	ldi	r24, 0x1F	; 31
    24b6:	9e e4       	ldi	r25, 0x4E	; 78
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24

	//setup OCR1A--> for the angle of serve
	OCR1A=500;
    24bc:	ea e4       	ldi	r30, 0x4A	; 74
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	84 ef       	ldi	r24, 0xF4	; 244
    24c2:	91 e0       	ldi	r25, 0x01	; 1
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	80 83       	st	Z, r24
	//presalar-->8
	CLR_BIT(TCCR1B,CS10);
    24c8:	ae e4       	ldi	r26, 0x4E	; 78
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	ee e4       	ldi	r30, 0x4E	; 78
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	8e 7f       	andi	r24, 0xFE	; 254
    24d4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    24d6:	ae e4       	ldi	r26, 0x4E	; 78
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	ee e4       	ldi	r30, 0x4E	; 78
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	82 60       	ori	r24, 0x02	; 2
    24e2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    24e4:	ae e4       	ldi	r26, 0x4E	; 78
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	ee e4       	ldi	r30, 0x4E	; 78
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	8b 7f       	andi	r24, 0xFB	; 251
    24f0:	8c 93       	st	X, r24
}
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <main>:
#include"SPI.h"



void main(void)
{
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	ef 97       	sbiw	r28, 0x3f	; 63
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
	//***********lamp illusion depends on time***********
	OCR0=0;
    250c:	ec e5       	ldi	r30, 0x5C	; 92
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	10 82       	st	Z, r1
	DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN3,DIO_Output);
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	63 e0       	ldi	r22, 0x03	; 3
    2516:	41 e0       	ldi	r20, 0x01	; 1
    2518:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	Timers_VidTimer0Init();
    251c:	0e 94 58 11 	call	0x22b0	; 0x22b0 <Timers_VidTimer0Init>
	LCD_VidInit();
    2520:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_VidInit>
	//*******SPI*********************
	u8 x;
		// pins
		DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN7,DIO_Intput);
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	67 e0       	ldi	r22, 0x07	; 7
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_Output);
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	66 e0       	ldi	r22, 0x06	; 6
    2532:	41 e0       	ldi	r20, 0x01	; 1
    2534:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN5,DIO_Intput);
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	65 e0       	ldi	r22, 0x05	; 5
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_Intput);
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	64 e0       	ldi	r22, 0x04	; 4
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>

		//DIO_VidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_Output);

	ADC_VidInit();
    254c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_VidInit>


	while(1)
	{
		//***********lamp illusion depends on time***********
		LCD_VidSendChar('1');
    2550:	81 e3       	ldi	r24, 0x31	; 49
    2552:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
		LCD_VidSendChar('2');
    2556:	82 e3       	ldi	r24, 0x32	; 50
    2558:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
		LCD_VidSendChar('p');
    255c:	80 e7       	ldi	r24, 0x70	; 112
    255e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
		LCD_VidSendChar('m');
    2562:	8d e6       	ldi	r24, 0x6D	; 109
    2564:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	a6 e9       	ldi	r26, 0x96	; 150
    256e:	b3 e4       	ldi	r27, 0x43	; 67
    2570:	8d ab       	std	Y+53, r24	; 0x35
    2572:	9e ab       	std	Y+54, r25	; 0x36
    2574:	af ab       	std	Y+55, r26	; 0x37
    2576:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2578:	6d a9       	ldd	r22, Y+53	; 0x35
    257a:	7e a9       	ldd	r23, Y+54	; 0x36
    257c:	8f a9       	ldd	r24, Y+55	; 0x37
    257e:	98 ad       	ldd	r25, Y+56	; 0x38
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	4a ef       	ldi	r20, 0xFA	; 250
    2586:	54 e4       	ldi	r21, 0x44	; 68
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	89 ab       	std	Y+49, r24	; 0x31
    2592:	9a ab       	std	Y+50, r25	; 0x32
    2594:	ab ab       	std	Y+51, r26	; 0x33
    2596:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2598:	69 a9       	ldd	r22, Y+49	; 0x31
    259a:	7a a9       	ldd	r23, Y+50	; 0x32
    259c:	8b a9       	ldd	r24, Y+51	; 0x33
    259e:	9c a9       	ldd	r25, Y+52	; 0x34
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e8       	ldi	r20, 0x80	; 128
    25a6:	5f e3       	ldi	r21, 0x3F	; 63
    25a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ac:	88 23       	and	r24, r24
    25ae:	2c f4       	brge	.+10     	; 0x25ba <main+0xc2>
		__ticks = 1;
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	98 ab       	std	Y+48, r25	; 0x30
    25b6:	8f a7       	std	Y+47, r24	; 0x2f
    25b8:	3f c0       	rjmp	.+126    	; 0x2638 <main+0x140>
	else if (__tmp > 65535)
    25ba:	69 a9       	ldd	r22, Y+49	; 0x31
    25bc:	7a a9       	ldd	r23, Y+50	; 0x32
    25be:	8b a9       	ldd	r24, Y+51	; 0x33
    25c0:	9c a9       	ldd	r25, Y+52	; 0x34
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	3f ef       	ldi	r19, 0xFF	; 255
    25c6:	4f e7       	ldi	r20, 0x7F	; 127
    25c8:	57 e4       	ldi	r21, 0x47	; 71
    25ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ce:	18 16       	cp	r1, r24
    25d0:	4c f5       	brge	.+82     	; 0x2624 <main+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d2:	6d a9       	ldd	r22, Y+53	; 0x35
    25d4:	7e a9       	ldd	r23, Y+54	; 0x36
    25d6:	8f a9       	ldd	r24, Y+55	; 0x37
    25d8:	98 ad       	ldd	r25, Y+56	; 0x38
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e2       	ldi	r20, 0x20	; 32
    25e0:	51 e4       	ldi	r21, 0x41	; 65
    25e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	bc 01       	movw	r22, r24
    25ec:	cd 01       	movw	r24, r26
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	98 ab       	std	Y+48, r25	; 0x30
    25f8:	8f a7       	std	Y+47, r24	; 0x2f
    25fa:	0f c0       	rjmp	.+30     	; 0x261a <main+0x122>
    25fc:	88 ec       	ldi	r24, 0xC8	; 200
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9e a7       	std	Y+46, r25	; 0x2e
    2602:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2604:	8d a5       	ldd	r24, Y+45	; 0x2d
    2606:	9e a5       	ldd	r25, Y+46	; 0x2e
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <main+0x110>
    260c:	9e a7       	std	Y+46, r25	; 0x2e
    260e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2610:	8f a5       	ldd	r24, Y+47	; 0x2f
    2612:	98 a9       	ldd	r25, Y+48	; 0x30
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	98 ab       	std	Y+48, r25	; 0x30
    2618:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261a:	8f a5       	ldd	r24, Y+47	; 0x2f
    261c:	98 a9       	ldd	r25, Y+48	; 0x30
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	69 f7       	brne	.-38     	; 0x25fc <main+0x104>
    2622:	14 c0       	rjmp	.+40     	; 0x264c <main+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2624:	69 a9       	ldd	r22, Y+49	; 0x31
    2626:	7a a9       	ldd	r23, Y+50	; 0x32
    2628:	8b a9       	ldd	r24, Y+51	; 0x33
    262a:	9c a9       	ldd	r25, Y+52	; 0x34
    262c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	98 ab       	std	Y+48, r25	; 0x30
    2636:	8f a7       	std	Y+47, r24	; 0x2f
    2638:	8f a5       	ldd	r24, Y+47	; 0x2f
    263a:	98 a9       	ldd	r25, Y+48	; 0x30
    263c:	9c a7       	std	Y+44, r25	; 0x2c
    263e:	8b a7       	std	Y+43, r24	; 0x2b
    2640:	8b a5       	ldd	r24, Y+43	; 0x2b
    2642:	9c a5       	ldd	r25, Y+44	; 0x2c
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <main+0x14c>
    2648:	9c a7       	std	Y+44, r25	; 0x2c
    264a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(300);
		 	LCD_VidDelChar();
    264c:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_VidDelChar>
		LCD_VidSendChar('5');
    2650:	85 e3       	ldi	r24, 0x35	; 53
    2652:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
		LCD_VidSendChar('5');
    2656:	85 e3       	ldi	r24, 0x35	; 53
    2658:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
		LCD_VidSendChar('p');
    265c:	80 e7       	ldi	r24, 0x70	; 112
    265e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
		LCD_VidSendChar('m');
    2662:	8d e6       	ldi	r24, 0x6D	; 109
    2664:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
		OCR0=50;
    2668:	ec e5       	ldi	r30, 0x5C	; 92
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	82 e3       	ldi	r24, 0x32	; 50
    266e:	80 83       	st	Z, r24
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	a6 e9       	ldi	r26, 0x96	; 150
    2676:	b3 e4       	ldi	r27, 0x43	; 67
    2678:	8f a3       	std	Y+39, r24	; 0x27
    267a:	98 a7       	std	Y+40, r25	; 0x28
    267c:	a9 a7       	std	Y+41, r26	; 0x29
    267e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2680:	6f a1       	ldd	r22, Y+39	; 0x27
    2682:	78 a5       	ldd	r23, Y+40	; 0x28
    2684:	89 a5       	ldd	r24, Y+41	; 0x29
    2686:	9a a5       	ldd	r25, Y+42	; 0x2a
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	4a ef       	ldi	r20, 0xFA	; 250
    268e:	54 e4       	ldi	r21, 0x44	; 68
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	8b a3       	std	Y+35, r24	; 0x23
    269a:	9c a3       	std	Y+36, r25	; 0x24
    269c:	ad a3       	std	Y+37, r26	; 0x25
    269e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26a0:	6b a1       	ldd	r22, Y+35	; 0x23
    26a2:	7c a1       	ldd	r23, Y+36	; 0x24
    26a4:	8d a1       	ldd	r24, Y+37	; 0x25
    26a6:	9e a1       	ldd	r25, Y+38	; 0x26
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e8       	ldi	r20, 0x80	; 128
    26ae:	5f e3       	ldi	r21, 0x3F	; 63
    26b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26b4:	88 23       	and	r24, r24
    26b6:	2c f4       	brge	.+10     	; 0x26c2 <main+0x1ca>
		__ticks = 1;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9a a3       	std	Y+34, r25	; 0x22
    26be:	89 a3       	std	Y+33, r24	; 0x21
    26c0:	3f c0       	rjmp	.+126    	; 0x2740 <main+0x248>
	else if (__tmp > 65535)
    26c2:	6b a1       	ldd	r22, Y+35	; 0x23
    26c4:	7c a1       	ldd	r23, Y+36	; 0x24
    26c6:	8d a1       	ldd	r24, Y+37	; 0x25
    26c8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	3f ef       	ldi	r19, 0xFF	; 255
    26ce:	4f e7       	ldi	r20, 0x7F	; 127
    26d0:	57 e4       	ldi	r21, 0x47	; 71
    26d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d6:	18 16       	cp	r1, r24
    26d8:	4c f5       	brge	.+82     	; 0x272c <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26da:	6f a1       	ldd	r22, Y+39	; 0x27
    26dc:	78 a5       	ldd	r23, Y+40	; 0x28
    26de:	89 a5       	ldd	r24, Y+41	; 0x29
    26e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e2       	ldi	r20, 0x20	; 32
    26e8:	51 e4       	ldi	r21, 0x41	; 65
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	bc 01       	movw	r22, r24
    26f4:	cd 01       	movw	r24, r26
    26f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	9a a3       	std	Y+34, r25	; 0x22
    2700:	89 a3       	std	Y+33, r24	; 0x21
    2702:	0f c0       	rjmp	.+30     	; 0x2722 <main+0x22a>
    2704:	88 ec       	ldi	r24, 0xC8	; 200
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	98 a3       	std	Y+32, r25	; 0x20
    270a:	8f 8f       	std	Y+31, r24	; 0x1f
    270c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    270e:	98 a1       	ldd	r25, Y+32	; 0x20
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <main+0x218>
    2714:	98 a3       	std	Y+32, r25	; 0x20
    2716:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2718:	89 a1       	ldd	r24, Y+33	; 0x21
    271a:	9a a1       	ldd	r25, Y+34	; 0x22
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	9a a3       	std	Y+34, r25	; 0x22
    2720:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2722:	89 a1       	ldd	r24, Y+33	; 0x21
    2724:	9a a1       	ldd	r25, Y+34	; 0x22
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	69 f7       	brne	.-38     	; 0x2704 <main+0x20c>
    272a:	14 c0       	rjmp	.+40     	; 0x2754 <main+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272c:	6b a1       	ldd	r22, Y+35	; 0x23
    272e:	7c a1       	ldd	r23, Y+36	; 0x24
    2730:	8d a1       	ldd	r24, Y+37	; 0x25
    2732:	9e a1       	ldd	r25, Y+38	; 0x26
    2734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9a a3       	std	Y+34, r25	; 0x22
    273e:	89 a3       	std	Y+33, r24	; 0x21
    2740:	89 a1       	ldd	r24, Y+33	; 0x21
    2742:	9a a1       	ldd	r25, Y+34	; 0x22
    2744:	9e 8f       	std	Y+30, r25	; 0x1e
    2746:	8d 8f       	std	Y+29, r24	; 0x1d
    2748:	8d 8d       	ldd	r24, Y+29	; 0x1d
    274a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <main+0x254>
    2750:	9e 8f       	std	Y+30, r25	; 0x1e
    2752:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(300);
		LCD_VidDelChar();
    2754:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_VidDelChar>
		LCD_VidSendChar('1');
    2758:	81 e3       	ldi	r24, 0x31	; 49
    275a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
		LCD_VidSendChar('1');
    275e:	81 e3       	ldi	r24, 0x31	; 49
    2760:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
		LCD_VidSendChar('2');
    2764:	82 e3       	ldi	r24, 0x32	; 50
    2766:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
		LCD_VidSendChar('a');
    276a:	81 e6       	ldi	r24, 0x61	; 97
    276c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
		LCD_VidSendChar('m');
    2770:	8d e6       	ldi	r24, 0x6D	; 109
    2772:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_VidSendChar>
		OCR0=250;
    2776:	ec e5       	ldi	r30, 0x5C	; 92
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	8a ef       	ldi	r24, 0xFA	; 250
    277c:	80 83       	st	Z, r24
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	a6 e9       	ldi	r26, 0x96	; 150
    2784:	b3 e4       	ldi	r27, 0x43	; 67
    2786:	89 8f       	std	Y+25, r24	; 0x19
    2788:	9a 8f       	std	Y+26, r25	; 0x1a
    278a:	ab 8f       	std	Y+27, r26	; 0x1b
    278c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278e:	69 8d       	ldd	r22, Y+25	; 0x19
    2790:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2792:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2794:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	4a ef       	ldi	r20, 0xFA	; 250
    279c:	54 e4       	ldi	r21, 0x44	; 68
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	8d 8b       	std	Y+21, r24	; 0x15
    27a8:	9e 8b       	std	Y+22, r25	; 0x16
    27aa:	af 8b       	std	Y+23, r26	; 0x17
    27ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27ae:	6d 89       	ldd	r22, Y+21	; 0x15
    27b0:	7e 89       	ldd	r23, Y+22	; 0x16
    27b2:	8f 89       	ldd	r24, Y+23	; 0x17
    27b4:	98 8d       	ldd	r25, Y+24	; 0x18
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e8       	ldi	r20, 0x80	; 128
    27bc:	5f e3       	ldi	r21, 0x3F	; 63
    27be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c2:	88 23       	and	r24, r24
    27c4:	2c f4       	brge	.+10     	; 0x27d0 <main+0x2d8>
		__ticks = 1;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	9c 8b       	std	Y+20, r25	; 0x14
    27cc:	8b 8b       	std	Y+19, r24	; 0x13
    27ce:	3f c0       	rjmp	.+126    	; 0x284e <main+0x356>
	else if (__tmp > 65535)
    27d0:	6d 89       	ldd	r22, Y+21	; 0x15
    27d2:	7e 89       	ldd	r23, Y+22	; 0x16
    27d4:	8f 89       	ldd	r24, Y+23	; 0x17
    27d6:	98 8d       	ldd	r25, Y+24	; 0x18
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	3f ef       	ldi	r19, 0xFF	; 255
    27dc:	4f e7       	ldi	r20, 0x7F	; 127
    27de:	57 e4       	ldi	r21, 0x47	; 71
    27e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e4:	18 16       	cp	r1, r24
    27e6:	4c f5       	brge	.+82     	; 0x283a <main+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e8:	69 8d       	ldd	r22, Y+25	; 0x19
    27ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e2       	ldi	r20, 0x20	; 32
    27f6:	51 e4       	ldi	r21, 0x41	; 65
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9c 8b       	std	Y+20, r25	; 0x14
    280e:	8b 8b       	std	Y+19, r24	; 0x13
    2810:	0f c0       	rjmp	.+30     	; 0x2830 <main+0x338>
    2812:	88 ec       	ldi	r24, 0xC8	; 200
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9a 8b       	std	Y+18, r25	; 0x12
    2818:	89 8b       	std	Y+17, r24	; 0x11
    281a:	89 89       	ldd	r24, Y+17	; 0x11
    281c:	9a 89       	ldd	r25, Y+18	; 0x12
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <main+0x326>
    2822:	9a 8b       	std	Y+18, r25	; 0x12
    2824:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2826:	8b 89       	ldd	r24, Y+19	; 0x13
    2828:	9c 89       	ldd	r25, Y+20	; 0x14
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	9c 8b       	std	Y+20, r25	; 0x14
    282e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2830:	8b 89       	ldd	r24, Y+19	; 0x13
    2832:	9c 89       	ldd	r25, Y+20	; 0x14
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	69 f7       	brne	.-38     	; 0x2812 <main+0x31a>
    2838:	14 c0       	rjmp	.+40     	; 0x2862 <main+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283a:	6d 89       	ldd	r22, Y+21	; 0x15
    283c:	7e 89       	ldd	r23, Y+22	; 0x16
    283e:	8f 89       	ldd	r24, Y+23	; 0x17
    2840:	98 8d       	ldd	r25, Y+24	; 0x18
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9c 8b       	std	Y+20, r25	; 0x14
    284c:	8b 8b       	std	Y+19, r24	; 0x13
    284e:	8b 89       	ldd	r24, Y+19	; 0x13
    2850:	9c 89       	ldd	r25, Y+20	; 0x14
    2852:	98 8b       	std	Y+16, r25	; 0x10
    2854:	8f 87       	std	Y+15, r24	; 0x0f
    2856:	8f 85       	ldd	r24, Y+15	; 0x0f
    2858:	98 89       	ldd	r25, Y+16	; 0x10
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <main+0x362>
    285e:	98 8b       	std	Y+16, r25	; 0x10
    2860:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		LCD_VidDelChar();
    2862:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_VidDelChar>
		OCR0=0;
    2866:	ec e5       	ldi	r30, 0x5C	; 92
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	10 82       	st	Z, r1


		//*******SPI2*********
		Local_U16DigitalResult = ADC_U16GetDigitalValue( ADC_CHANNEL_0 );
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_U16GetDigitalValue>
    2872:	9e af       	std	Y+62, r25	; 0x3e
    2874:	8d af       	std	Y+61, r24	; 0x3d
		// analog = digital * step
		Local_U16AnalogResult =(u16)((Local_U16DigitalResult * 2560UL) / (1024)) ;
    2876:	8d ad       	ldd	r24, Y+61	; 0x3d
    2878:	9e ad       	ldd	r25, Y+62	; 0x3e
    287a:	cc 01       	movw	r24, r24
    287c:	a0 e0       	ldi	r26, 0x00	; 0
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	3a e0       	ldi	r19, 0x0A	; 10
    2884:	40 e0       	ldi	r20, 0x00	; 0
    2886:	50 e0       	ldi	r21, 0x00	; 0
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsi3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	07 2e       	mov	r0, r23
    2896:	7a e0       	ldi	r23, 0x0A	; 10
    2898:	b6 95       	lsr	r27
    289a:	a7 95       	ror	r26
    289c:	97 95       	ror	r25
    289e:	87 95       	ror	r24
    28a0:	7a 95       	dec	r23
    28a2:	d1 f7       	brne	.-12     	; 0x2898 <main+0x3a0>
    28a4:	70 2d       	mov	r23, r0
    28a6:	9c af       	std	Y+60, r25	; 0x3c
    28a8:	8b af       	std	Y+59, r24	; 0x3b

		Local_U16Temp = Local_U16AnalogResult / 10 ;
    28aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    28ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    28ae:	2a e0       	ldi	r18, 0x0A	; 10
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	b9 01       	movw	r22, r18
    28b4:	0e 94 01 15 	call	0x2a02	; 0x2a02 <__udivmodhi4>
    28b8:	cb 01       	movw	r24, r22
    28ba:	9a af       	std	Y+58, r25	; 0x3a
    28bc:	89 af       	std	Y+57, r24	; 0x39


		SPI_VidSlaveInit();
    28be:	0e 94 11 11 	call	0x2222	; 0x2222 <SPI_VidSlaveInit>
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	90 e8       	ldi	r25, 0x80	; 128
    28c6:	ac ef       	ldi	r26, 0xFC	; 252
    28c8:	b3 e4       	ldi	r27, 0x43	; 67
    28ca:	8b 87       	std	Y+11, r24	; 0x0b
    28cc:	9c 87       	std	Y+12, r25	; 0x0c
    28ce:	ad 87       	std	Y+13, r26	; 0x0d
    28d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	4a ef       	ldi	r20, 0xFA	; 250
    28e0:	54 e4       	ldi	r21, 0x44	; 68
    28e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	8f 83       	std	Y+7, r24	; 0x07
    28ec:	98 87       	std	Y+8, r25	; 0x08
    28ee:	a9 87       	std	Y+9, r26	; 0x09
    28f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28f2:	6f 81       	ldd	r22, Y+7	; 0x07
    28f4:	78 85       	ldd	r23, Y+8	; 0x08
    28f6:	89 85       	ldd	r24, Y+9	; 0x09
    28f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e8       	ldi	r20, 0x80	; 128
    2900:	5f e3       	ldi	r21, 0x3F	; 63
    2902:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2906:	88 23       	and	r24, r24
    2908:	2c f4       	brge	.+10     	; 0x2914 <main+0x41c>
		__ticks = 1;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9e 83       	std	Y+6, r25	; 0x06
    2910:	8d 83       	std	Y+5, r24	; 0x05
    2912:	3f c0       	rjmp	.+126    	; 0x2992 <main+0x49a>
	else if (__tmp > 65535)
    2914:	6f 81       	ldd	r22, Y+7	; 0x07
    2916:	78 85       	ldd	r23, Y+8	; 0x08
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	3f ef       	ldi	r19, 0xFF	; 255
    2920:	4f e7       	ldi	r20, 0x7F	; 127
    2922:	57 e4       	ldi	r21, 0x47	; 71
    2924:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2928:	18 16       	cp	r1, r24
    292a:	4c f5       	brge	.+82     	; 0x297e <main+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292c:	6b 85       	ldd	r22, Y+11	; 0x0b
    292e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2930:	8d 85       	ldd	r24, Y+13	; 0x0d
    2932:	9e 85       	ldd	r25, Y+14	; 0x0e
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e2       	ldi	r20, 0x20	; 32
    293a:	51 e4       	ldi	r21, 0x41	; 65
    293c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	bc 01       	movw	r22, r24
    2946:	cd 01       	movw	r24, r26
    2948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	9e 83       	std	Y+6, r25	; 0x06
    2952:	8d 83       	std	Y+5, r24	; 0x05
    2954:	0f c0       	rjmp	.+30     	; 0x2974 <main+0x47c>
    2956:	88 ec       	ldi	r24, 0xC8	; 200
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	9c 83       	std	Y+4, r25	; 0x04
    295c:	8b 83       	std	Y+3, r24	; 0x03
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <main+0x46a>
    2966:	9c 83       	std	Y+4, r25	; 0x04
    2968:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296a:	8d 81       	ldd	r24, Y+5	; 0x05
    296c:	9e 81       	ldd	r25, Y+6	; 0x06
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	9e 83       	std	Y+6, r25	; 0x06
    2972:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2974:	8d 81       	ldd	r24, Y+5	; 0x05
    2976:	9e 81       	ldd	r25, Y+6	; 0x06
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	69 f7       	brne	.-38     	; 0x2956 <main+0x45e>
    297c:	14 c0       	rjmp	.+40     	; 0x29a6 <main+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297e:	6f 81       	ldd	r22, Y+7	; 0x07
    2980:	78 85       	ldd	r23, Y+8	; 0x08
    2982:	89 85       	ldd	r24, Y+9	; 0x09
    2984:	9a 85       	ldd	r25, Y+10	; 0x0a
    2986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	9e 83       	std	Y+6, r25	; 0x06
    2990:	8d 83       	std	Y+5, r24	; 0x05
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	9e 81       	ldd	r25, Y+6	; 0x06
    2996:	9a 83       	std	Y+2, r25	; 0x02
    2998:	89 83       	std	Y+1, r24	; 0x01
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	9a 81       	ldd	r25, Y+2	; 0x02
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <main+0x4a6>
    29a2:	9a 83       	std	Y+2, r25	; 0x02
    29a4:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(505);
		x=SPI_U8Recieve();
    29a6:	0e 94 49 11 	call	0x2292	; 0x2292 <SPI_U8Recieve>
    29aa:	8f af       	std	Y+63, r24	; 0x3f
		if(x=='f'){
    29ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    29ae:	86 36       	cpi	r24, 0x66	; 102
    29b0:	09 f0       	breq	.+2      	; 0x29b4 <main+0x4bc>
    29b2:	ce cd       	rjmp	.-1124   	; 0x2550 <main+0x58>
			//DIO_VidSetPinValue(DIO_PORTA,DIO_PIN0,DIO_High);
			//DIO_VidTogglePinValue(DIO_PORTA,DIO_PIN0);
			Timer_VidTimer1Init();
    29b4:	0e 94 2a 12 	call	0x2454	; 0x2454 <Timer_VidTimer1Init>
			DIO_VidSetPinDirection( DIO_PORTD , DIO_PIN5 , DIO_Output );
    29b8:	83 e0       	ldi	r24, 0x03	; 3
    29ba:	65 e0       	ldi	r22, 0x05	; 5
    29bc:	41 e0       	ldi	r20, 0x01	; 1
    29be:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
    29c2:	c6 cd       	rjmp	.-1140   	; 0x2550 <main+0x58>

000029c4 <__mulsi3>:
    29c4:	62 9f       	mul	r22, r18
    29c6:	d0 01       	movw	r26, r0
    29c8:	73 9f       	mul	r23, r19
    29ca:	f0 01       	movw	r30, r0
    29cc:	82 9f       	mul	r24, r18
    29ce:	e0 0d       	add	r30, r0
    29d0:	f1 1d       	adc	r31, r1
    29d2:	64 9f       	mul	r22, r20
    29d4:	e0 0d       	add	r30, r0
    29d6:	f1 1d       	adc	r31, r1
    29d8:	92 9f       	mul	r25, r18
    29da:	f0 0d       	add	r31, r0
    29dc:	83 9f       	mul	r24, r19
    29de:	f0 0d       	add	r31, r0
    29e0:	74 9f       	mul	r23, r20
    29e2:	f0 0d       	add	r31, r0
    29e4:	65 9f       	mul	r22, r21
    29e6:	f0 0d       	add	r31, r0
    29e8:	99 27       	eor	r25, r25
    29ea:	72 9f       	mul	r23, r18
    29ec:	b0 0d       	add	r27, r0
    29ee:	e1 1d       	adc	r30, r1
    29f0:	f9 1f       	adc	r31, r25
    29f2:	63 9f       	mul	r22, r19
    29f4:	b0 0d       	add	r27, r0
    29f6:	e1 1d       	adc	r30, r1
    29f8:	f9 1f       	adc	r31, r25
    29fa:	bd 01       	movw	r22, r26
    29fc:	cf 01       	movw	r24, r30
    29fe:	11 24       	eor	r1, r1
    2a00:	08 95       	ret

00002a02 <__udivmodhi4>:
    2a02:	aa 1b       	sub	r26, r26
    2a04:	bb 1b       	sub	r27, r27
    2a06:	51 e1       	ldi	r21, 0x11	; 17
    2a08:	07 c0       	rjmp	.+14     	; 0x2a18 <__udivmodhi4_ep>

00002a0a <__udivmodhi4_loop>:
    2a0a:	aa 1f       	adc	r26, r26
    2a0c:	bb 1f       	adc	r27, r27
    2a0e:	a6 17       	cp	r26, r22
    2a10:	b7 07       	cpc	r27, r23
    2a12:	10 f0       	brcs	.+4      	; 0x2a18 <__udivmodhi4_ep>
    2a14:	a6 1b       	sub	r26, r22
    2a16:	b7 0b       	sbc	r27, r23

00002a18 <__udivmodhi4_ep>:
    2a18:	88 1f       	adc	r24, r24
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	5a 95       	dec	r21
    2a1e:	a9 f7       	brne	.-22     	; 0x2a0a <__udivmodhi4_loop>
    2a20:	80 95       	com	r24
    2a22:	90 95       	com	r25
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	08 95       	ret

00002a2a <__udivmodsi4>:
    2a2a:	a1 e2       	ldi	r26, 0x21	; 33
    2a2c:	1a 2e       	mov	r1, r26
    2a2e:	aa 1b       	sub	r26, r26
    2a30:	bb 1b       	sub	r27, r27
    2a32:	fd 01       	movw	r30, r26
    2a34:	0d c0       	rjmp	.+26     	; 0x2a50 <__udivmodsi4_ep>

00002a36 <__udivmodsi4_loop>:
    2a36:	aa 1f       	adc	r26, r26
    2a38:	bb 1f       	adc	r27, r27
    2a3a:	ee 1f       	adc	r30, r30
    2a3c:	ff 1f       	adc	r31, r31
    2a3e:	a2 17       	cp	r26, r18
    2a40:	b3 07       	cpc	r27, r19
    2a42:	e4 07       	cpc	r30, r20
    2a44:	f5 07       	cpc	r31, r21
    2a46:	20 f0       	brcs	.+8      	; 0x2a50 <__udivmodsi4_ep>
    2a48:	a2 1b       	sub	r26, r18
    2a4a:	b3 0b       	sbc	r27, r19
    2a4c:	e4 0b       	sbc	r30, r20
    2a4e:	f5 0b       	sbc	r31, r21

00002a50 <__udivmodsi4_ep>:
    2a50:	66 1f       	adc	r22, r22
    2a52:	77 1f       	adc	r23, r23
    2a54:	88 1f       	adc	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	1a 94       	dec	r1
    2a5a:	69 f7       	brne	.-38     	; 0x2a36 <__udivmodsi4_loop>
    2a5c:	60 95       	com	r22
    2a5e:	70 95       	com	r23
    2a60:	80 95       	com	r24
    2a62:	90 95       	com	r25
    2a64:	9b 01       	movw	r18, r22
    2a66:	ac 01       	movw	r20, r24
    2a68:	bd 01       	movw	r22, r26
    2a6a:	cf 01       	movw	r24, r30
    2a6c:	08 95       	ret

00002a6e <__prologue_saves__>:
    2a6e:	2f 92       	push	r2
    2a70:	3f 92       	push	r3
    2a72:	4f 92       	push	r4
    2a74:	5f 92       	push	r5
    2a76:	6f 92       	push	r6
    2a78:	7f 92       	push	r7
    2a7a:	8f 92       	push	r8
    2a7c:	9f 92       	push	r9
    2a7e:	af 92       	push	r10
    2a80:	bf 92       	push	r11
    2a82:	cf 92       	push	r12
    2a84:	df 92       	push	r13
    2a86:	ef 92       	push	r14
    2a88:	ff 92       	push	r15
    2a8a:	0f 93       	push	r16
    2a8c:	1f 93       	push	r17
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	ca 1b       	sub	r28, r26
    2a98:	db 0b       	sbc	r29, r27
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	f8 94       	cli
    2a9e:	de bf       	out	0x3e, r29	; 62
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	09 94       	ijmp

00002aa6 <__epilogue_restores__>:
    2aa6:	2a 88       	ldd	r2, Y+18	; 0x12
    2aa8:	39 88       	ldd	r3, Y+17	; 0x11
    2aaa:	48 88       	ldd	r4, Y+16	; 0x10
    2aac:	5f 84       	ldd	r5, Y+15	; 0x0f
    2aae:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ab0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ab2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ab4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ab6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ab8:	b9 84       	ldd	r11, Y+9	; 0x09
    2aba:	c8 84       	ldd	r12, Y+8	; 0x08
    2abc:	df 80       	ldd	r13, Y+7	; 0x07
    2abe:	ee 80       	ldd	r14, Y+6	; 0x06
    2ac0:	fd 80       	ldd	r15, Y+5	; 0x05
    2ac2:	0c 81       	ldd	r16, Y+4	; 0x04
    2ac4:	1b 81       	ldd	r17, Y+3	; 0x03
    2ac6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ac8:	b9 81       	ldd	r27, Y+1	; 0x01
    2aca:	ce 0f       	add	r28, r30
    2acc:	d1 1d       	adc	r29, r1
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	ed 01       	movw	r28, r26
    2ada:	08 95       	ret

00002adc <_exit>:
    2adc:	f8 94       	cli

00002ade <__stop_program>:
    2ade:	ff cf       	rjmp	.-2      	; 0x2ade <__stop_program>
