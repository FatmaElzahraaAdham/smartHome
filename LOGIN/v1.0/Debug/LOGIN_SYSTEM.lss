
LOGIN_SYSTEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00002b7e  00002c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800098  00800098  00002c4a  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00002c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001088  00000000  00000000  00004f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006144  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000062d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008318  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009419  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a39c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_1>
       8:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__vector_2>
       c:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__vector_10>
      2c:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <main>
      8a:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e7       	ldi	r22, 0x7E	; 126
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_VidInit>:
#include "ADC.h"




void ADC_VidInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	8c 93       	st	X, r24

	CLR_BIT(ADMUX,ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,ADATE);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,ADPS0);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADEN);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_U16GetDigitalValue>:

u16 ADC_U16GetDigitalValue(u8 Copy_U8ChannelNumber){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <ADC_U16GetDigitalValue+0x6>
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_U16_value;
	ADMUX &=0b11100000;
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 7e       	andi	r24, 0xE0	; 224
     d36:	8c 93       	st	X, r24
	ADMUX |=Copy_U8ChannelNumber ;
     d38:	a7 e2       	ldi	r26, 0x27	; 39
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e7 e2       	ldi	r30, 0x27	; 39
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	90 81       	ld	r25, Z
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	89 2b       	or	r24, r25
     d46:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);
     d48:	a6 e2       	ldi	r26, 0x26	; 38
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e6 e2       	ldi	r30, 0x26	; 38
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 64       	ori	r24, 0x40	; 64
     d54:	8c 93       	st	X, r24

	while((GET_BIT(ADCSRA , ADIF))==0);
     d56:	e6 e2       	ldi	r30, 0x26	; 38
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	82 95       	swap	r24
     d5e:	8f 70       	andi	r24, 0x0F	; 15
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	81 70       	andi	r24, 0x01	; 1
     d66:	90 70       	andi	r25, 0x00	; 0
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	a9 f3       	breq	.-22     	; 0xd56 <ADC_U16GetDigitalValue+0x3a>

	SET_BIT(ADCSRA , ADIF);
     d6c:	a6 e2       	ldi	r26, 0x26	; 38
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e6 e2       	ldi	r30, 0x26	; 38
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 61       	ori	r24, 0x10	; 16
     d78:	8c 93       	st	X, r24

	Local_U16_value=ADC;
     d7a:	e4 e2       	ldi	r30, 0x24	; 36
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01

	return Local_U16_value;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02

}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <DIO_VidSetPinDirection>:

#include"DIO.h"
#include"STD_Lib.h"
void DIO_VidSetPinDirection(u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Direction)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	27 97       	sbiw	r28, 0x07	; 7
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	6a 83       	std	Y+2, r22	; 0x02
     dae:	4b 83       	std	Y+3, r20	; 0x03
	if( Copy_U8Direction == DIO_INPUT )
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	88 23       	and	r24, r24
     db4:	09 f0       	breq	.+2      	; 0xdb8 <DIO_VidSetPinDirection+0x22>
     db6:	74 c0       	rjmp	.+232    	; 0xea0 <DIO_VidSetPinDirection+0x10a>
	{
		switch(Copy_U8Port)
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	3f 83       	std	Y+7, r19	; 0x07
     dc0:	2e 83       	std	Y+6, r18	; 0x06
     dc2:	8e 81       	ldd	r24, Y+6	; 0x06
     dc4:	9f 81       	ldd	r25, Y+7	; 0x07
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	91 05       	cpc	r25, r1
     dca:	59 f1       	breq	.+86     	; 0xe22 <DIO_VidSetPinDirection+0x8c>
     dcc:	2e 81       	ldd	r18, Y+6	; 0x06
     dce:	3f 81       	ldd	r19, Y+7	; 0x07
     dd0:	22 30       	cpi	r18, 0x02	; 2
     dd2:	31 05       	cpc	r19, r1
     dd4:	2c f4       	brge	.+10     	; 0xde0 <DIO_VidSetPinDirection+0x4a>
     dd6:	8e 81       	ldd	r24, Y+6	; 0x06
     dd8:	9f 81       	ldd	r25, Y+7	; 0x07
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	69 f0       	breq	.+26     	; 0xdf8 <DIO_VidSetPinDirection+0x62>
     dde:	d2 c0       	rjmp	.+420    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
     de0:	2e 81       	ldd	r18, Y+6	; 0x06
     de2:	3f 81       	ldd	r19, Y+7	; 0x07
     de4:	22 30       	cpi	r18, 0x02	; 2
     de6:	31 05       	cpc	r19, r1
     de8:	89 f1       	breq	.+98     	; 0xe4c <DIO_VidSetPinDirection+0xb6>
     dea:	8e 81       	ldd	r24, Y+6	; 0x06
     dec:	9f 81       	ldd	r25, Y+7	; 0x07
     dee:	83 30       	cpi	r24, 0x03	; 3
     df0:	91 05       	cpc	r25, r1
     df2:	09 f4       	brne	.+2      	; 0xdf6 <DIO_VidSetPinDirection+0x60>
     df4:	40 c0       	rjmp	.+128    	; 0xe76 <DIO_VidSetPinDirection+0xe0>
     df6:	c6 c0       	rjmp	.+396    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
		{
			case DIO_PORTA :
				CLR_BIT(DDRA,Copy_U8Pin);
     df8:	aa e3       	ldi	r26, 0x3A	; 58
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ea e3       	ldi	r30, 0x3A	; 58
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <DIO_VidSetPinDirection+0x80>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <DIO_VidSetPinDirection+0x7c>
     e1a:	80 95       	com	r24
     e1c:	84 23       	and	r24, r20
     e1e:	8c 93       	st	X, r24
     e20:	b1 c0       	rjmp	.+354    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
				break;

			case DIO_PORTB :
				CLR_BIT(DDRB,Copy_U8Pin);
     e22:	a7 e3       	ldi	r26, 0x37	; 55
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e7 e3       	ldi	r30, 0x37	; 55
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_VidSetPinDirection+0xaa>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_VidSetPinDirection+0xa6>
     e44:	80 95       	com	r24
     e46:	84 23       	and	r24, r20
     e48:	8c 93       	st	X, r24
     e4a:	9c c0       	rjmp	.+312    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
				break;

			case DIO_PORTC :
				CLR_BIT(DDRC,Copy_U8Pin);
     e4c:	a4 e3       	ldi	r26, 0x34	; 52
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e4 e3       	ldi	r30, 0x34	; 52
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_VidSetPinDirection+0xd4>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <DIO_VidSetPinDirection+0xd0>
     e6e:	80 95       	com	r24
     e70:	84 23       	and	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	87 c0       	rjmp	.+270    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
				break;

			case DIO_PORTD :
				CLR_BIT(DDRD,Copy_U8Pin);
     e76:	a1 e3       	ldi	r26, 0x31	; 49
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e1 e3       	ldi	r30, 0x31	; 49
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_VidSetPinDirection+0xfe>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_VidSetPinDirection+0xfa>
     e98:	80 95       	com	r24
     e9a:	84 23       	and	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	72 c0       	rjmp	.+228    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
				break;
		}

	}
	else if ( Copy_U8Direction == DIO_OUTPUT )
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	09 f0       	breq	.+2      	; 0xea8 <DIO_VidSetPinDirection+0x112>
     ea6:	6e c0       	rjmp	.+220    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(Copy_U8Port)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	3d 83       	std	Y+5, r19	; 0x05
     eb0:	2c 83       	std	Y+4, r18	; 0x04
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	9d 81       	ldd	r25, Y+5	; 0x05
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	91 05       	cpc	r25, r1
     eba:	49 f1       	breq	.+82     	; 0xf0e <DIO_VidSetPinDirection+0x178>
     ebc:	2c 81       	ldd	r18, Y+4	; 0x04
     ebe:	3d 81       	ldd	r19, Y+5	; 0x05
     ec0:	22 30       	cpi	r18, 0x02	; 2
     ec2:	31 05       	cpc	r19, r1
     ec4:	2c f4       	brge	.+10     	; 0xed0 <DIO_VidSetPinDirection+0x13a>
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	9d 81       	ldd	r25, Y+5	; 0x05
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	61 f0       	breq	.+24     	; 0xee6 <DIO_VidSetPinDirection+0x150>
     ece:	5a c0       	rjmp	.+180    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
     ed0:	2c 81       	ldd	r18, Y+4	; 0x04
     ed2:	3d 81       	ldd	r19, Y+5	; 0x05
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	71 f1       	breq	.+92     	; 0xf36 <DIO_VidSetPinDirection+0x1a0>
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	91 05       	cpc	r25, r1
     ee2:	e9 f1       	breq	.+122    	; 0xf5e <DIO_VidSetPinDirection+0x1c8>
     ee4:	4f c0       	rjmp	.+158    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
		{
			case DIO_PORTA :
				SET_BIT(DDRA,Copy_U8Pin);
     ee6:	aa e3       	ldi	r26, 0x3A	; 58
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ea e3       	ldi	r30, 0x3A	; 58
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_VidSetPinDirection+0x16e>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_VidSetPinDirection+0x16a>
     f08:	84 2b       	or	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	3b c0       	rjmp	.+118    	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
				break;

			case DIO_PORTB :
				SET_BIT(DDRB,Copy_U8Pin);
     f0e:	a7 e3       	ldi	r26, 0x37	; 55
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e3       	ldi	r30, 0x37	; 55
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_VidSetPinDirection+0x196>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_VidSetPinDirection+0x192>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	27 c0       	rjmp	.+78     	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
				break;

			case DIO_PORTC :
				SET_BIT(DDRC,Copy_U8Pin);
     f36:	a4 e3       	ldi	r26, 0x34	; 52
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e4 e3       	ldi	r30, 0x34	; 52
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_VidSetPinDirection+0x1be>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_VidSetPinDirection+0x1ba>
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	13 c0       	rjmp	.+38     	; 0xf84 <DIO_VidSetPinDirection+0x1ee>
				break;

			case DIO_PORTD :
				SET_BIT(DDRD,Copy_U8Pin);
     f5e:	a1 e3       	ldi	r26, 0x31	; 49
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e1 e3       	ldi	r30, 0x31	; 49
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_VidSetPinDirection+0x1e6>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_VidSetPinDirection+0x1e2>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
		}

	}


}
     f84:	27 96       	adiw	r28, 0x07	; 7
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <DIO_VidSetPinValue>:


void DIO_VidSetPinValue( u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Value )
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	27 97       	sbiw	r28, 0x07	; 7
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	6a 83       	std	Y+2, r22	; 0x02
     fae:	4b 83       	std	Y+3, r20	; 0x03
	if ( Copy_U8Value == DIO_LOW )
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	88 23       	and	r24, r24
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <DIO_VidSetPinValue+0x22>
     fb6:	74 c0       	rjmp	.+232    	; 0x10a0 <DIO_VidSetPinValue+0x10a>
	{
		switch(Copy_U8Port)
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	3f 83       	std	Y+7, r19	; 0x07
     fc0:	2e 83       	std	Y+6, r18	; 0x06
     fc2:	8e 81       	ldd	r24, Y+6	; 0x06
     fc4:	9f 81       	ldd	r25, Y+7	; 0x07
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	91 05       	cpc	r25, r1
     fca:	59 f1       	breq	.+86     	; 0x1022 <DIO_VidSetPinValue+0x8c>
     fcc:	2e 81       	ldd	r18, Y+6	; 0x06
     fce:	3f 81       	ldd	r19, Y+7	; 0x07
     fd0:	22 30       	cpi	r18, 0x02	; 2
     fd2:	31 05       	cpc	r19, r1
     fd4:	2c f4       	brge	.+10     	; 0xfe0 <DIO_VidSetPinValue+0x4a>
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	9f 81       	ldd	r25, Y+7	; 0x07
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	69 f0       	breq	.+26     	; 0xff8 <DIO_VidSetPinValue+0x62>
     fde:	d2 c0       	rjmp	.+420    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
     fe0:	2e 81       	ldd	r18, Y+6	; 0x06
     fe2:	3f 81       	ldd	r19, Y+7	; 0x07
     fe4:	22 30       	cpi	r18, 0x02	; 2
     fe6:	31 05       	cpc	r19, r1
     fe8:	89 f1       	breq	.+98     	; 0x104c <DIO_VidSetPinValue+0xb6>
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
     fec:	9f 81       	ldd	r25, Y+7	; 0x07
     fee:	83 30       	cpi	r24, 0x03	; 3
     ff0:	91 05       	cpc	r25, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <DIO_VidSetPinValue+0x60>
     ff4:	40 c0       	rjmp	.+128    	; 0x1076 <DIO_VidSetPinValue+0xe0>
     ff6:	c6 c0       	rjmp	.+396    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
		{
			case DIO_PORTA :
				CLR_BIT(PORTA,Copy_U8Pin);
     ff8:	ab e3       	ldi	r26, 0x3B	; 59
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	eb e3       	ldi	r30, 0x3B	; 59
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_VidSetPinValue+0x80>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_VidSetPinValue+0x7c>
    101a:	80 95       	com	r24
    101c:	84 23       	and	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	b1 c0       	rjmp	.+354    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
				break;

			case DIO_PORTB :
				CLR_BIT(PORTB,Copy_U8Pin);
    1022:	a8 e3       	ldi	r26, 0x38	; 56
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e8 e3       	ldi	r30, 0x38	; 56
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_VidSetPinValue+0xaa>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_VidSetPinValue+0xa6>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	9c c0       	rjmp	.+312    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
				break;

			case DIO_PORTC :
				CLR_BIT(PORTC,Copy_U8Pin);
    104c:	a5 e3       	ldi	r26, 0x35	; 53
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e3       	ldi	r30, 0x35	; 53
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_VidSetPinValue+0xd4>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_VidSetPinValue+0xd0>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	87 c0       	rjmp	.+270    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
				break;

			case DIO_PORTD :
				CLR_BIT(PORTD,Copy_U8Pin);
    1076:	a2 e3       	ldi	r26, 0x32	; 50
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e2 e3       	ldi	r30, 0x32	; 50
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_VidSetPinValue+0xfe>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_VidSetPinValue+0xfa>
    1098:	80 95       	com	r24
    109a:	84 23       	and	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	72 c0       	rjmp	.+228    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
				break;
		}

	}
	else if ( Copy_U8Value == DIO_HIGH )
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <DIO_VidSetPinValue+0x112>
    10a6:	6e c0       	rjmp	.+220    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
	{
		switch(Copy_U8Port)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3d 83       	std	Y+5, r19	; 0x05
    10b0:	2c 83       	std	Y+4, r18	; 0x04
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	9d 81       	ldd	r25, Y+5	; 0x05
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	49 f1       	breq	.+82     	; 0x110e <DIO_VidSetPinValue+0x178>
    10bc:	2c 81       	ldd	r18, Y+4	; 0x04
    10be:	3d 81       	ldd	r19, Y+5	; 0x05
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	2c f4       	brge	.+10     	; 0x10d0 <DIO_VidSetPinValue+0x13a>
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	61 f0       	breq	.+24     	; 0x10e6 <DIO_VidSetPinValue+0x150>
    10ce:	5a c0       	rjmp	.+180    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
    10d0:	2c 81       	ldd	r18, Y+4	; 0x04
    10d2:	3d 81       	ldd	r19, Y+5	; 0x05
    10d4:	22 30       	cpi	r18, 0x02	; 2
    10d6:	31 05       	cpc	r19, r1
    10d8:	71 f1       	breq	.+92     	; 0x1136 <DIO_VidSetPinValue+0x1a0>
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	9d 81       	ldd	r25, Y+5	; 0x05
    10de:	83 30       	cpi	r24, 0x03	; 3
    10e0:	91 05       	cpc	r25, r1
    10e2:	e9 f1       	breq	.+122    	; 0x115e <DIO_VidSetPinValue+0x1c8>
    10e4:	4f c0       	rjmp	.+158    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
		{
			case DIO_PORTA :
				SET_BIT(PORTA,Copy_U8Pin);
    10e6:	ab e3       	ldi	r26, 0x3B	; 59
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	eb e3       	ldi	r30, 0x3B	; 59
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_VidSetPinValue+0x16e>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_VidSetPinValue+0x16a>
    1108:	84 2b       	or	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	3b c0       	rjmp	.+118    	; 0x1184 <DIO_VidSetPinValue+0x1ee>
				break;

			case DIO_PORTB :
				SET_BIT(PORTB,Copy_U8Pin);
    110e:	a8 e3       	ldi	r26, 0x38	; 56
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e8 e3       	ldi	r30, 0x38	; 56
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_VidSetPinValue+0x196>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_VidSetPinValue+0x192>
    1130:	84 2b       	or	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	27 c0       	rjmp	.+78     	; 0x1184 <DIO_VidSetPinValue+0x1ee>
				break;

			case DIO_PORTC :
				SET_BIT(PORTC,Copy_U8Pin);
    1136:	a5 e3       	ldi	r26, 0x35	; 53
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e5 e3       	ldi	r30, 0x35	; 53
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_VidSetPinValue+0x1be>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_VidSetPinValue+0x1ba>
    1158:	84 2b       	or	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <DIO_VidSetPinValue+0x1ee>
				break;

			case DIO_PORTD :
				SET_BIT(PORTD,Copy_U8Pin);
    115e:	a2 e3       	ldi	r26, 0x32	; 50
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e2 e3       	ldi	r30, 0x32	; 50
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_VidSetPinValue+0x1e6>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_VidSetPinValue+0x1e2>
    1180:	84 2b       	or	r24, r20
    1182:	8c 93       	st	X, r24

	}



}
    1184:	27 96       	adiw	r28, 0x07	; 7
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <DIO_VidSetPortDirection>:




void DIO_VidSetPortDirection( u8 Copy_U8Port , u8 Copy_U8Direction )
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <DIO_VidSetPortDirection+0x6>
    119c:	00 d0       	rcall	.+0      	; 0x119e <DIO_VidSetPortDirection+0x8>
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3c 83       	std	Y+4, r19	; 0x04
    11ae:	2b 83       	std	Y+3, r18	; 0x03
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	91 05       	cpc	r25, r1
    11b8:	d1 f0       	breq	.+52     	; 0x11ee <DIO_VidSetPortDirection+0x58>
    11ba:	2b 81       	ldd	r18, Y+3	; 0x03
    11bc:	3c 81       	ldd	r19, Y+4	; 0x04
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	2c f4       	brge	.+10     	; 0x11ce <DIO_VidSetPortDirection+0x38>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	61 f0       	breq	.+24     	; 0x11e4 <DIO_VidSetPortDirection+0x4e>
    11cc:	1e c0       	rjmp	.+60     	; 0x120a <DIO_VidSetPortDirection+0x74>
    11ce:	2b 81       	ldd	r18, Y+3	; 0x03
    11d0:	3c 81       	ldd	r19, Y+4	; 0x04
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	81 f0       	breq	.+32     	; 0x11f8 <DIO_VidSetPortDirection+0x62>
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	91 05       	cpc	r25, r1
    11e0:	81 f0       	breq	.+32     	; 0x1202 <DIO_VidSetPortDirection+0x6c>
    11e2:	13 c0       	rjmp	.+38     	; 0x120a <DIO_VidSetPortDirection+0x74>
	{
		case DIO_PORTA :
			DDRA = Copy_U8Direction ;
    11e4:	ea e3       	ldi	r30, 0x3A	; 58
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	80 83       	st	Z, r24
    11ec:	0e c0       	rjmp	.+28     	; 0x120a <DIO_VidSetPortDirection+0x74>
			break;

		case DIO_PORTB :
			DDRB = Copy_U8Direction ;
    11ee:	e7 e3       	ldi	r30, 0x37	; 55
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	80 83       	st	Z, r24
    11f6:	09 c0       	rjmp	.+18     	; 0x120a <DIO_VidSetPortDirection+0x74>
			break;

		case DIO_PORTC :
			DDRC = Copy_U8Direction ;
    11f8:	e4 e3       	ldi	r30, 0x34	; 52
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	80 83       	st	Z, r24
    1200:	04 c0       	rjmp	.+8      	; 0x120a <DIO_VidSetPortDirection+0x74>
			break;

		case DIO_PORTD :
			DDRD = Copy_U8Direction ;
    1202:	e1 e3       	ldi	r30, 0x31	; 49
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	80 83       	st	Z, r24
			break;
	}
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <DIO_VidSetPortValue>:

void DIO_VidSetPortValue ( u8 Copy_U8Port , u8 Copy_U8Value )
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <DIO_VidSetPortValue+0x6>
    121e:	00 d0       	rcall	.+0      	; 0x1220 <DIO_VidSetPortValue+0x8>
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	3c 83       	std	Y+4, r19	; 0x04
    1230:	2b 83       	std	Y+3, r18	; 0x03
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	91 05       	cpc	r25, r1
    123a:	d1 f0       	breq	.+52     	; 0x1270 <DIO_VidSetPortValue+0x58>
    123c:	2b 81       	ldd	r18, Y+3	; 0x03
    123e:	3c 81       	ldd	r19, Y+4	; 0x04
    1240:	22 30       	cpi	r18, 0x02	; 2
    1242:	31 05       	cpc	r19, r1
    1244:	2c f4       	brge	.+10     	; 0x1250 <DIO_VidSetPortValue+0x38>
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	61 f0       	breq	.+24     	; 0x1266 <DIO_VidSetPortValue+0x4e>
    124e:	1e c0       	rjmp	.+60     	; 0x128c <DIO_VidSetPortValue+0x74>
    1250:	2b 81       	ldd	r18, Y+3	; 0x03
    1252:	3c 81       	ldd	r19, Y+4	; 0x04
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	81 f0       	breq	.+32     	; 0x127a <DIO_VidSetPortValue+0x62>
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	91 05       	cpc	r25, r1
    1262:	81 f0       	breq	.+32     	; 0x1284 <DIO_VidSetPortValue+0x6c>
    1264:	13 c0       	rjmp	.+38     	; 0x128c <DIO_VidSetPortValue+0x74>
	{
		case DIO_PORTA :
			PORTA = Copy_U8Value ;
    1266:	eb e3       	ldi	r30, 0x3B	; 59
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	80 83       	st	Z, r24
    126e:	0e c0       	rjmp	.+28     	; 0x128c <DIO_VidSetPortValue+0x74>
			break;

		case DIO_PORTB :
			PORTB = Copy_U8Value ;
    1270:	e8 e3       	ldi	r30, 0x38	; 56
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 83       	st	Z, r24
    1278:	09 c0       	rjmp	.+18     	; 0x128c <DIO_VidSetPortValue+0x74>
			break;

		case DIO_PORTC :
			PORTC = Copy_U8Value ;
    127a:	e5 e3       	ldi	r30, 0x35	; 53
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	80 83       	st	Z, r24
    1282:	04 c0       	rjmp	.+8      	; 0x128c <DIO_VidSetPortValue+0x74>
			break;

		case DIO_PORTD :
			PORTD = Copy_U8Value ;
    1284:	e2 e3       	ldi	r30, 0x32	; 50
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	80 83       	st	Z, r24
			break;
	}
}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <DIO_VidTogglePinValue>:

void DIO_VidTogglePinValue( u8 Copy_U8Port , u8 Copy_U8Pin )
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <DIO_VidTogglePinValue+0x6>
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <DIO_VidTogglePinValue+0x8>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3c 83       	std	Y+4, r19	; 0x04
    12b2:	2b 83       	std	Y+3, r18	; 0x03
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	49 f1       	breq	.+82     	; 0x1310 <DIO_VidTogglePinValue+0x76>
    12be:	2b 81       	ldd	r18, Y+3	; 0x03
    12c0:	3c 81       	ldd	r19, Y+4	; 0x04
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <DIO_VidTogglePinValue+0x38>
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <DIO_VidTogglePinValue+0x4e>
    12d0:	5a c0       	rjmp	.+180    	; 0x1386 <DIO_VidTogglePinValue+0xec>
    12d2:	2b 81       	ldd	r18, Y+3	; 0x03
    12d4:	3c 81       	ldd	r19, Y+4	; 0x04
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	71 f1       	breq	.+92     	; 0x1338 <DIO_VidTogglePinValue+0x9e>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	83 30       	cpi	r24, 0x03	; 3
    12e2:	91 05       	cpc	r25, r1
    12e4:	e9 f1       	breq	.+122    	; 0x1360 <DIO_VidTogglePinValue+0xc6>
    12e6:	4f c0       	rjmp	.+158    	; 0x1386 <DIO_VidTogglePinValue+0xec>
	{
		case DIO_PORTA :
			TOGGLE_BIT(PORTA,Copy_U8Pin);
    12e8:	ab e3       	ldi	r26, 0x3B	; 59
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_VidTogglePinValue+0x6c>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_VidTogglePinValue+0x68>
    130a:	84 27       	eor	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	3b c0       	rjmp	.+118    	; 0x1386 <DIO_VidTogglePinValue+0xec>
			break;

		case DIO_PORTB :
			TOGGLE_BIT(PORTB,Copy_U8Pin);
    1310:	a8 e3       	ldi	r26, 0x38	; 56
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_VidTogglePinValue+0x94>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_VidTogglePinValue+0x90>
    1332:	84 27       	eor	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	27 c0       	rjmp	.+78     	; 0x1386 <DIO_VidTogglePinValue+0xec>
			break;

		case DIO_PORTC :
			TOGGLE_BIT(PORTC,Copy_U8Pin);
    1338:	a5 e3       	ldi	r26, 0x35	; 53
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e5 e3       	ldi	r30, 0x35	; 53
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_VidTogglePinValue+0xbc>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_VidTogglePinValue+0xb8>
    135a:	84 27       	eor	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	13 c0       	rjmp	.+38     	; 0x1386 <DIO_VidTogglePinValue+0xec>
			break;

		case DIO_PORTD :
			TOGGLE_BIT(PORTD,Copy_U8Pin);
    1360:	a2 e3       	ldi	r26, 0x32	; 50
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e2 e3       	ldi	r30, 0x32	; 50
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_VidTogglePinValue+0xe4>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_VidTogglePinValue+0xe0>
    1382:	84 27       	eor	r24, r20
    1384:	8c 93       	st	X, r24
			break;
	}
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <DIO_U8GetPinValue>:


u8 DIO_U8GetPinValue( u8 Copy_U8Port , u8 Copy_U8Pin )
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <DIO_U8GetPinValue+0x6>
    139a:	00 d0       	rcall	.+0      	; 0x139c <DIO_U8GetPinValue+0x8>
    139c:	00 d0       	rcall	.+0      	; 0x139e <DIO_U8GetPinValue+0xa>
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3d 83       	std	Y+5, r19	; 0x05
    13ae:	2c 83       	std	Y+4, r18	; 0x04
    13b0:	4c 81       	ldd	r20, Y+4	; 0x04
    13b2:	5d 81       	ldd	r21, Y+5	; 0x05
    13b4:	41 30       	cpi	r20, 0x01	; 1
    13b6:	51 05       	cpc	r21, r1
    13b8:	49 f1       	breq	.+82     	; 0x140c <DIO_U8GetPinValue+0x78>
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	82 30       	cpi	r24, 0x02	; 2
    13c0:	91 05       	cpc	r25, r1
    13c2:	34 f4       	brge	.+12     	; 0x13d0 <DIO_U8GetPinValue+0x3c>
    13c4:	2c 81       	ldd	r18, Y+4	; 0x04
    13c6:	3d 81       	ldd	r19, Y+5	; 0x05
    13c8:	21 15       	cp	r18, r1
    13ca:	31 05       	cpc	r19, r1
    13cc:	61 f0       	breq	.+24     	; 0x13e6 <DIO_U8GetPinValue+0x52>
    13ce:	57 c0       	rjmp	.+174    	; 0x147e <DIO_U8GetPinValue+0xea>
    13d0:	4c 81       	ldd	r20, Y+4	; 0x04
    13d2:	5d 81       	ldd	r21, Y+5	; 0x05
    13d4:	42 30       	cpi	r20, 0x02	; 2
    13d6:	51 05       	cpc	r21, r1
    13d8:	61 f1       	breq	.+88     	; 0x1432 <DIO_U8GetPinValue+0x9e>
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	91 05       	cpc	r25, r1
    13e2:	d1 f1       	breq	.+116    	; 0x1458 <DIO_U8GetPinValue+0xc4>
    13e4:	4c c0       	rjmp	.+152    	; 0x147e <DIO_U8GetPinValue+0xea>
	{
		case DIO_PORTA :
			return  GET_BIT( PINA , Copy_U8Pin );
    13e6:	e9 e3       	ldi	r30, 0x39	; 57
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_U8GetPinValue+0x6a>
    13fa:	55 95       	asr	r21
    13fc:	47 95       	ror	r20
    13fe:	8a 95       	dec	r24
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_U8GetPinValue+0x66>
    1402:	ca 01       	movw	r24, r20
    1404:	58 2f       	mov	r21, r24
    1406:	51 70       	andi	r21, 0x01	; 1
    1408:	5b 83       	std	Y+3, r21	; 0x03
    140a:	3a c0       	rjmp	.+116    	; 0x1480 <DIO_U8GetPinValue+0xec>
			break;
		case DIO_PORTB :
			return GET_BIT( PINB , Copy_U8Pin );
    140c:	e6 e3       	ldi	r30, 0x36	; 54
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	a9 01       	movw	r20, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_U8GetPinValue+0x90>
    1420:	55 95       	asr	r21
    1422:	47 95       	ror	r20
    1424:	8a 95       	dec	r24
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <DIO_U8GetPinValue+0x8c>
    1428:	ca 01       	movw	r24, r20
    142a:	58 2f       	mov	r21, r24
    142c:	51 70       	andi	r21, 0x01	; 1
    142e:	5b 83       	std	Y+3, r21	; 0x03
    1430:	27 c0       	rjmp	.+78     	; 0x1480 <DIO_U8GetPinValue+0xec>
			break;
		case DIO_PORTC :
			return GET_BIT( PINC , Copy_U8Pin );
    1432:	e3 e3       	ldi	r30, 0x33	; 51
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	a9 01       	movw	r20, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_U8GetPinValue+0xb6>
    1446:	55 95       	asr	r21
    1448:	47 95       	ror	r20
    144a:	8a 95       	dec	r24
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_U8GetPinValue+0xb2>
    144e:	ca 01       	movw	r24, r20
    1450:	58 2f       	mov	r21, r24
    1452:	51 70       	andi	r21, 0x01	; 1
    1454:	5b 83       	std	Y+3, r21	; 0x03
    1456:	14 c0       	rjmp	.+40     	; 0x1480 <DIO_U8GetPinValue+0xec>
			break;
		case DIO_PORTD :
			return GET_BIT( PIND , Copy_U8Pin );
    1458:	e0 e3       	ldi	r30, 0x30	; 48
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a9 01       	movw	r20, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_U8GetPinValue+0xdc>
    146c:	55 95       	asr	r21
    146e:	47 95       	ror	r20
    1470:	8a 95       	dec	r24
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_U8GetPinValue+0xd8>
    1474:	ca 01       	movw	r24, r20
    1476:	58 2f       	mov	r21, r24
    1478:	51 70       	andi	r21, 0x01	; 1
    147a:	5b 83       	std	Y+3, r21	; 0x03
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <DIO_U8GetPinValue+0xec>
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_U8GetPinValue+0xf0>
			break;

	}
}
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	8e 83       	std	Y+6, r24	; 0x06
    1484:	8e 81       	ldd	r24, Y+6	; 0x06
    1486:	26 96       	adiw	r28, 0x06	; 6
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <EX_INT0VidInit>:

void (*Int0_PFUN)(void);
void (*Int1_PFUN)(void);
void (*Int2_PFUN)(void);

void EX_INT0VidInit(void){
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,7);
    14a0:	af e5       	ldi	r26, 0x5F	; 95
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	ef e5       	ldi	r30, 0x5F	; 95
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	80 68       	ori	r24, 0x80	; 128
    14ac:	8c 93       	st	X, r24
	SET_BIT(GICR ,6);
    14ae:	ab e5       	ldi	r26, 0x5B	; 91
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	eb e5       	ldi	r30, 0x5B	; 91
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	80 64       	ori	r24, 0x40	; 64
    14ba:	8c 93       	st	X, r24
//	falling
	CLR_BIT(MCUCR ,0);
    14bc:	a5 e5       	ldi	r26, 0x55	; 85
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e5 e5       	ldi	r30, 0x55	; 85
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8e 7f       	andi	r24, 0xFE	; 254
    14c8:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,1);
    14ca:	a5 e5       	ldi	r26, 0x55	; 85
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e5 e5       	ldi	r30, 0x55	; 85
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	82 60       	ori	r24, 0x02	; 2
    14d6:	8c 93       	st	X, r24
}
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <EX_INT0VidSetCallBack>:

void EX_INT0VidSetCallBack(void (*ptr)(void)){
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <EX_INT0VidSetCallBack+0x6>
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	89 83       	std	Y+1, r24	; 0x01
	Int0_PFUN=ptr;
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	9a 81       	ldd	r25, Y+2	; 0x02
    14f0:	90 93 a9 00 	sts	0x00A9, r25
    14f4:	80 93 a8 00 	sts	0x00A8, r24

}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <EX_INT1VidInit>:
void EX_INT1VidInit(void){
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG ,7);
    150a:	af e5       	ldi	r26, 0x5F	; 95
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ef e5       	ldi	r30, 0x5F	; 95
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	80 68       	ori	r24, 0x80	; 128
    1516:	8c 93       	st	X, r24
	SET_BIT(GICR ,7);
    1518:	ab e5       	ldi	r26, 0x5B	; 91
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	eb e5       	ldi	r30, 0x5B	; 91
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	80 68       	ori	r24, 0x80	; 128
    1524:	8c 93       	st	X, r24
	CLR_BIT(MCUCR ,2);
    1526:	a5 e5       	ldi	r26, 0x55	; 85
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e5       	ldi	r30, 0x55	; 85
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8b 7f       	andi	r24, 0xFB	; 251
    1532:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,3);
    1534:	a5 e5       	ldi	r26, 0x55	; 85
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e5 e5       	ldi	r30, 0x55	; 85
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	88 60       	ori	r24, 0x08	; 8
    1540:	8c 93       	st	X, r24
}
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <EX_INT1VidSetCallBack>:
void EX_INT1VidSetCallBack(void (*ptr)(void)){
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	00 d0       	rcall	.+0      	; 0x154e <EX_INT1VidSetCallBack+0x6>
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
	Int1_PFUN=ptr;
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	90 93 a7 00 	sts	0x00A7, r25
    155e:	80 93 a6 00 	sts	0x00A6, r24

}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <EX_INT2VidInit>:

void EX_INT2VidInit(void){
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG ,7);
    1574:	af e5       	ldi	r26, 0x5F	; 95
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	ef e5       	ldi	r30, 0x5F	; 95
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	80 68       	ori	r24, 0x80	; 128
    1580:	8c 93       	st	X, r24
	SET_BIT(GICR ,5);
    1582:	ab e5       	ldi	r26, 0x5B	; 91
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	eb e5       	ldi	r30, 0x5B	; 91
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	80 62       	ori	r24, 0x20	; 32
    158e:	8c 93       	st	X, r24
	CLR_BIT(MCUCSR ,6);
    1590:	a4 e5       	ldi	r26, 0x54	; 84
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e4 e5       	ldi	r30, 0x54	; 84
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8f 7b       	andi	r24, 0xBF	; 191
    159c:	8c 93       	st	X, r24
}
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <EX_INT2VidSetCallBack>:
void EX_INT2VidSetCallBack(void (*ptr)(void)){
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <EX_INT2VidSetCallBack+0x6>
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
	Int2_PFUN=ptr;
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	90 93 a5 00 	sts	0x00A5, r25
    15ba:	80 93 a4 00 	sts	0x00A4, r24

}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <__vector_1>:

ISR(INT0_vect){
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	2f 93       	push	r18
    15d4:	3f 93       	push	r19
    15d6:	4f 93       	push	r20
    15d8:	5f 93       	push	r21
    15da:	6f 93       	push	r22
    15dc:	7f 93       	push	r23
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	af 93       	push	r26
    15e4:	bf 93       	push	r27
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
	Int0_PFUN();
    15f2:	e0 91 a8 00 	lds	r30, 0x00A8
    15f6:	f0 91 a9 00 	lds	r31, 0x00A9
    15fa:	09 95       	icall
}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	bf 91       	pop	r27
    1606:	af 91       	pop	r26
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
    160c:	7f 91       	pop	r23
    160e:	6f 91       	pop	r22
    1610:	5f 91       	pop	r21
    1612:	4f 91       	pop	r20
    1614:	3f 91       	pop	r19
    1616:	2f 91       	pop	r18
    1618:	0f 90       	pop	r0
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	0f 90       	pop	r0
    161e:	1f 90       	pop	r1
    1620:	18 95       	reti

00001622 <__vector_2>:

ISR(INT1_vect){
    1622:	1f 92       	push	r1
    1624:	0f 92       	push	r0
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	0f 92       	push	r0
    162a:	11 24       	eor	r1, r1
    162c:	2f 93       	push	r18
    162e:	3f 93       	push	r19
    1630:	4f 93       	push	r20
    1632:	5f 93       	push	r21
    1634:	6f 93       	push	r22
    1636:	7f 93       	push	r23
    1638:	8f 93       	push	r24
    163a:	9f 93       	push	r25
    163c:	af 93       	push	r26
    163e:	bf 93       	push	r27
    1640:	ef 93       	push	r30
    1642:	ff 93       	push	r31
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
	Int1_PFUN();
    164c:	e0 91 a6 00 	lds	r30, 0x00A6
    1650:	f0 91 a7 00 	lds	r31, 0x00A7
    1654:	09 95       	icall
}
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	ff 91       	pop	r31
    165c:	ef 91       	pop	r30
    165e:	bf 91       	pop	r27
    1660:	af 91       	pop	r26
    1662:	9f 91       	pop	r25
    1664:	8f 91       	pop	r24
    1666:	7f 91       	pop	r23
    1668:	6f 91       	pop	r22
    166a:	5f 91       	pop	r21
    166c:	4f 91       	pop	r20
    166e:	3f 91       	pop	r19
    1670:	2f 91       	pop	r18
    1672:	0f 90       	pop	r0
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	0f 90       	pop	r0
    1678:	1f 90       	pop	r1
    167a:	18 95       	reti

0000167c <__vector_3>:

ISR(INT2_vect){
    167c:	1f 92       	push	r1
    167e:	0f 92       	push	r0
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	0f 92       	push	r0
    1684:	11 24       	eor	r1, r1
    1686:	2f 93       	push	r18
    1688:	3f 93       	push	r19
    168a:	4f 93       	push	r20
    168c:	5f 93       	push	r21
    168e:	6f 93       	push	r22
    1690:	7f 93       	push	r23
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	af 93       	push	r26
    1698:	bf 93       	push	r27
    169a:	ef 93       	push	r30
    169c:	ff 93       	push	r31
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62

	Int2_PFUN();
    16a6:	e0 91 a4 00 	lds	r30, 0x00A4
    16aa:	f0 91 a5 00 	lds	r31, 0x00A5
    16ae:	09 95       	icall
}
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	ff 91       	pop	r31
    16b6:	ef 91       	pop	r30
    16b8:	bf 91       	pop	r27
    16ba:	af 91       	pop	r26
    16bc:	9f 91       	pop	r25
    16be:	8f 91       	pop	r24
    16c0:	7f 91       	pop	r23
    16c2:	6f 91       	pop	r22
    16c4:	5f 91       	pop	r21
    16c6:	4f 91       	pop	r20
    16c8:	3f 91       	pop	r19
    16ca:	2f 91       	pop	r18
    16cc:	0f 90       	pop	r0
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	0f 90       	pop	r0
    16d2:	1f 90       	pop	r1
    16d4:	18 95       	reti

000016d6 <KBD_VidInit>:
		{'0' , '0' , '0' , '0'}
};


void KBD_VidInit(void)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Col Pins --> Pin0 --> Pin3
	 * Row Pins --> Pin4 --> Pin7
	 * */
	DIO_VidSetPortDirection( KBD_PORT , 0b00001111 );
    16de:	83 e0       	ldi	r24, 0x03	; 3
    16e0:	6f e0       	ldi	r22, 0x0F	; 15
    16e2:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VidSetPortDirection>

	DIO_VidSetPortValue( KBD_PORT , 0b11111111 );
    16e6:	83 e0       	ldi	r24, 0x03	; 3
    16e8:	6f ef       	ldi	r22, 0xFF	; 255
    16ea:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_VidSetPortValue>


}
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <KBD_U8GetPressedKey>:


u8 KBD_U8GetPressedKey(void)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	62 97       	sbiw	r28, 0x12	; 18
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8ColCounter ;
	u8 Local_U8RowCounter ;
	u8 Local_U8Pressed ;
	u8 Local_u8ReturnValue = 20 ;
    1708:	84 e1       	ldi	r24, 0x14	; 20
    170a:	8f 87       	std	Y+15, r24	; 0x0f



	for( Local_U8ColCounter = 0 ; Local_U8ColCounter < 4 ; Local_U8ColCounter++ )
    170c:	1a 8a       	std	Y+18, r1	; 0x12
    170e:	b2 c0       	rjmp	.+356    	; 0x1874 <KBD_U8GetPressedKey+0x180>
	{
		DIO_VidSetPinValue( KBD_PORT , Local_U8ColCounter , DIO_LOW );
    1710:	83 e0       	ldi	r24, 0x03	; 3
    1712:	6a 89       	ldd	r22, Y+18	; 0x12
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

		for( Local_U8RowCounter = 0 ; Local_U8RowCounter < 4 ; Local_U8RowCounter++)
    171a:	19 8a       	std	Y+17, r1	; 0x11
    171c:	9f c0       	rjmp	.+318    	; 0x185c <KBD_U8GetPressedKey+0x168>
		{
			Local_U8Pressed = DIO_U8GetPinValue( KBD_PORT , Local_U8RowCounter+4 );
    171e:	89 89       	ldd	r24, Y+17	; 0x11
    1720:	98 2f       	mov	r25, r24
    1722:	9c 5f       	subi	r25, 0xFC	; 252
    1724:	83 e0       	ldi	r24, 0x03	; 3
    1726:	69 2f       	mov	r22, r25
    1728:	0e 94 ca 09 	call	0x1394	; 0x1394 <DIO_U8GetPinValue>
    172c:	88 8b       	std	Y+16, r24	; 0x10

			if( Local_U8Pressed == 0 ) //Pressed
    172e:	88 89       	ldd	r24, Y+16	; 0x10
    1730:	88 23       	and	r24, r24
    1732:	09 f0       	breq	.+2      	; 0x1736 <KBD_U8GetPressedKey+0x42>
    1734:	90 c0       	rjmp	.+288    	; 0x1856 <KBD_U8GetPressedKey+0x162>
			{
				//Return the value
				Local_u8ReturnValue = KBD_U8Arrangement[Local_U8RowCounter][Local_U8ColCounter];
    1736:	89 89       	ldd	r24, Y+17	; 0x11
    1738:	48 2f       	mov	r20, r24
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	8a 89       	ldd	r24, Y+18	; 0x12
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	ca 01       	movw	r24, r20
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	82 0f       	add	r24, r18
    174e:	93 1f       	adc	r25, r19
    1750:	fc 01       	movw	r30, r24
    1752:	ea 57       	subi	r30, 0x7A	; 122
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	80 81       	ld	r24, Z
    1758:	8f 87       	std	Y+15, r24	; 0x0f
    175a:	08 c0       	rjmp	.+16     	; 0x176c <KBD_U8GetPressedKey+0x78>
				while( Local_U8Pressed == 0 )
				{
					Local_U8Pressed = DIO_U8GetPinValue( KBD_PORT , Local_U8RowCounter+4 );
    175c:	89 89       	ldd	r24, Y+17	; 0x11
    175e:	98 2f       	mov	r25, r24
    1760:	9c 5f       	subi	r25, 0xFC	; 252
    1762:	83 e0       	ldi	r24, 0x03	; 3
    1764:	69 2f       	mov	r22, r25
    1766:	0e 94 ca 09 	call	0x1394	; 0x1394 <DIO_U8GetPinValue>
    176a:	88 8b       	std	Y+16, r24	; 0x10

			if( Local_U8Pressed == 0 ) //Pressed
			{
				//Return the value
				Local_u8ReturnValue = KBD_U8Arrangement[Local_U8RowCounter][Local_U8ColCounter];
				while( Local_U8Pressed == 0 )
    176c:	88 89       	ldd	r24, Y+16	; 0x10
    176e:	88 23       	and	r24, r24
    1770:	a9 f3       	breq	.-22     	; 0x175c <KBD_U8GetPressedKey+0x68>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e2       	ldi	r26, 0x20	; 32
    1778:	b1 e4       	ldi	r27, 0x41	; 65
    177a:	8b 87       	std	Y+11, r24	; 0x0b
    177c:	9c 87       	std	Y+12, r25	; 0x0c
    177e:	ad 87       	std	Y+13, r26	; 0x0d
    1780:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1782:	6b 85       	ldd	r22, Y+11	; 0x0b
    1784:	7c 85       	ldd	r23, Y+12	; 0x0c
    1786:	8d 85       	ldd	r24, Y+13	; 0x0d
    1788:	9e 85       	ldd	r25, Y+14	; 0x0e
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	4a ef       	ldi	r20, 0xFA	; 250
    1790:	54 e4       	ldi	r21, 0x44	; 68
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8f 83       	std	Y+7, r24	; 0x07
    179c:	98 87       	std	Y+8, r25	; 0x08
    179e:	a9 87       	std	Y+9, r26	; 0x09
    17a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a2:	6f 81       	ldd	r22, Y+7	; 0x07
    17a4:	78 85       	ldd	r23, Y+8	; 0x08
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e8       	ldi	r20, 0x80	; 128
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <KBD_U8GetPressedKey+0xd0>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	8d 83       	std	Y+5, r24	; 0x05
    17c2:	3f c0       	rjmp	.+126    	; 0x1842 <KBD_U8GetPressedKey+0x14e>
	else if (__tmp > 65535)
    17c4:	6f 81       	ldd	r22, Y+7	; 0x07
    17c6:	78 85       	ldd	r23, Y+8	; 0x08
    17c8:	89 85       	ldd	r24, Y+9	; 0x09
    17ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17d8:	18 16       	cp	r1, r24
    17da:	4c f5       	brge	.+82     	; 0x182e <KBD_U8GetPressedKey+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17de:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e2       	ldi	r20, 0x20	; 32
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <KBD_U8GetPressedKey+0x130>
    1806:	88 ec       	ldi	r24, 0xC8	; 200
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	9c 83       	std	Y+4, r25	; 0x04
    180c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <KBD_U8GetPressedKey+0x11e>
    1816:	9c 83       	std	Y+4, r25	; 0x04
    1818:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	69 f7       	brne	.-38     	; 0x1806 <KBD_U8GetPressedKey+0x112>
    182c:	14 c0       	rjmp	.+40     	; 0x1856 <KBD_U8GetPressedKey+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	9a 83       	std	Y+2, r25	; 0x02
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <KBD_U8GetPressedKey+0x15a>
    1852:	9a 83       	std	Y+2, r25	; 0x02
    1854:	89 83       	std	Y+1, r24	; 0x01

	for( Local_U8ColCounter = 0 ; Local_U8ColCounter < 4 ; Local_U8ColCounter++ )
	{
		DIO_VidSetPinValue( KBD_PORT , Local_U8ColCounter , DIO_LOW );

		for( Local_U8RowCounter = 0 ; Local_U8RowCounter < 4 ; Local_U8RowCounter++)
    1856:	89 89       	ldd	r24, Y+17	; 0x11
    1858:	8f 5f       	subi	r24, 0xFF	; 255
    185a:	89 8b       	std	Y+17, r24	; 0x11
    185c:	89 89       	ldd	r24, Y+17	; 0x11
    185e:	84 30       	cpi	r24, 0x04	; 4
    1860:	08 f4       	brcc	.+2      	; 0x1864 <KBD_U8GetPressedKey+0x170>
    1862:	5d cf       	rjmp	.-326    	; 0x171e <KBD_U8GetPressedKey+0x2a>
				}

				_delay_ms(10);
			}
		}
		DIO_VidSetPinValue( KBD_PORT , Local_U8ColCounter , DIO_HIGH );
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	6a 89       	ldd	r22, Y+18	; 0x12
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>
	u8 Local_U8Pressed ;
	u8 Local_u8ReturnValue = 20 ;



	for( Local_U8ColCounter = 0 ; Local_U8ColCounter < 4 ; Local_U8ColCounter++ )
    186e:	8a 89       	ldd	r24, Y+18	; 0x12
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	8a 8b       	std	Y+18, r24	; 0x12
    1874:	8a 89       	ldd	r24, Y+18	; 0x12
    1876:	84 30       	cpi	r24, 0x04	; 4
    1878:	08 f4       	brcc	.+2      	; 0x187c <KBD_U8GetPressedKey+0x188>
    187a:	4a cf       	rjmp	.-364    	; 0x1710 <KBD_U8GetPressedKey+0x1c>
			}
		}
		DIO_VidSetPinValue( KBD_PORT , Local_U8ColCounter , DIO_HIGH );
	}

	return Local_u8ReturnValue ;
    187c:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    187e:	62 96       	adiw	r28, 0x12	; 18
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <LCD_VidInit>:
#include"avr/delay.h"
#include"LCD.h"
#include"DIO.h"

void LCD_VidInit(void)
{
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	cc 54       	subi	r28, 0x4C	; 76
    189e:	d0 40       	sbci	r29, 0x00	; 0
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
	//Directions
	DIO_VidSetPinDirection( LCD_RS_PORT , LCD_RS_PIN , DIO_OUTPUT );
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection( LCD_RW_PORT , LCD_RW_PIN , DIO_OUTPUT );
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	41 e0       	ldi	r20, 0x01	; 1
    18ba:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection( LCD_E_PORT , LCD_E_PIN , DIO_OUTPUT );
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	62 e0       	ldi	r22, 0x02	; 2
    18c2:	41 e0       	ldi	r20, 0x01	; 1
    18c4:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPortDirection( LCD_DATA_COMMAND_PORT , 0b11111111 );
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	6f ef       	ldi	r22, 0xFF	; 255
    18cc:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_VidSetPortDirection>
    18d0:	fe 01       	movw	r30, r28
    18d2:	e7 5b       	subi	r30, 0xB7	; 183
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	ac e0       	ldi	r26, 0x0C	; 12
    18dc:	b2 e4       	ldi	r27, 0x42	; 66
    18de:	80 83       	st	Z, r24
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	a2 83       	std	Z+2, r26	; 0x02
    18e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e6:	8e 01       	movw	r16, r28
    18e8:	0b 5b       	subi	r16, 0xBB	; 187
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
    18ec:	fe 01       	movw	r30, r28
    18ee:	e7 5b       	subi	r30, 0xB7	; 183
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	4a ef       	ldi	r20, 0xFA	; 250
    1900:	54 e4       	ldi	r21, 0x44	; 68
    1902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	f8 01       	movw	r30, r16
    190c:	80 83       	st	Z, r24
    190e:	91 83       	std	Z+1, r25	; 0x01
    1910:	a2 83       	std	Z+2, r26	; 0x02
    1912:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1914:	fe 01       	movw	r30, r28
    1916:	eb 5b       	subi	r30, 0xBB	; 187
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	60 81       	ld	r22, Z
    191c:	71 81       	ldd	r23, Z+1	; 0x01
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	93 81       	ldd	r25, Z+3	; 0x03
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    192e:	88 23       	and	r24, r24
    1930:	44 f4       	brge	.+16     	; 0x1942 <LCD_VidInit+0xb2>
		__ticks = 1;
    1932:	fe 01       	movw	r30, r28
    1934:	ed 5b       	subi	r30, 0xBD	; 189
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	80 83       	st	Z, r24
    1940:	64 c0       	rjmp	.+200    	; 0x1a0a <LCD_VidInit+0x17a>
	else if (__tmp > 65535)
    1942:	fe 01       	movw	r30, r28
    1944:	eb 5b       	subi	r30, 0xBB	; 187
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	60 81       	ld	r22, Z
    194a:	71 81       	ldd	r23, Z+1	; 0x01
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	3f ef       	ldi	r19, 0xFF	; 255
    1954:	4f e7       	ldi	r20, 0x7F	; 127
    1956:	57 e4       	ldi	r21, 0x47	; 71
    1958:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    195c:	18 16       	cp	r1, r24
    195e:	0c f0       	brlt	.+2      	; 0x1962 <LCD_VidInit+0xd2>
    1960:	43 c0       	rjmp	.+134    	; 0x19e8 <LCD_VidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	fe 01       	movw	r30, r28
    1964:	e7 5b       	subi	r30, 0xB7	; 183
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e2       	ldi	r20, 0x20	; 32
    1976:	51 e4       	ldi	r21, 0x41	; 65
    1978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	8e 01       	movw	r16, r28
    1982:	0d 5b       	subi	r16, 0xBD	; 189
    1984:	1f 4f       	sbci	r17, 0xFF	; 255
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	f8 01       	movw	r30, r16
    1994:	91 83       	std	Z+1, r25	; 0x01
    1996:	80 83       	st	Z, r24
    1998:	1f c0       	rjmp	.+62     	; 0x19d8 <LCD_VidInit+0x148>
    199a:	fe 01       	movw	r30, r28
    199c:	ef 5b       	subi	r30, 0xBF	; 191
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	88 ec       	ldi	r24, 0xC8	; 200
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	80 83       	st	Z, r24
    19a8:	fe 01       	movw	r30, r28
    19aa:	ef 5b       	subi	r30, 0xBF	; 191
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <LCD_VidInit+0x122>
    19b6:	fe 01       	movw	r30, r28
    19b8:	ef 5b       	subi	r30, 0xBF	; 191
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c0:	de 01       	movw	r26, r28
    19c2:	ad 5b       	subi	r26, 0xBD	; 189
    19c4:	bf 4f       	sbci	r27, 0xFF	; 255
    19c6:	fe 01       	movw	r30, r28
    19c8:	ed 5b       	subi	r30, 0xBD	; 189
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	80 81       	ld	r24, Z
    19ce:	91 81       	ldd	r25, Z+1	; 0x01
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	11 96       	adiw	r26, 0x01	; 1
    19d4:	9c 93       	st	X, r25
    19d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d8:	fe 01       	movw	r30, r28
    19da:	ed 5b       	subi	r30, 0xBD	; 189
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	d1 f6       	brne	.-76     	; 0x199a <LCD_VidInit+0x10a>
    19e6:	24 c0       	rjmp	.+72     	; 0x1a30 <LCD_VidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e8:	8e 01       	movw	r16, r28
    19ea:	0d 5b       	subi	r16, 0xBD	; 189
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	fe 01       	movw	r30, r28
    19f0:	eb 5b       	subi	r30, 0xBB	; 187
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	f8 01       	movw	r30, r16
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	80 83       	st	Z, r24
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ed 5b       	subi	r30, 0xBD	; 189
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	fe 01       	movw	r30, r28
    1a16:	ff 96       	adiw	r30, 0x3f	; 63
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	ff 96       	adiw	r30, 0x3f	; 63
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <LCD_VidInit+0x194>
    1a28:	fe 01       	movw	r30, r28
    1a2a:	ff 96       	adiw	r30, 0x3f	; 63
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	80 83       	st	Z, r24


	_delay_ms(35);

	LCD_VidSendCommand( 0b00111000 );
    1a30:	88 e3       	ldi	r24, 0x38	; 56
    1a32:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_VidSendCommand>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a4 e3       	ldi	r26, 0x34	; 52
    1a3c:	b2 e4       	ldi	r27, 0x42	; 66
    1a3e:	8b af       	std	Y+59, r24	; 0x3b
    1a40:	9c af       	std	Y+60, r25	; 0x3c
    1a42:	ad af       	std	Y+61, r26	; 0x3d
    1a44:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a46:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a48:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a4e:	2b ea       	ldi	r18, 0xAB	; 171
    1a50:	3a ea       	ldi	r19, 0xAA	; 170
    1a52:	4a e2       	ldi	r20, 0x2A	; 42
    1a54:	50 e4       	ldi	r21, 0x40	; 64
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	8f ab       	std	Y+55, r24	; 0x37
    1a60:	98 af       	std	Y+56, r25	; 0x38
    1a62:	a9 af       	std	Y+57, r26	; 0x39
    1a64:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a66:	6f a9       	ldd	r22, Y+55	; 0x37
    1a68:	78 ad       	ldd	r23, Y+56	; 0x38
    1a6a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a6c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e8       	ldi	r20, 0x80	; 128
    1a74:	5f e3       	ldi	r21, 0x3F	; 63
    1a76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	1c f4       	brge	.+6      	; 0x1a84 <LCD_VidInit+0x1f4>
		__ticks = 1;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	8e ab       	std	Y+54, r24	; 0x36
    1a82:	91 c0       	rjmp	.+290    	; 0x1ba6 <LCD_VidInit+0x316>
	else if (__tmp > 255)
    1a84:	6f a9       	ldd	r22, Y+55	; 0x37
    1a86:	78 ad       	ldd	r23, Y+56	; 0x38
    1a88:	89 ad       	ldd	r24, Y+57	; 0x39
    1a8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	53 e4       	ldi	r21, 0x43	; 67
    1a94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	0c f0       	brlt	.+2      	; 0x1a9e <LCD_VidInit+0x20e>
    1a9c:	7b c0       	rjmp	.+246    	; 0x1b94 <LCD_VidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1a9e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1aa0:	7c ad       	ldd	r23, Y+60	; 0x3c
    1aa2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aa4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a e7       	ldi	r20, 0x7A	; 122
    1aac:	54 e4       	ldi	r21, 0x44	; 68
    1aae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8a ab       	std	Y+50, r24	; 0x32
    1ab8:	9b ab       	std	Y+51, r25	; 0x33
    1aba:	ac ab       	std	Y+52, r26	; 0x34
    1abc:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	6a a9       	ldd	r22, Y+50	; 0x32
    1ac0:	7b a9       	ldd	r23, Y+51	; 0x33
    1ac2:	8c a9       	ldd	r24, Y+52	; 0x34
    1ac4:	9d a9       	ldd	r25, Y+53	; 0x35
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a ef       	ldi	r20, 0xFA	; 250
    1acc:	54 e4       	ldi	r21, 0x44	; 68
    1ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	8e a7       	std	Y+46, r24	; 0x2e
    1ad8:	9f a7       	std	Y+47, r25	; 0x2f
    1ada:	a8 ab       	std	Y+48, r26	; 0x30
    1adc:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1ade:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ae0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ae2:	88 a9       	ldd	r24, Y+48	; 0x30
    1ae4:	99 a9       	ldd	r25, Y+49	; 0x31
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <LCD_VidInit+0x270>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9d a7       	std	Y+45, r25	; 0x2d
    1afc:	8c a7       	std	Y+44, r24	; 0x2c
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <LCD_VidInit+0x2ee>
	else if (__tmp > 65535)
    1b00:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b02:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b04:	88 a9       	ldd	r24, Y+48	; 0x30
    1b06:	99 a9       	ldd	r25, Y+49	; 0x31
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	4c f5       	brge	.+82     	; 0x1b6a <LCD_VidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	6a a9       	ldd	r22, Y+50	; 0x32
    1b1a:	7b a9       	ldd	r23, Y+51	; 0x33
    1b1c:	8c a9       	ldd	r24, Y+52	; 0x34
    1b1e:	9d a9       	ldd	r25, Y+53	; 0x35
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9d a7       	std	Y+45, r25	; 0x2d
    1b3e:	8c a7       	std	Y+44, r24	; 0x2c
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <LCD_VidInit+0x2d0>
    1b42:	88 ec       	ldi	r24, 0xC8	; 200
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9b a7       	std	Y+43, r25	; 0x2b
    1b48:	8a a7       	std	Y+42, r24	; 0x2a
    1b4a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b4c:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LCD_VidInit+0x2be>
    1b52:	9b a7       	std	Y+43, r25	; 0x2b
    1b54:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b58:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	9d a7       	std	Y+45, r25	; 0x2d
    1b5e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b60:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b62:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <LCD_VidInit+0x2b2>
    1b68:	24 c0       	rjmp	.+72     	; 0x1bb2 <LCD_VidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b6c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b6e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b70:	99 a9       	ldd	r25, Y+49	; 0x31
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9d a7       	std	Y+45, r25	; 0x2d
    1b7c:	8c a7       	std	Y+44, r24	; 0x2c
    1b7e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b80:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b82:	99 a7       	std	Y+41, r25	; 0x29
    1b84:	88 a7       	std	Y+40, r24	; 0x28
    1b86:	88 a5       	ldd	r24, Y+40	; 0x28
    1b88:	99 a5       	ldd	r25, Y+41	; 0x29
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD_VidInit+0x2fa>
    1b8e:	99 a7       	std	Y+41, r25	; 0x29
    1b90:	88 a7       	std	Y+40, r24	; 0x28
    1b92:	0f c0       	rjmp	.+30     	; 0x1bb2 <LCD_VidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b94:	6f a9       	ldd	r22, Y+55	; 0x37
    1b96:	78 ad       	ldd	r23, Y+56	; 0x38
    1b98:	89 ad       	ldd	r24, Y+57	; 0x39
    1b9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8e ab       	std	Y+54, r24	; 0x36
    1ba6:	8e a9       	ldd	r24, Y+54	; 0x36
    1ba8:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1baa:	8f a1       	ldd	r24, Y+39	; 0x27
    1bac:	8a 95       	dec	r24
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_VidInit+0x31c>
    1bb0:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(45);

	LCD_VidSendCommand( 0b00001100 );
    1bb2:	8c e0       	ldi	r24, 0x0C	; 12
    1bb4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_VidSendCommand>
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	a4 e3       	ldi	r26, 0x34	; 52
    1bbe:	b2 e4       	ldi	r27, 0x42	; 66
    1bc0:	8b a3       	std	Y+35, r24	; 0x23
    1bc2:	9c a3       	std	Y+36, r25	; 0x24
    1bc4:	ad a3       	std	Y+37, r26	; 0x25
    1bc6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bca:	7c a1       	ldd	r23, Y+36	; 0x24
    1bcc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bce:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd0:	2b ea       	ldi	r18, 0xAB	; 171
    1bd2:	3a ea       	ldi	r19, 0xAA	; 170
    1bd4:	4a e2       	ldi	r20, 0x2A	; 42
    1bd6:	50 e4       	ldi	r21, 0x40	; 64
    1bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	8f 8f       	std	Y+31, r24	; 0x1f
    1be2:	98 a3       	std	Y+32, r25	; 0x20
    1be4:	a9 a3       	std	Y+33, r26	; 0x21
    1be6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1be8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bea:	78 a1       	ldd	r23, Y+32	; 0x20
    1bec:	89 a1       	ldd	r24, Y+33	; 0x21
    1bee:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e8       	ldi	r20, 0x80	; 128
    1bf6:	5f e3       	ldi	r21, 0x3F	; 63
    1bf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bfc:	88 23       	and	r24, r24
    1bfe:	1c f4       	brge	.+6      	; 0x1c06 <LCD_VidInit+0x376>
		__ticks = 1;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	8e 8f       	std	Y+30, r24	; 0x1e
    1c04:	91 c0       	rjmp	.+290    	; 0x1d28 <LCD_VidInit+0x498>
	else if (__tmp > 255)
    1c06:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c08:	78 a1       	ldd	r23, Y+32	; 0x20
    1c0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	53 e4       	ldi	r21, 0x43	; 67
    1c16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	0c f0       	brlt	.+2      	; 0x1c20 <LCD_VidInit+0x390>
    1c1e:	7b c0       	rjmp	.+246    	; 0x1d16 <LCD_VidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    1c20:	6b a1       	ldd	r22, Y+35	; 0x23
    1c22:	7c a1       	ldd	r23, Y+36	; 0x24
    1c24:	8d a1       	ldd	r24, Y+37	; 0x25
    1c26:	9e a1       	ldd	r25, Y+38	; 0x26
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a e7       	ldi	r20, 0x7A	; 122
    1c2e:	54 e4       	ldi	r21, 0x44	; 68
    1c30:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8a 8f       	std	Y+26, r24	; 0x1a
    1c3a:	9b 8f       	std	Y+27, r25	; 0x1b
    1c3c:	ac 8f       	std	Y+28, r26	; 0x1c
    1c3e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c40:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c42:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c44:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c46:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	4a ef       	ldi	r20, 0xFA	; 250
    1c4e:	54 e4       	ldi	r21, 0x44	; 68
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	8e 8b       	std	Y+22, r24	; 0x16
    1c5a:	9f 8b       	std	Y+23, r25	; 0x17
    1c5c:	a8 8f       	std	Y+24, r26	; 0x18
    1c5e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c60:	6e 89       	ldd	r22, Y+22	; 0x16
    1c62:	7f 89       	ldd	r23, Y+23	; 0x17
    1c64:	88 8d       	ldd	r24, Y+24	; 0x18
    1c66:	99 8d       	ldd	r25, Y+25	; 0x19
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e8       	ldi	r20, 0x80	; 128
    1c6e:	5f e3       	ldi	r21, 0x3F	; 63
    1c70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c74:	88 23       	and	r24, r24
    1c76:	2c f4       	brge	.+10     	; 0x1c82 <LCD_VidInit+0x3f2>
		__ticks = 1;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9d 8b       	std	Y+21, r25	; 0x15
    1c7e:	8c 8b       	std	Y+20, r24	; 0x14
    1c80:	3f c0       	rjmp	.+126    	; 0x1d00 <LCD_VidInit+0x470>
	else if (__tmp > 65535)
    1c82:	6e 89       	ldd	r22, Y+22	; 0x16
    1c84:	7f 89       	ldd	r23, Y+23	; 0x17
    1c86:	88 8d       	ldd	r24, Y+24	; 0x18
    1c88:	99 8d       	ldd	r25, Y+25	; 0x19
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	3f ef       	ldi	r19, 0xFF	; 255
    1c8e:	4f e7       	ldi	r20, 0x7F	; 127
    1c90:	57 e4       	ldi	r21, 0x47	; 71
    1c92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	4c f5       	brge	.+82     	; 0x1cec <LCD_VidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c9c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ca0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e2       	ldi	r20, 0x20	; 32
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9d 8b       	std	Y+21, r25	; 0x15
    1cc0:	8c 8b       	std	Y+20, r24	; 0x14
    1cc2:	0f c0       	rjmp	.+30     	; 0x1ce2 <LCD_VidInit+0x452>
    1cc4:	88 ec       	ldi	r24, 0xC8	; 200
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9b 8b       	std	Y+19, r25	; 0x13
    1cca:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ccc:	8a 89       	ldd	r24, Y+18	; 0x12
    1cce:	9b 89       	ldd	r25, Y+19	; 0x13
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_VidInit+0x440>
    1cd4:	9b 8b       	std	Y+19, r25	; 0x13
    1cd6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cda:	9d 89       	ldd	r25, Y+21	; 0x15
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	9d 8b       	std	Y+21, r25	; 0x15
    1ce0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ce4:	9d 89       	ldd	r25, Y+21	; 0x15
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	69 f7       	brne	.-38     	; 0x1cc4 <LCD_VidInit+0x434>
    1cea:	24 c0       	rjmp	.+72     	; 0x1d34 <LCD_VidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cec:	6e 89       	ldd	r22, Y+22	; 0x16
    1cee:	7f 89       	ldd	r23, Y+23	; 0x17
    1cf0:	88 8d       	ldd	r24, Y+24	; 0x18
    1cf2:	99 8d       	ldd	r25, Y+25	; 0x19
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9d 8b       	std	Y+21, r25	; 0x15
    1cfe:	8c 8b       	std	Y+20, r24	; 0x14
    1d00:	8c 89       	ldd	r24, Y+20	; 0x14
    1d02:	9d 89       	ldd	r25, Y+21	; 0x15
    1d04:	99 8b       	std	Y+17, r25	; 0x11
    1d06:	88 8b       	std	Y+16, r24	; 0x10
    1d08:	88 89       	ldd	r24, Y+16	; 0x10
    1d0a:	99 89       	ldd	r25, Y+17	; 0x11
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <LCD_VidInit+0x47c>
    1d10:	99 8b       	std	Y+17, r25	; 0x11
    1d12:	88 8b       	std	Y+16, r24	; 0x10
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <LCD_VidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d16:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d18:	78 a1       	ldd	r23, Y+32	; 0x20
    1d1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8e 8f       	std	Y+30, r24	; 0x1e
    1d28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d2a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2e:	8a 95       	dec	r24
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_VidInit+0x49e>
    1d32:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_us(45);

	LCD_VidSendCommand( 0b00000001 );
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_VidSendCommand>
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a0 e0       	ldi	r26, 0x00	; 0
    1d40:	b0 e4       	ldi	r27, 0x40	; 64
    1d42:	8b 87       	std	Y+11, r24	; 0x0b
    1d44:	9c 87       	std	Y+12, r25	; 0x0c
    1d46:	ad 87       	std	Y+13, r26	; 0x0d
    1d48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4a ef       	ldi	r20, 0xFA	; 250
    1d58:	54 e4       	ldi	r21, 0x44	; 68
    1d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	8f 83       	std	Y+7, r24	; 0x07
    1d64:	98 87       	std	Y+8, r25	; 0x08
    1d66:	a9 87       	std	Y+9, r26	; 0x09
    1d68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6c:	78 85       	ldd	r23, Y+8	; 0x08
    1d6e:	89 85       	ldd	r24, Y+9	; 0x09
    1d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	2c f4       	brge	.+10     	; 0x1d8c <LCD_VidInit+0x4fc>
		__ticks = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9e 83       	std	Y+6, r25	; 0x06
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	3f c0       	rjmp	.+126    	; 0x1e0a <LCD_VidInit+0x57a>
	else if (__tmp > 65535)
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	3f ef       	ldi	r19, 0xFF	; 255
    1d98:	4f e7       	ldi	r20, 0x7F	; 127
    1d9a:	57 e4       	ldi	r21, 0x47	; 71
    1d9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da0:	18 16       	cp	r1, r24
    1da2:	4c f5       	brge	.+82     	; 0x1df6 <LCD_VidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <LCD_VidInit+0x55c>
    1dce:	88 ec       	ldi	r24, 0xC8	; 200
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9c 83       	std	Y+4, r25	; 0x04
    1dd4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <LCD_VidInit+0x54a>
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9e 81       	ldd	r25, Y+6	; 0x06
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	9e 83       	std	Y+6, r25	; 0x06
    1dea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	69 f7       	brne	.-38     	; 0x1dce <LCD_VidInit+0x53e>
    1df4:	14 c0       	rjmp	.+40     	; 0x1e1e <LCD_VidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	6f 81       	ldd	r22, Y+7	; 0x07
    1df8:	78 85       	ldd	r23, Y+8	; 0x08
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	9a 81       	ldd	r25, Y+2	; 0x02
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_VidInit+0x586>
    1e1a:	9a 83       	std	Y+2, r25	; 0x02
    1e1c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	LCD_VidSendCommand( 0b00000110 );
    1e1e:	86 e0       	ldi	r24, 0x06	; 6
    1e20:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_VidSendCommand>

}
    1e24:	c4 5b       	subi	r28, 0xB4	; 180
    1e26:	df 4f       	sbci	r29, 0xFF	; 255
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	08 95       	ret

00001e3c <LCD_VidSendCommand>:


void LCD_VidSendCommand( u8 Copy_U8Command )
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	69 97       	sbiw	r28, 0x19	; 25
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	89 8f       	std	Y+25, r24	; 0x19
	//RS = 0
	DIO_VidSetPinValue( LCD_RS_PORT , LCD_RS_PIN , DIO_LOW );
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

	//RW = 0
	DIO_VidSetPinValue( LCD_RW_PORT , LCD_RW_PIN , DIO_LOW );
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

	//Command
	DIO_VidSetPortValue( LCD_DATA_COMMAND_PORT , Copy_U8Command ) ;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	69 8d       	ldd	r22, Y+25	; 0x19
    1e6a:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_VidSetPortValue>


	//E
	DIO_VidSetPinValue( LCD_E_PORT , LCD_E_PIN , DIO_HIGH );
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	62 e0       	ldi	r22, 0x02	; 2
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a0 e8       	ldi	r26, 0x80	; 128
    1e7e:	bf e3       	ldi	r27, 0x3F	; 63
    1e80:	8d 8b       	std	Y+21, r24	; 0x15
    1e82:	9e 8b       	std	Y+22, r25	; 0x16
    1e84:	af 8b       	std	Y+23, r26	; 0x17
    1e86:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e88:	6d 89       	ldd	r22, Y+21	; 0x15
    1e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e90:	2b ea       	ldi	r18, 0xAB	; 171
    1e92:	3a ea       	ldi	r19, 0xAA	; 170
    1e94:	4a e2       	ldi	r20, 0x2A	; 42
    1e96:	50 e4       	ldi	r21, 0x40	; 64
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	89 8b       	std	Y+17, r24	; 0x11
    1ea2:	9a 8b       	std	Y+18, r25	; 0x12
    1ea4:	ab 8b       	std	Y+19, r26	; 0x13
    1ea6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ea8:	69 89       	ldd	r22, Y+17	; 0x11
    1eaa:	7a 89       	ldd	r23, Y+18	; 0x12
    1eac:	8b 89       	ldd	r24, Y+19	; 0x13
    1eae:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	1c f4       	brge	.+6      	; 0x1ec6 <LCD_VidSendCommand+0x8a>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	88 8b       	std	Y+16, r24	; 0x10
    1ec4:	91 c0       	rjmp	.+290    	; 0x1fe8 <LCD_VidSendCommand+0x1ac>
	else if (__tmp > 255)
    1ec6:	69 89       	ldd	r22, Y+17	; 0x11
    1ec8:	7a 89       	ldd	r23, Y+18	; 0x12
    1eca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	53 e4       	ldi	r21, 0x43	; 67
    1ed6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	0c f0       	brlt	.+2      	; 0x1ee0 <LCD_VidSendCommand+0xa4>
    1ede:	7b c0       	rjmp	.+246    	; 0x1fd6 <LCD_VidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1ee0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4a e7       	ldi	r20, 0x7A	; 122
    1eee:	54 e4       	ldi	r21, 0x44	; 68
    1ef0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	8c 87       	std	Y+12, r24	; 0x0c
    1efa:	9d 87       	std	Y+13, r25	; 0x0d
    1efc:	ae 87       	std	Y+14, r26	; 0x0e
    1efe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f00:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f02:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f04:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f06:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a ef       	ldi	r20, 0xFA	; 250
    1f0e:	54 e4       	ldi	r21, 0x44	; 68
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	88 87       	std	Y+8, r24	; 0x08
    1f1a:	99 87       	std	Y+9, r25	; 0x09
    1f1c:	aa 87       	std	Y+10, r26	; 0x0a
    1f1e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f20:	68 85       	ldd	r22, Y+8	; 0x08
    1f22:	79 85       	ldd	r23, Y+9	; 0x09
    1f24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e8       	ldi	r20, 0x80	; 128
    1f2e:	5f e3       	ldi	r21, 0x3F	; 63
    1f30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f34:	88 23       	and	r24, r24
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <LCD_VidSendCommand+0x106>
		__ticks = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9f 83       	std	Y+7, r25	; 0x07
    1f3e:	8e 83       	std	Y+6, r24	; 0x06
    1f40:	3f c0       	rjmp	.+126    	; 0x1fc0 <LCD_VidSendCommand+0x184>
	else if (__tmp > 65535)
    1f42:	68 85       	ldd	r22, Y+8	; 0x08
    1f44:	79 85       	ldd	r23, Y+9	; 0x09
    1f46:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f48:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	57 e4       	ldi	r21, 0x47	; 71
    1f52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	4c f5       	brge	.+82     	; 0x1fac <LCD_VidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f5c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f60:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e2       	ldi	r20, 0x20	; 32
    1f68:	51 e4       	ldi	r21, 0x41	; 65
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9f 83       	std	Y+7, r25	; 0x07
    1f80:	8e 83       	std	Y+6, r24	; 0x06
    1f82:	0f c0       	rjmp	.+30     	; 0x1fa2 <LCD_VidSendCommand+0x166>
    1f84:	88 ec       	ldi	r24, 0xC8	; 200
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	9d 83       	std	Y+5, r25	; 0x05
    1f8a:	8c 83       	std	Y+4, r24	; 0x04
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_VidSendCommand+0x154>
    1f94:	9d 83       	std	Y+5, r25	; 0x05
    1f96:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f98:	8e 81       	ldd	r24, Y+6	; 0x06
    1f9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	9f 83       	std	Y+7, r25	; 0x07
    1fa0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	69 f7       	brne	.-38     	; 0x1f84 <LCD_VidSendCommand+0x148>
    1faa:	24 c0       	rjmp	.+72     	; 0x1ff4 <LCD_VidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fac:	68 85       	ldd	r22, Y+8	; 0x08
    1fae:	79 85       	ldd	r23, Y+9	; 0x09
    1fb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9f 83       	std	Y+7, r25	; 0x07
    1fbe:	8e 83       	std	Y+6, r24	; 0x06
    1fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc4:	9b 83       	std	Y+3, r25	; 0x03
    1fc6:	8a 83       	std	Y+2, r24	; 0x02
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	9b 81       	ldd	r25, Y+3	; 0x03
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <LCD_VidSendCommand+0x190>
    1fd0:	9b 83       	std	Y+3, r25	; 0x03
    1fd2:	8a 83       	std	Y+2, r24	; 0x02
    1fd4:	0f c0       	rjmp	.+30     	; 0x1ff4 <LCD_VidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fd6:	69 89       	ldd	r22, Y+17	; 0x11
    1fd8:	7a 89       	ldd	r23, Y+18	; 0x12
    1fda:	8b 89       	ldd	r24, Y+19	; 0x13
    1fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	88 8b       	std	Y+16, r24	; 0x10
    1fe8:	88 89       	ldd	r24, Y+16	; 0x10
    1fea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	8a 95       	dec	r24
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_VidSendCommand+0x1b2>
    1ff2:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1);

	DIO_VidSetPinValue( LCD_E_PORT , LCD_E_PIN , DIO_LOW);
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	62 e0       	ldi	r22, 0x02	; 2
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

}
    1ffe:	69 96       	adiw	r28, 0x19	; 25
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <LCD_VidSendChar>:

void LCD_VidSendChar( u8 Copy_U8Char )
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	69 97       	sbiw	r28, 0x19	; 25
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	89 8f       	std	Y+25, r24	; 0x19
	//RS =1
	DIO_VidSetPinValue( LCD_RS_PORT , LCD_RS_PIN , DIO_HIGH );
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

	//RW = 0
	DIO_VidSetPinValue( LCD_RW_PORT , LCD_RW_PIN , DIO_LOW );
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	61 e0       	ldi	r22, 0x01	; 1
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

	//Command
	DIO_VidSetPortValue( LCD_DATA_COMMAND_PORT , Copy_U8Char ) ;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	69 8d       	ldd	r22, Y+25	; 0x19
    203e:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_VidSetPortValue>


	//E
	DIO_VidSetPinValue( LCD_E_PORT , LCD_E_PIN , DIO_HIGH );
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	62 e0       	ldi	r22, 0x02	; 2
    2046:	41 e0       	ldi	r20, 0x01	; 1
    2048:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	a0 e8       	ldi	r26, 0x80	; 128
    2052:	bf e3       	ldi	r27, 0x3F	; 63
    2054:	8d 8b       	std	Y+21, r24	; 0x15
    2056:	9e 8b       	std	Y+22, r25	; 0x16
    2058:	af 8b       	std	Y+23, r26	; 0x17
    205a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    205c:	6d 89       	ldd	r22, Y+21	; 0x15
    205e:	7e 89       	ldd	r23, Y+22	; 0x16
    2060:	8f 89       	ldd	r24, Y+23	; 0x17
    2062:	98 8d       	ldd	r25, Y+24	; 0x18
    2064:	2b ea       	ldi	r18, 0xAB	; 171
    2066:	3a ea       	ldi	r19, 0xAA	; 170
    2068:	4a e2       	ldi	r20, 0x2A	; 42
    206a:	50 e4       	ldi	r21, 0x40	; 64
    206c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	89 8b       	std	Y+17, r24	; 0x11
    2076:	9a 8b       	std	Y+18, r25	; 0x12
    2078:	ab 8b       	std	Y+19, r26	; 0x13
    207a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    207c:	69 89       	ldd	r22, Y+17	; 0x11
    207e:	7a 89       	ldd	r23, Y+18	; 0x12
    2080:	8b 89       	ldd	r24, Y+19	; 0x13
    2082:	9c 89       	ldd	r25, Y+20	; 0x14
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e8       	ldi	r20, 0x80	; 128
    208a:	5f e3       	ldi	r21, 0x3F	; 63
    208c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2090:	88 23       	and	r24, r24
    2092:	1c f4       	brge	.+6      	; 0x209a <LCD_VidSendChar+0x8a>
		__ticks = 1;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	88 8b       	std	Y+16, r24	; 0x10
    2098:	91 c0       	rjmp	.+290    	; 0x21bc <LCD_VidSendChar+0x1ac>
	else if (__tmp > 255)
    209a:	69 89       	ldd	r22, Y+17	; 0x11
    209c:	7a 89       	ldd	r23, Y+18	; 0x12
    209e:	8b 89       	ldd	r24, Y+19	; 0x13
    20a0:	9c 89       	ldd	r25, Y+20	; 0x14
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	4f e7       	ldi	r20, 0x7F	; 127
    20a8:	53 e4       	ldi	r21, 0x43	; 67
    20aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ae:	18 16       	cp	r1, r24
    20b0:	0c f0       	brlt	.+2      	; 0x20b4 <LCD_VidSendChar+0xa4>
    20b2:	7b c0       	rjmp	.+246    	; 0x21aa <LCD_VidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    20b4:	6d 89       	ldd	r22, Y+21	; 0x15
    20b6:	7e 89       	ldd	r23, Y+22	; 0x16
    20b8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ba:	98 8d       	ldd	r25, Y+24	; 0x18
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4a e7       	ldi	r20, 0x7A	; 122
    20c2:	54 e4       	ldi	r21, 0x44	; 68
    20c4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8c 87       	std	Y+12, r24	; 0x0c
    20ce:	9d 87       	std	Y+13, r25	; 0x0d
    20d0:	ae 87       	std	Y+14, r26	; 0x0e
    20d2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    20d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    20d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    20da:	9f 85       	ldd	r25, Y+15	; 0x0f
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a ef       	ldi	r20, 0xFA	; 250
    20e2:	54 e4       	ldi	r21, 0x44	; 68
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	88 87       	std	Y+8, r24	; 0x08
    20ee:	99 87       	std	Y+9, r25	; 0x09
    20f0:	aa 87       	std	Y+10, r26	; 0x0a
    20f2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20f4:	68 85       	ldd	r22, Y+8	; 0x08
    20f6:	79 85       	ldd	r23, Y+9	; 0x09
    20f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e8       	ldi	r20, 0x80	; 128
    2102:	5f e3       	ldi	r21, 0x3F	; 63
    2104:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2108:	88 23       	and	r24, r24
    210a:	2c f4       	brge	.+10     	; 0x2116 <LCD_VidSendChar+0x106>
		__ticks = 1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	9f 83       	std	Y+7, r25	; 0x07
    2112:	8e 83       	std	Y+6, r24	; 0x06
    2114:	3f c0       	rjmp	.+126    	; 0x2194 <LCD_VidSendChar+0x184>
	else if (__tmp > 65535)
    2116:	68 85       	ldd	r22, Y+8	; 0x08
    2118:	79 85       	ldd	r23, Y+9	; 0x09
    211a:	8a 85       	ldd	r24, Y+10	; 0x0a
    211c:	9b 85       	ldd	r25, Y+11	; 0x0b
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	3f ef       	ldi	r19, 0xFF	; 255
    2122:	4f e7       	ldi	r20, 0x7F	; 127
    2124:	57 e4       	ldi	r21, 0x47	; 71
    2126:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    212a:	18 16       	cp	r1, r24
    212c:	4c f5       	brge	.+82     	; 0x2180 <LCD_VidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2130:	7d 85       	ldd	r23, Y+13	; 0x0d
    2132:	8e 85       	ldd	r24, Y+14	; 0x0e
    2134:	9f 85       	ldd	r25, Y+15	; 0x0f
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e2       	ldi	r20, 0x20	; 32
    213c:	51 e4       	ldi	r21, 0x41	; 65
    213e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9f 83       	std	Y+7, r25	; 0x07
    2154:	8e 83       	std	Y+6, r24	; 0x06
    2156:	0f c0       	rjmp	.+30     	; 0x2176 <LCD_VidSendChar+0x166>
    2158:	88 ec       	ldi	r24, 0xC8	; 200
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9d 83       	std	Y+5, r25	; 0x05
    215e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2160:	8c 81       	ldd	r24, Y+4	; 0x04
    2162:	9d 81       	ldd	r25, Y+5	; 0x05
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <LCD_VidSendChar+0x154>
    2168:	9d 83       	std	Y+5, r25	; 0x05
    216a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216c:	8e 81       	ldd	r24, Y+6	; 0x06
    216e:	9f 81       	ldd	r25, Y+7	; 0x07
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	9f 83       	std	Y+7, r25	; 0x07
    2174:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2176:	8e 81       	ldd	r24, Y+6	; 0x06
    2178:	9f 81       	ldd	r25, Y+7	; 0x07
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	69 f7       	brne	.-38     	; 0x2158 <LCD_VidSendChar+0x148>
    217e:	24 c0       	rjmp	.+72     	; 0x21c8 <LCD_VidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2180:	68 85       	ldd	r22, Y+8	; 0x08
    2182:	79 85       	ldd	r23, Y+9	; 0x09
    2184:	8a 85       	ldd	r24, Y+10	; 0x0a
    2186:	9b 85       	ldd	r25, Y+11	; 0x0b
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9f 83       	std	Y+7, r25	; 0x07
    2192:	8e 83       	std	Y+6, r24	; 0x06
    2194:	8e 81       	ldd	r24, Y+6	; 0x06
    2196:	9f 81       	ldd	r25, Y+7	; 0x07
    2198:	9b 83       	std	Y+3, r25	; 0x03
    219a:	8a 83       	std	Y+2, r24	; 0x02
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	9b 81       	ldd	r25, Y+3	; 0x03
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <LCD_VidSendChar+0x190>
    21a4:	9b 83       	std	Y+3, r25	; 0x03
    21a6:	8a 83       	std	Y+2, r24	; 0x02
    21a8:	0f c0       	rjmp	.+30     	; 0x21c8 <LCD_VidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21aa:	69 89       	ldd	r22, Y+17	; 0x11
    21ac:	7a 89       	ldd	r23, Y+18	; 0x12
    21ae:	8b 89       	ldd	r24, Y+19	; 0x13
    21b0:	9c 89       	ldd	r25, Y+20	; 0x14
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	88 8b       	std	Y+16, r24	; 0x10
    21bc:	88 89       	ldd	r24, Y+16	; 0x10
    21be:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	8a 95       	dec	r24
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <LCD_VidSendChar+0x1b2>
    21c6:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1);

	DIO_VidSetPinValue( LCD_E_PORT , LCD_E_PIN , DIO_LOW );
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	62 e0       	ldi	r22, 0x02	; 2
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>

}
    21d2:	69 96       	adiw	r28, 0x19	; 25
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <LCD_VidSendString>:
	_delay_ms(5);
	DIO_VidSetPinValue(DIO_PORTA,DIO_PIN2,DIO_Low);
	_delay_ms(5);
}*/

void LCD_VidSendString( u8 *Copy_Pu8String ) {
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <LCD_VidSendString+0x6>
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <LCD_VidSendString+0x8>
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	9c 83       	std	Y+4, r25	; 0x04
    21f2:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;Copy_Pu8String[i]!='\0';i++){
    21f4:	1a 82       	std	Y+2, r1	; 0x02
    21f6:	19 82       	std	Y+1, r1	; 0x01
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <LCD_VidSendString+0x34>
		LCD_VidSendChar(Copy_Pu8String[i]);
    21fa:	29 81       	ldd	r18, Y+1	; 0x01
    21fc:	3a 81       	ldd	r19, Y+2	; 0x02
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	fc 01       	movw	r30, r24
    2204:	e2 0f       	add	r30, r18
    2206:	f3 1f       	adc	r31, r19
    2208:	80 81       	ld	r24, Z
    220a:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>
	DIO_VidSetPinValue(DIO_PORTA,DIO_PIN2,DIO_Low);
	_delay_ms(5);
}*/

void LCD_VidSendString( u8 *Copy_Pu8String ) {
	for(int i=0;Copy_Pu8String[i]!='\0';i++){
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	01 96       	adiw	r24, 0x01	; 1
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	29 81       	ldd	r18, Y+1	; 0x01
    221a:	3a 81       	ldd	r19, Y+2	; 0x02
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	fc 01       	movw	r30, r24
    2222:	e2 0f       	add	r30, r18
    2224:	f3 1f       	adc	r31, r19
    2226:	80 81       	ld	r24, Z
    2228:	88 23       	and	r24, r24
    222a:	39 f7       	brne	.-50     	; 0x21fa <LCD_VidSendString+0x16>
		LCD_VidSendChar(Copy_Pu8String[i]);
	}
}
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <LCD_VidSendNumber>:

//Send Number
void LCD_VidSendNumber( u32 Copy_U32Number ){
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	2c 97       	sbiw	r28, 0x0c	; 12
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	69 87       	std	Y+9, r22	; 0x09
    2250:	7a 87       	std	Y+10, r23	; 0x0a
    2252:	8b 87       	std	Y+11, r24	; 0x0b
    2254:	9c 87       	std	Y+12, r25	; 0x0c

	u32 Local_u32Counter=1 , Local_u32Digit=0;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a0 e0       	ldi	r26, 0x00	; 0
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	af 83       	std	Y+7, r26	; 0x07
    2264:	b8 87       	std	Y+8, r27	; 0x08
    2266:	19 82       	std	Y+1, r1	; 0x01
    2268:	1a 82       	std	Y+2, r1	; 0x02
    226a:	1b 82       	std	Y+3, r1	; 0x03
    226c:	1c 82       	std	Y+4, r1	; 0x04

		if (Copy_U32Number == 0)
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	ab 85       	ldd	r26, Y+11	; 0x0b
    2274:	bc 85       	ldd	r27, Y+12	; 0x0c
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	a1 05       	cpc	r26, r1
    227a:	b1 05       	cpc	r27, r1
    227c:	b1 f4       	brne	.+44     	; 0x22aa <LCD_VidSendNumber+0x70>
		{
			LCD_VidSendChar('0');
    227e:	80 e3       	ldi	r24, 0x30	; 48
    2280:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>
    2284:	7a c0       	rjmp	.+244    	; 0x237a <LCD_VidSendNumber+0x140>
		}
		else
		{
			while (Copy_U32Number/Local_u32Counter != 0)
			{
				Local_u32Counter *= 10;
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	9e 81       	ldd	r25, Y+6	; 0x06
    228a:	af 81       	ldd	r26, Y+7	; 0x07
    228c:	b8 85       	ldd	r27, Y+8	; 0x08
    228e:	2a e0       	ldi	r18, 0x0A	; 10
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__mulsi3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	8d 83       	std	Y+5, r24	; 0x05
    22a4:	9e 83       	std	Y+6, r25	; 0x06
    22a6:	af 83       	std	Y+7, r26	; 0x07
    22a8:	b8 87       	std	Y+8, r27	; 0x08
		{
			LCD_VidSendChar('0');
		}
		else
		{
			while (Copy_U32Number/Local_u32Counter != 0)
    22aa:	89 85       	ldd	r24, Y+9	; 0x09
    22ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    22b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    22b2:	2d 81       	ldd	r18, Y+5	; 0x05
    22b4:	3e 81       	ldd	r19, Y+6	; 0x06
    22b6:	4f 81       	ldd	r20, Y+7	; 0x07
    22b8:	58 85       	ldd	r21, Y+8	; 0x08
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__udivmodsi4>
    22c2:	da 01       	movw	r26, r20
    22c4:	c9 01       	movw	r24, r18
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	a1 05       	cpc	r26, r1
    22ca:	b1 05       	cpc	r27, r1
    22cc:	e1 f6       	brne	.-72     	; 0x2286 <LCD_VidSendNumber+0x4c>
			{
				Local_u32Counter *= 10;
			}
			Local_u32Counter /=10;
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	af 81       	ldd	r26, Y+7	; 0x07
    22d4:	b8 85       	ldd	r27, Y+8	; 0x08
    22d6:	2a e0       	ldi	r18, 0x0A	; 10
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__udivmodsi4>
    22e6:	da 01       	movw	r26, r20
    22e8:	c9 01       	movw	r24, r18
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	af 83       	std	Y+7, r26	; 0x07
    22f0:	b8 87       	std	Y+8, r27	; 0x08
    22f2:	3a c0       	rjmp	.+116    	; 0x2368 <LCD_VidSendNumber+0x12e>

			while (Local_u32Counter != 0)
			{
				Local_u32Digit = Copy_U32Number/Local_u32Counter;
    22f4:	89 85       	ldd	r24, Y+9	; 0x09
    22f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f8:	ab 85       	ldd	r26, Y+11	; 0x0b
    22fa:	bc 85       	ldd	r27, Y+12	; 0x0c
    22fc:	2d 81       	ldd	r18, Y+5	; 0x05
    22fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2300:	4f 81       	ldd	r20, Y+7	; 0x07
    2302:	58 85       	ldd	r21, Y+8	; 0x08
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__udivmodsi4>
    230c:	da 01       	movw	r26, r20
    230e:	c9 01       	movw	r24, r18
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	9a 83       	std	Y+2, r25	; 0x02
    2314:	ab 83       	std	Y+3, r26	; 0x03
    2316:	bc 83       	std	Y+4, r27	; 0x04

				LCD_VidSendChar(Local_u32Digit + '0');
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	80 5d       	subi	r24, 0xD0	; 208
    231c:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>

				Copy_U32Number = Copy_U32Number%Local_u32Counter;
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	9a 85       	ldd	r25, Y+10	; 0x0a
    2324:	ab 85       	ldd	r26, Y+11	; 0x0b
    2326:	bc 85       	ldd	r27, Y+12	; 0x0c
    2328:	2d 81       	ldd	r18, Y+5	; 0x05
    232a:	3e 81       	ldd	r19, Y+6	; 0x06
    232c:	4f 81       	ldd	r20, Y+7	; 0x07
    232e:	58 85       	ldd	r21, Y+8	; 0x08
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__udivmodsi4>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	89 87       	std	Y+9, r24	; 0x09
    233e:	9a 87       	std	Y+10, r25	; 0x0a
    2340:	ab 87       	std	Y+11, r26	; 0x0b
    2342:	bc 87       	std	Y+12, r27	; 0x0c

				Local_u32Counter /= 10;
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	af 81       	ldd	r26, Y+7	; 0x07
    234a:	b8 85       	ldd	r27, Y+8	; 0x08
    234c:	2a e0       	ldi	r18, 0x0A	; 10
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__udivmodsi4>
    235c:	da 01       	movw	r26, r20
    235e:	c9 01       	movw	r24, r18
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	af 83       	std	Y+7, r26	; 0x07
    2366:	b8 87       	std	Y+8, r27	; 0x08
			{
				Local_u32Counter *= 10;
			}
			Local_u32Counter /=10;

			while (Local_u32Counter != 0)
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	af 81       	ldd	r26, Y+7	; 0x07
    236e:	b8 85       	ldd	r27, Y+8	; 0x08
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	a1 05       	cpc	r26, r1
    2374:	b1 05       	cpc	r27, r1
    2376:	09 f0       	breq	.+2      	; 0x237a <LCD_VidSendNumber+0x140>
    2378:	bd cf       	rjmp	.-134    	; 0x22f4 <LCD_VidSendNumber+0xba>
				Copy_U32Number = Copy_U32Number%Local_u32Counter;

				Local_u32Counter /= 10;
			}
		}
}
    237a:	2c 96       	adiw	r28, 0x0c	; 12
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <LCD_VidGoToLocation>:

void LCD_VidGoToLocation ( u8 Copy_U8RowNumber , u8 Copy_U8ColNumber )
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	00 d0       	rcall	.+0      	; 0x2392 <LCD_VidGoToLocation+0x6>
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	6a 83       	std	Y+2, r22	; 0x02
	if( Copy_U8RowNumber == LCD_FIRST_LINE )
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	88 23       	and	r24, r24
    239e:	29 f4       	brne	.+10     	; 0x23aa <LCD_VidGoToLocation+0x1e>
	{
		LCD_VidSendCommand( 0b10000000/*For Busy Flag*/ + Copy_U8ColNumber );
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	80 58       	subi	r24, 0x80	; 128
    23a4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_VidSendCommand>
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <LCD_VidGoToLocation+0x2c>
	}
	else if( Copy_U8RowNumber == LCD_Second_LINE )
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	21 f4       	brne	.+8      	; 0x23b8 <LCD_VidGoToLocation+0x2c>
	{
		LCD_VidSendCommand( 0b10000000/*For Busy Flag*/ + 0b01000000/*First address of line 2*/ + Copy_U8ColNumber);
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	80 54       	subi	r24, 0x40	; 64
    23b4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_VidSendCommand>
	}
}
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <LCD_VidDelChar>:
void LCD_VidDelChar()
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0b00000001);
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_VidSendCommand>
	LCD_VidSendCommand(0b10000000);
    23d0:	80 e8       	ldi	r24, 0x80	; 128
    23d2:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_VidSendCommand>


}
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <Timers_VidTimer0Init>:

void (*Timer0_PFun)(void);


void Timers_VidTimer0Init(void)
{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT( TCCR0 , WGM01 );
	/*CTC Mode*/
//	CLR_BIT( TCCR0 , WGM00 );
//	SET_BIT( TCCR0 , WGM01 );
	//fast PWM mode
	SET_BIT( TCCR0 , WGM00 );
    23e4:	a3 e5       	ldi	r26, 0x53	; 83
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e3 e5       	ldi	r30, 0x53	; 83
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	80 64       	ori	r24, 0x40	; 64
    23f0:	8c 93       	st	X, r24
	SET_BIT( TCCR0 , WGM01 );
    23f2:	a3 e5       	ldi	r26, 0x53	; 83
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e3 e5       	ldi	r30, 0x53	; 83
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	88 60       	ori	r24, 0x08	; 8
    23fe:	8c 93       	st	X, r24

	/*setup the mode of OC0 pin*/

	CLR_BIT(TCCR0,COM00);
    2400:	a3 e5       	ldi	r26, 0x53	; 83
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e3 e5       	ldi	r30, 0x53	; 83
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	8f 7e       	andi	r24, 0xEF	; 239
    240c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    240e:	a3 e5       	ldi	r26, 0x53	; 83
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e3 e5       	ldi	r30, 0x53	; 83
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	80 62       	ori	r24, 0x20	; 32
    241a:	8c 93       	st	X, r24
	/*Setup the OCR Value*/
	//OCR0 = 99 ;

	/*Select Prescaler factor*/
	/*/8 */
	CLR_BIT( TCCR0 , CS00 );
    241c:	a3 e5       	ldi	r26, 0x53	; 83
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	e3 e5       	ldi	r30, 0x53	; 83
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	8e 7f       	andi	r24, 0xFE	; 254
    2428:	8c 93       	st	X, r24
	SET_BIT( TCCR0 , CS01 );
    242a:	a3 e5       	ldi	r26, 0x53	; 83
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e3 e5       	ldi	r30, 0x53	; 83
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	82 60       	ori	r24, 0x02	; 2
    2436:	8c 93       	st	X, r24
	CLR_BIT( TCCR0 , CS02 );
    2438:	a3 e5       	ldi	r26, 0x53	; 83
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e3 e5       	ldi	r30, 0x53	; 83
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	8b 7f       	andi	r24, 0xFB	; 251
    2444:	8c 93       	st	X, r24
}
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <Timers_VidTimer0SetCallBack>:

void Timers_VidTimer0SetCallBack( void (*Timer0_Ptr)(void) )
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <Timers_VidTimer0SetCallBack+0x6>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PFun = Timer0_Ptr ;
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	9a 81       	ldd	r25, Y+2	; 0x02
    245e:	90 93 ab 00 	sts	0x00AB, r25
    2462:	80 93 aa 00 	sts	0x00AA, r24
}
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    2470:	1f 92       	push	r1
    2472:	0f 92       	push	r0
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	0f 92       	push	r0
    2478:	11 24       	eor	r1, r1
    247a:	2f 93       	push	r18
    247c:	3f 93       	push	r19
    247e:	4f 93       	push	r20
    2480:	5f 93       	push	r21
    2482:	6f 93       	push	r22
    2484:	7f 93       	push	r23
    2486:	8f 93       	push	r24
    2488:	9f 93       	push	r25
    248a:	af 93       	push	r26
    248c:	bf 93       	push	r27
    248e:	ef 93       	push	r30
    2490:	ff 93       	push	r31
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_U16CounterOVF = 0 ;
	Local_U16CounterOVF++ ;
    249a:	80 91 98 00 	lds	r24, 0x0098
    249e:	90 91 99 00 	lds	r25, 0x0099
    24a2:	01 96       	adiw	r24, 0x01	; 1
    24a4:	90 93 99 00 	sts	0x0099, r25
    24a8:	80 93 98 00 	sts	0x0098, r24
	if( Local_U16CounterOVF == 3907 )
    24ac:	80 91 98 00 	lds	r24, 0x0098
    24b0:	90 91 99 00 	lds	r25, 0x0099
    24b4:	2f e0       	ldi	r18, 0x0F	; 15
    24b6:	83 34       	cpi	r24, 0x43	; 67
    24b8:	92 07       	cpc	r25, r18
    24ba:	69 f4       	brne	.+26     	; 0x24d6 <__vector_11+0x66>
	{
		Local_U16CounterOVF = 0 ;
    24bc:	10 92 99 00 	sts	0x0099, r1
    24c0:	10 92 98 00 	sts	0x0098, r1
		TCNT0 = 192 ;
    24c4:	e2 e5       	ldi	r30, 0x52	; 82
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 ec       	ldi	r24, 0xC0	; 192
    24ca:	80 83       	st	Z, r24

		Timer0_PFun();
    24cc:	e0 91 aa 00 	lds	r30, 0x00AA
    24d0:	f0 91 ab 00 	lds	r31, 0x00AB
    24d4:	09 95       	icall
	}

}
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	ff 91       	pop	r31
    24dc:	ef 91       	pop	r30
    24de:	bf 91       	pop	r27
    24e0:	af 91       	pop	r26
    24e2:	9f 91       	pop	r25
    24e4:	8f 91       	pop	r24
    24e6:	7f 91       	pop	r23
    24e8:	6f 91       	pop	r22
    24ea:	5f 91       	pop	r21
    24ec:	4f 91       	pop	r20
    24ee:	3f 91       	pop	r19
    24f0:	2f 91       	pop	r18
    24f2:	0f 90       	pop	r0
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	0f 90       	pop	r0
    24f8:	1f 90       	pop	r1
    24fa:	18 95       	reti

000024fc <__vector_10>:



ISR(TIMER0_COMP_vect)
{
    24fc:	1f 92       	push	r1
    24fe:	0f 92       	push	r0
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	0f 92       	push	r0
    2504:	11 24       	eor	r1, r1
    2506:	2f 93       	push	r18
    2508:	3f 93       	push	r19
    250a:	4f 93       	push	r20
    250c:	5f 93       	push	r21
    250e:	6f 93       	push	r22
    2510:	7f 93       	push	r23
    2512:	8f 93       	push	r24
    2514:	9f 93       	push	r25
    2516:	af 93       	push	r26
    2518:	bf 93       	push	r27
    251a:	ef 93       	push	r30
    251c:	ff 93       	push	r31
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_U16CounterCTC = 0 ;
	Local_U16CounterCTC++ ;
    2526:	80 91 9a 00 	lds	r24, 0x009A
    252a:	90 91 9b 00 	lds	r25, 0x009B
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	90 93 9b 00 	sts	0x009B, r25
    2534:	80 93 9a 00 	sts	0x009A, r24
	if( Local_U16CounterCTC == 10000 )
    2538:	80 91 9a 00 	lds	r24, 0x009A
    253c:	90 91 9b 00 	lds	r25, 0x009B
    2540:	27 e2       	ldi	r18, 0x27	; 39
    2542:	80 31       	cpi	r24, 0x10	; 16
    2544:	92 07       	cpc	r25, r18
    2546:	49 f4       	brne	.+18     	; 0x255a <__vector_10+0x5e>
	{
		Local_U16CounterCTC = 0 ;
    2548:	10 92 9b 00 	sts	0x009B, r1
    254c:	10 92 9a 00 	sts	0x009A, r1
		Timer0_PFun();
    2550:	e0 91 aa 00 	lds	r30, 0x00AA
    2554:	f0 91 ab 00 	lds	r31, 0x00AB
    2558:	09 95       	icall
	}
}
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	ff 91       	pop	r31
    2560:	ef 91       	pop	r30
    2562:	bf 91       	pop	r27
    2564:	af 91       	pop	r26
    2566:	9f 91       	pop	r25
    2568:	8f 91       	pop	r24
    256a:	7f 91       	pop	r23
    256c:	6f 91       	pop	r22
    256e:	5f 91       	pop	r21
    2570:	4f 91       	pop	r20
    2572:	3f 91       	pop	r19
    2574:	2f 91       	pop	r18
    2576:	0f 90       	pop	r0
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	0f 90       	pop	r0
    257c:	1f 90       	pop	r1
    257e:	18 95       	reti

00002580 <Timer_VidTimer1Init>:



//servo motor

void Timer_VidTimer1Init(void){
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
	// select mode
	//fast PWM -->14
	CLR_BIT(TCCR1A,WGM10);
    2588:	af e4       	ldi	r26, 0x4F	; 79
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	ef e4       	ldi	r30, 0x4F	; 79
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	8e 7f       	andi	r24, 0xFE	; 254
    2594:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    2596:	af e4       	ldi	r26, 0x4F	; 79
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	ef e4       	ldi	r30, 0x4F	; 79
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	82 60       	ori	r24, 0x02	; 2
    25a2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    25a4:	ae e4       	ldi	r26, 0x4E	; 78
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	ee e4       	ldi	r30, 0x4E	; 78
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	88 60       	ori	r24, 0x08	; 8
    25b0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    25b2:	ae e4       	ldi	r26, 0x4E	; 78
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	ee e4       	ldi	r30, 0x4E	; 78
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	80 61       	ori	r24, 0x10	; 16
    25be:	8c 93       	st	X, r24
	//select OC1A PIN -->Fast PWM
	CLR_BIT(TCCR1A,COM1A0);
    25c0:	af e4       	ldi	r26, 0x4F	; 79
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	ef e4       	ldi	r30, 0x4F	; 79
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	8f 7b       	andi	r24, 0xBF	; 191
    25cc:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    25ce:	af e4       	ldi	r26, 0x4F	; 79
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	ef e4       	ldi	r30, 0x4F	; 79
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	80 68       	ori	r24, 0x80	; 128
    25da:	8c 93       	st	X, r24
	//setup value of ICR1

	ICR1=19999;
    25dc:	e6 e4       	ldi	r30, 0x46	; 70
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	8f e1       	ldi	r24, 0x1F	; 31
    25e2:	9e e4       	ldi	r25, 0x4E	; 78
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	80 83       	st	Z, r24

	//setup OCR1A--> for the angle of serve
	OCR1A=500;
    25e8:	ea e4       	ldi	r30, 0x4A	; 74
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	84 ef       	ldi	r24, 0xF4	; 244
    25ee:	91 e0       	ldi	r25, 0x01	; 1
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	80 83       	st	Z, r24
	//presalar-->8
	CLR_BIT(TCCR1B,CS10);
    25f4:	ae e4       	ldi	r26, 0x4E	; 78
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	ee e4       	ldi	r30, 0x4E	; 78
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	8e 7f       	andi	r24, 0xFE	; 254
    2600:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    2602:	ae e4       	ldi	r26, 0x4E	; 78
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	ee e4       	ldi	r30, 0x4E	; 78
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	82 60       	ori	r24, 0x02	; 2
    260e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    2610:	ae e4       	ldi	r26, 0x4E	; 78
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	ee e4       	ldi	r30, 0x4E	; 78
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	8b 7f       	andi	r24, 0xFB	; 251
    261c:	8c 93       	st	X, r24
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <conc>:
u16 pass=12345;

u16 times=0;
u16 rep=0;
u32 conc_val=0;
void conc(u16 x,u16 times){
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	62 97       	sbiw	r28, 0x12	; 18
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	98 8b       	std	Y+16, r25	; 0x10
    263a:	8f 87       	std	Y+15, r24	; 0x0f
    263c:	7a 8b       	std	Y+18, r23	; 0x12
    263e:	69 8b       	std	Y+17, r22	; 0x11
		conc_val=(conc_val*10)+x;
    2640:	80 91 a0 00 	lds	r24, 0x00A0
    2644:	90 91 a1 00 	lds	r25, 0x00A1
    2648:	a0 91 a2 00 	lds	r26, 0x00A2
    264c:	b0 91 a3 00 	lds	r27, 0x00A3
    2650:	2a e0       	ldi	r18, 0x0A	; 10
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__mulsi3>
    2660:	9b 01       	movw	r18, r22
    2662:	ac 01       	movw	r20, r24
    2664:	8f 85       	ldd	r24, Y+15	; 0x0f
    2666:	98 89       	ldd	r25, Y+16	; 0x10
    2668:	cc 01       	movw	r24, r24
    266a:	a0 e0       	ldi	r26, 0x00	; 0
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	82 0f       	add	r24, r18
    2670:	93 1f       	adc	r25, r19
    2672:	a4 1f       	adc	r26, r20
    2674:	b5 1f       	adc	r27, r21
    2676:	80 93 a0 00 	sts	0x00A0, r24
    267a:	90 93 a1 00 	sts	0x00A1, r25
    267e:	a0 93 a2 00 	sts	0x00A2, r26
    2682:	b0 93 a3 00 	sts	0x00A3, r27


				if(times==5){
    2686:	89 89       	ldd	r24, Y+17	; 0x11
    2688:	9a 89       	ldd	r25, Y+18	; 0x12
    268a:	85 30       	cpi	r24, 0x05	; 5
    268c:	91 05       	cpc	r25, r1
    268e:	09 f0       	breq	.+2      	; 0x2692 <conc+0x6e>
    2690:	a9 c0       	rjmp	.+338    	; 0x27e4 <conc+0x1c0>
								if(conc_val==pass){
    2692:	80 91 96 00 	lds	r24, 0x0096
    2696:	90 91 97 00 	lds	r25, 0x0097
    269a:	9c 01       	movw	r18, r24
    269c:	40 e0       	ldi	r20, 0x00	; 0
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	80 91 a0 00 	lds	r24, 0x00A0
    26a4:	90 91 a1 00 	lds	r25, 0x00A1
    26a8:	a0 91 a2 00 	lds	r26, 0x00A2
    26ac:	b0 91 a3 00 	lds	r27, 0x00A3
    26b0:	28 17       	cp	r18, r24
    26b2:	39 07       	cpc	r19, r25
    26b4:	4a 07       	cpc	r20, r26
    26b6:	5b 07       	cpc	r21, r27
    26b8:	61 f4       	brne	.+24     	; 0x26d2 <conc+0xae>
									LCD_VidDelChar();
    26ba:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_VidDelChar>
									LCD_VidSendString("ppass is right");
    26be:	80 e6       	ldi	r24, 0x60	; 96
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_VidSendString>
									DIO_VidSetPinValue(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>
    26d0:	89 c0       	rjmp	.+274    	; 0x27e4 <conc+0x1c0>

								}
								else {
									conc_val=0;
    26d2:	10 92 a0 00 	sts	0x00A0, r1
    26d6:	10 92 a1 00 	sts	0x00A1, r1
    26da:	10 92 a2 00 	sts	0x00A2, r1
    26de:	10 92 a3 00 	sts	0x00A3, r1
									LCD_VidDelChar();
    26e2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_VidDelChar>
									LCD_VidSendString("ppass is wrong");
    26e6:	8f e6       	ldi	r24, 0x6F	; 111
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_VidSendString>
									DIO_VidSetPinValue(DIO_PORTC,DIO_PIN1,DIO_HIGH);
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	61 e0       	ldi	r22, 0x01	; 1
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	0e 94 cb 07 	call	0xf96	; 0xf96 <DIO_VidSetPinValue>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	a8 e4       	ldi	r26, 0x48	; 72
    26fe:	b3 e4       	ldi	r27, 0x43	; 67
    2700:	8b 87       	std	Y+11, r24	; 0x0b
    2702:	9c 87       	std	Y+12, r25	; 0x0c
    2704:	ad 87       	std	Y+13, r26	; 0x0d
    2706:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2708:	6b 85       	ldd	r22, Y+11	; 0x0b
    270a:	7c 85       	ldd	r23, Y+12	; 0x0c
    270c:	8d 85       	ldd	r24, Y+13	; 0x0d
    270e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	4a ef       	ldi	r20, 0xFA	; 250
    2716:	54 e4       	ldi	r21, 0x44	; 68
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	8f 83       	std	Y+7, r24	; 0x07
    2722:	98 87       	std	Y+8, r25	; 0x08
    2724:	a9 87       	std	Y+9, r26	; 0x09
    2726:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2728:	6f 81       	ldd	r22, Y+7	; 0x07
    272a:	78 85       	ldd	r23, Y+8	; 0x08
    272c:	89 85       	ldd	r24, Y+9	; 0x09
    272e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e8       	ldi	r20, 0x80	; 128
    2736:	5f e3       	ldi	r21, 0x3F	; 63
    2738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    273c:	88 23       	and	r24, r24
    273e:	2c f4       	brge	.+10     	; 0x274a <conc+0x126>
		__ticks = 1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9e 83       	std	Y+6, r25	; 0x06
    2746:	8d 83       	std	Y+5, r24	; 0x05
    2748:	3f c0       	rjmp	.+126    	; 0x27c8 <conc+0x1a4>
	else if (__tmp > 65535)
    274a:	6f 81       	ldd	r22, Y+7	; 0x07
    274c:	78 85       	ldd	r23, Y+8	; 0x08
    274e:	89 85       	ldd	r24, Y+9	; 0x09
    2750:	9a 85       	ldd	r25, Y+10	; 0x0a
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	3f ef       	ldi	r19, 0xFF	; 255
    2756:	4f e7       	ldi	r20, 0x7F	; 127
    2758:	57 e4       	ldi	r21, 0x47	; 71
    275a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    275e:	18 16       	cp	r1, r24
    2760:	4c f5       	brge	.+82     	; 0x27b4 <conc+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2762:	6b 85       	ldd	r22, Y+11	; 0x0b
    2764:	7c 85       	ldd	r23, Y+12	; 0x0c
    2766:	8d 85       	ldd	r24, Y+13	; 0x0d
    2768:	9e 85       	ldd	r25, Y+14	; 0x0e
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e2       	ldi	r20, 0x20	; 32
    2770:	51 e4       	ldi	r21, 0x41	; 65
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	8d 83       	std	Y+5, r24	; 0x05
    278a:	0f c0       	rjmp	.+30     	; 0x27aa <conc+0x186>
    278c:	88 ec       	ldi	r24, 0xC8	; 200
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9c 83       	std	Y+4, r25	; 0x04
    2792:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	9c 81       	ldd	r25, Y+4	; 0x04
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <conc+0x174>
    279c:	9c 83       	std	Y+4, r25	; 0x04
    279e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	69 f7       	brne	.-38     	; 0x278c <conc+0x168>
    27b2:	14 c0       	rjmp	.+40     	; 0x27dc <conc+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b4:	6f 81       	ldd	r22, Y+7	; 0x07
    27b6:	78 85       	ldd	r23, Y+8	; 0x08
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    27c6:	8d 83       	std	Y+5, r24	; 0x05
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	9a 81       	ldd	r25, Y+2	; 0x02
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <conc+0x1b0>
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	89 83       	std	Y+1, r24	; 0x01
									_delay_ms(200);
									times=0;
    27dc:	1a 8a       	std	Y+18, r1	; 0x12
    27de:	19 8a       	std	Y+17, r1	; 0x11

									LCD_VidDelChar();
    27e0:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_VidDelChar>
							}




}
    27e4:	62 96       	adiw	r28, 0x12	; 18
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <main>:


void main(void)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <main+0x6>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <main+0x8>
    27fe:	0f 92       	push	r0
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62


	//****************************LOGIN*****************************************
	u16 i;
	u8 Local_U8Key ;
	KBD_VidInit();
    2804:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <KBD_VidInit>
	LCD_VidInit();
    2808:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_VidInit>
	DIO_VidSetPinDirection(DIO_PORTC,DIO_PIN0,DIO_OUTPUT);
    280c:	82 e0       	ldi	r24, 0x02	; 2
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	41 e0       	ldi	r20, 0x01	; 1
    2812:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTC,DIO_PIN1,DIO_OUTPUT);
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	61 e0       	ldi	r22, 0x01	; 1
    281a:	41 e0       	ldi	r20, 0x01	; 1
    281c:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	while(1)
	{
		//***************LOGIN*****************
		Local_U8Key = KBD_U8GetPressedKey();
    2820:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <KBD_U8GetPressedKey>
    2824:	89 83       	std	Y+1, r24	; 0x01

		if( Local_U8Key != 20 )
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	84 31       	cpi	r24, 0x14	; 20
    282a:	d1 f3       	breq	.-12     	; 0x2820 <main+0x2a>
		{
				switch(Local_U8Key)
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	3d 83       	std	Y+5, r19	; 0x05
    2834:	2c 83       	std	Y+4, r18	; 0x04
    2836:	8c 81       	ldd	r24, Y+4	; 0x04
    2838:	9d 81       	ldd	r25, Y+5	; 0x05
    283a:	84 33       	cpi	r24, 0x34	; 52
    283c:	91 05       	cpc	r25, r1
    283e:	09 f4       	brne	.+2      	; 0x2842 <main+0x4c>
    2840:	a0 c0       	rjmp	.+320    	; 0x2982 <main+0x18c>
    2842:	2c 81       	ldd	r18, Y+4	; 0x04
    2844:	3d 81       	ldd	r19, Y+5	; 0x05
    2846:	25 33       	cpi	r18, 0x35	; 53
    2848:	31 05       	cpc	r19, r1
    284a:	f4 f4       	brge	.+60     	; 0x2888 <main+0x92>
    284c:	8c 81       	ldd	r24, Y+4	; 0x04
    284e:	9d 81       	ldd	r25, Y+5	; 0x05
    2850:	81 33       	cpi	r24, 0x31	; 49
    2852:	91 05       	cpc	r25, r1
    2854:	09 f4       	brne	.+2      	; 0x2858 <main+0x62>
    2856:	53 c0       	rjmp	.+166    	; 0x28fe <main+0x108>
    2858:	2c 81       	ldd	r18, Y+4	; 0x04
    285a:	3d 81       	ldd	r19, Y+5	; 0x05
    285c:	22 33       	cpi	r18, 0x32	; 50
    285e:	31 05       	cpc	r19, r1
    2860:	34 f4       	brge	.+12     	; 0x286e <main+0x78>
    2862:	8c 81       	ldd	r24, Y+4	; 0x04
    2864:	9d 81       	ldd	r25, Y+5	; 0x05
    2866:	80 33       	cpi	r24, 0x30	; 48
    2868:	91 05       	cpc	r25, r1
    286a:	99 f1       	breq	.+102    	; 0x28d2 <main+0xdc>
    286c:	d9 cf       	rjmp	.-78     	; 0x2820 <main+0x2a>
    286e:	2c 81       	ldd	r18, Y+4	; 0x04
    2870:	3d 81       	ldd	r19, Y+5	; 0x05
    2872:	22 33       	cpi	r18, 0x32	; 50
    2874:	31 05       	cpc	r19, r1
    2876:	09 f4       	brne	.+2      	; 0x287a <main+0x84>
    2878:	58 c0       	rjmp	.+176    	; 0x292a <main+0x134>
    287a:	8c 81       	ldd	r24, Y+4	; 0x04
    287c:	9d 81       	ldd	r25, Y+5	; 0x05
    287e:	83 33       	cpi	r24, 0x33	; 51
    2880:	91 05       	cpc	r25, r1
    2882:	09 f4       	brne	.+2      	; 0x2886 <main+0x90>
    2884:	68 c0       	rjmp	.+208    	; 0x2956 <main+0x160>
    2886:	cc cf       	rjmp	.-104    	; 0x2820 <main+0x2a>
    2888:	2c 81       	ldd	r18, Y+4	; 0x04
    288a:	3d 81       	ldd	r19, Y+5	; 0x05
    288c:	27 33       	cpi	r18, 0x37	; 55
    288e:	31 05       	cpc	r19, r1
    2890:	09 f4       	brne	.+2      	; 0x2894 <main+0x9e>
    2892:	b9 c0       	rjmp	.+370    	; 0x2a06 <main+0x210>
    2894:	8c 81       	ldd	r24, Y+4	; 0x04
    2896:	9d 81       	ldd	r25, Y+5	; 0x05
    2898:	88 33       	cpi	r24, 0x38	; 56
    289a:	91 05       	cpc	r25, r1
    289c:	6c f4       	brge	.+26     	; 0x28b8 <main+0xc2>
    289e:	2c 81       	ldd	r18, Y+4	; 0x04
    28a0:	3d 81       	ldd	r19, Y+5	; 0x05
    28a2:	25 33       	cpi	r18, 0x35	; 53
    28a4:	31 05       	cpc	r19, r1
    28a6:	09 f4       	brne	.+2      	; 0x28aa <main+0xb4>
    28a8:	82 c0       	rjmp	.+260    	; 0x29ae <main+0x1b8>
    28aa:	8c 81       	ldd	r24, Y+4	; 0x04
    28ac:	9d 81       	ldd	r25, Y+5	; 0x05
    28ae:	86 33       	cpi	r24, 0x36	; 54
    28b0:	91 05       	cpc	r25, r1
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <main+0xc0>
    28b4:	92 c0       	rjmp	.+292    	; 0x29da <main+0x1e4>
    28b6:	b4 cf       	rjmp	.-152    	; 0x2820 <main+0x2a>
    28b8:	2c 81       	ldd	r18, Y+4	; 0x04
    28ba:	3d 81       	ldd	r19, Y+5	; 0x05
    28bc:	28 33       	cpi	r18, 0x38	; 56
    28be:	31 05       	cpc	r19, r1
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <main+0xce>
    28c2:	b7 c0       	rjmp	.+366    	; 0x2a32 <main+0x23c>
    28c4:	8c 81       	ldd	r24, Y+4	; 0x04
    28c6:	9d 81       	ldd	r25, Y+5	; 0x05
    28c8:	89 33       	cpi	r24, 0x39	; 57
    28ca:	91 05       	cpc	r25, r1
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <main+0xda>
    28ce:	c7 c0       	rjmp	.+398    	; 0x2a5e <main+0x268>
    28d0:	a7 cf       	rjmp	.-178    	; 0x2820 <main+0x2a>
							{
							case '0' :
								LCD_VidSendChar('0');
    28d2:	80 e3       	ldi	r24, 0x30	; 48
    28d4:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>
								times++;
    28d8:	80 91 9c 00 	lds	r24, 0x009C
    28dc:	90 91 9d 00 	lds	r25, 0x009D
    28e0:	01 96       	adiw	r24, 0x01	; 1
    28e2:	90 93 9d 00 	sts	0x009D, r25
    28e6:	80 93 9c 00 	sts	0x009C, r24
								conc(0,times);
    28ea:	20 91 9c 00 	lds	r18, 0x009C
    28ee:	30 91 9d 00 	lds	r19, 0x009D
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	b9 01       	movw	r22, r18
    28f8:	0e 94 12 13 	call	0x2624	; 0x2624 <conc>
    28fc:	91 cf       	rjmp	.-222    	; 0x2820 <main+0x2a>
								break;

							case '1' :
								LCD_VidSendChar('1');
    28fe:	81 e3       	ldi	r24, 0x31	; 49
    2900:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>
								times++;
    2904:	80 91 9c 00 	lds	r24, 0x009C
    2908:	90 91 9d 00 	lds	r25, 0x009D
    290c:	01 96       	adiw	r24, 0x01	; 1
    290e:	90 93 9d 00 	sts	0x009D, r25
    2912:	80 93 9c 00 	sts	0x009C, r24
								conc(1,times);
    2916:	20 91 9c 00 	lds	r18, 0x009C
    291a:	30 91 9d 00 	lds	r19, 0x009D
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	b9 01       	movw	r22, r18
    2924:	0e 94 12 13 	call	0x2624	; 0x2624 <conc>
    2928:	7b cf       	rjmp	.-266    	; 0x2820 <main+0x2a>
								break;
							case '2' :
								LCD_VidSendChar('2');
    292a:	82 e3       	ldi	r24, 0x32	; 50
    292c:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>
								times++;
    2930:	80 91 9c 00 	lds	r24, 0x009C
    2934:	90 91 9d 00 	lds	r25, 0x009D
    2938:	01 96       	adiw	r24, 0x01	; 1
    293a:	90 93 9d 00 	sts	0x009D, r25
    293e:	80 93 9c 00 	sts	0x009C, r24
								conc(2,times);
    2942:	20 91 9c 00 	lds	r18, 0x009C
    2946:	30 91 9d 00 	lds	r19, 0x009D
    294a:	82 e0       	ldi	r24, 0x02	; 2
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	b9 01       	movw	r22, r18
    2950:	0e 94 12 13 	call	0x2624	; 0x2624 <conc>
    2954:	65 cf       	rjmp	.-310    	; 0x2820 <main+0x2a>
								break;
							case '3' :
								LCD_VidSendChar('3');
    2956:	83 e3       	ldi	r24, 0x33	; 51
    2958:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>
								times++;
    295c:	80 91 9c 00 	lds	r24, 0x009C
    2960:	90 91 9d 00 	lds	r25, 0x009D
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	90 93 9d 00 	sts	0x009D, r25
    296a:	80 93 9c 00 	sts	0x009C, r24
								conc(3,times);
    296e:	20 91 9c 00 	lds	r18, 0x009C
    2972:	30 91 9d 00 	lds	r19, 0x009D
    2976:	83 e0       	ldi	r24, 0x03	; 3
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	b9 01       	movw	r22, r18
    297c:	0e 94 12 13 	call	0x2624	; 0x2624 <conc>
    2980:	4f cf       	rjmp	.-354    	; 0x2820 <main+0x2a>
								break;
							case '4' :
								LCD_VidSendChar('4');
    2982:	84 e3       	ldi	r24, 0x34	; 52
    2984:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>
								times++;
    2988:	80 91 9c 00 	lds	r24, 0x009C
    298c:	90 91 9d 00 	lds	r25, 0x009D
    2990:	01 96       	adiw	r24, 0x01	; 1
    2992:	90 93 9d 00 	sts	0x009D, r25
    2996:	80 93 9c 00 	sts	0x009C, r24
								conc(4,times);
    299a:	20 91 9c 00 	lds	r18, 0x009C
    299e:	30 91 9d 00 	lds	r19, 0x009D
    29a2:	84 e0       	ldi	r24, 0x04	; 4
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	b9 01       	movw	r22, r18
    29a8:	0e 94 12 13 	call	0x2624	; 0x2624 <conc>
    29ac:	39 cf       	rjmp	.-398    	; 0x2820 <main+0x2a>
								break;
							case '5':
								LCD_VidSendChar('5');
    29ae:	85 e3       	ldi	r24, 0x35	; 53
    29b0:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>
								times++;
    29b4:	80 91 9c 00 	lds	r24, 0x009C
    29b8:	90 91 9d 00 	lds	r25, 0x009D
    29bc:	01 96       	adiw	r24, 0x01	; 1
    29be:	90 93 9d 00 	sts	0x009D, r25
    29c2:	80 93 9c 00 	sts	0x009C, r24
								conc(5,times);
    29c6:	20 91 9c 00 	lds	r18, 0x009C
    29ca:	30 91 9d 00 	lds	r19, 0x009D
    29ce:	85 e0       	ldi	r24, 0x05	; 5
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	b9 01       	movw	r22, r18
    29d4:	0e 94 12 13 	call	0x2624	; 0x2624 <conc>
    29d8:	23 cf       	rjmp	.-442    	; 0x2820 <main+0x2a>
								break;
							case '6' :
								LCD_VidSendChar('6');
    29da:	86 e3       	ldi	r24, 0x36	; 54
    29dc:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>
								times++;
    29e0:	80 91 9c 00 	lds	r24, 0x009C
    29e4:	90 91 9d 00 	lds	r25, 0x009D
    29e8:	01 96       	adiw	r24, 0x01	; 1
    29ea:	90 93 9d 00 	sts	0x009D, r25
    29ee:	80 93 9c 00 	sts	0x009C, r24
								conc(6,times);
    29f2:	20 91 9c 00 	lds	r18, 0x009C
    29f6:	30 91 9d 00 	lds	r19, 0x009D
    29fa:	86 e0       	ldi	r24, 0x06	; 6
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	b9 01       	movw	r22, r18
    2a00:	0e 94 12 13 	call	0x2624	; 0x2624 <conc>
    2a04:	0d cf       	rjmp	.-486    	; 0x2820 <main+0x2a>
								break;
							case '7' :
								LCD_VidSendChar('7');
    2a06:	87 e3       	ldi	r24, 0x37	; 55
    2a08:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>
								times++;
    2a0c:	80 91 9c 00 	lds	r24, 0x009C
    2a10:	90 91 9d 00 	lds	r25, 0x009D
    2a14:	01 96       	adiw	r24, 0x01	; 1
    2a16:	90 93 9d 00 	sts	0x009D, r25
    2a1a:	80 93 9c 00 	sts	0x009C, r24
							  conc(7,times);
    2a1e:	20 91 9c 00 	lds	r18, 0x009C
    2a22:	30 91 9d 00 	lds	r19, 0x009D
    2a26:	87 e0       	ldi	r24, 0x07	; 7
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	b9 01       	movw	r22, r18
    2a2c:	0e 94 12 13 	call	0x2624	; 0x2624 <conc>
    2a30:	f7 ce       	rjmp	.-530    	; 0x2820 <main+0x2a>
								break;
							case '8' :
								LCD_VidSendChar('8');
    2a32:	88 e3       	ldi	r24, 0x38	; 56
    2a34:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>
								times++;
    2a38:	80 91 9c 00 	lds	r24, 0x009C
    2a3c:	90 91 9d 00 	lds	r25, 0x009D
    2a40:	01 96       	adiw	r24, 0x01	; 1
    2a42:	90 93 9d 00 	sts	0x009D, r25
    2a46:	80 93 9c 00 	sts	0x009C, r24
								conc(8,times);
    2a4a:	20 91 9c 00 	lds	r18, 0x009C
    2a4e:	30 91 9d 00 	lds	r19, 0x009D
    2a52:	88 e0       	ldi	r24, 0x08	; 8
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	b9 01       	movw	r22, r18
    2a58:	0e 94 12 13 	call	0x2624	; 0x2624 <conc>
    2a5c:	e1 ce       	rjmp	.-574    	; 0x2820 <main+0x2a>
								break;
							case '9' :
								LCD_VidSendChar('9');
    2a5e:	89 e3       	ldi	r24, 0x39	; 57
    2a60:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_VidSendChar>
								times++;
    2a64:	80 91 9c 00 	lds	r24, 0x009C
    2a68:	90 91 9d 00 	lds	r25, 0x009D
    2a6c:	01 96       	adiw	r24, 0x01	; 1
    2a6e:	90 93 9d 00 	sts	0x009D, r25
    2a72:	80 93 9c 00 	sts	0x009C, r24
								conc(9,times);
    2a76:	20 91 9c 00 	lds	r18, 0x009C
    2a7a:	30 91 9d 00 	lds	r19, 0x009D
    2a7e:	89 e0       	ldi	r24, 0x09	; 9
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	b9 01       	movw	r22, r18
    2a84:	0e 94 12 13 	call	0x2624	; 0x2624 <conc>
    2a88:	cb ce       	rjmp	.-618    	; 0x2820 <main+0x2a>

00002a8a <__mulsi3>:
    2a8a:	62 9f       	mul	r22, r18
    2a8c:	d0 01       	movw	r26, r0
    2a8e:	73 9f       	mul	r23, r19
    2a90:	f0 01       	movw	r30, r0
    2a92:	82 9f       	mul	r24, r18
    2a94:	e0 0d       	add	r30, r0
    2a96:	f1 1d       	adc	r31, r1
    2a98:	64 9f       	mul	r22, r20
    2a9a:	e0 0d       	add	r30, r0
    2a9c:	f1 1d       	adc	r31, r1
    2a9e:	92 9f       	mul	r25, r18
    2aa0:	f0 0d       	add	r31, r0
    2aa2:	83 9f       	mul	r24, r19
    2aa4:	f0 0d       	add	r31, r0
    2aa6:	74 9f       	mul	r23, r20
    2aa8:	f0 0d       	add	r31, r0
    2aaa:	65 9f       	mul	r22, r21
    2aac:	f0 0d       	add	r31, r0
    2aae:	99 27       	eor	r25, r25
    2ab0:	72 9f       	mul	r23, r18
    2ab2:	b0 0d       	add	r27, r0
    2ab4:	e1 1d       	adc	r30, r1
    2ab6:	f9 1f       	adc	r31, r25
    2ab8:	63 9f       	mul	r22, r19
    2aba:	b0 0d       	add	r27, r0
    2abc:	e1 1d       	adc	r30, r1
    2abe:	f9 1f       	adc	r31, r25
    2ac0:	bd 01       	movw	r22, r26
    2ac2:	cf 01       	movw	r24, r30
    2ac4:	11 24       	eor	r1, r1
    2ac6:	08 95       	ret

00002ac8 <__udivmodsi4>:
    2ac8:	a1 e2       	ldi	r26, 0x21	; 33
    2aca:	1a 2e       	mov	r1, r26
    2acc:	aa 1b       	sub	r26, r26
    2ace:	bb 1b       	sub	r27, r27
    2ad0:	fd 01       	movw	r30, r26
    2ad2:	0d c0       	rjmp	.+26     	; 0x2aee <__udivmodsi4_ep>

00002ad4 <__udivmodsi4_loop>:
    2ad4:	aa 1f       	adc	r26, r26
    2ad6:	bb 1f       	adc	r27, r27
    2ad8:	ee 1f       	adc	r30, r30
    2ada:	ff 1f       	adc	r31, r31
    2adc:	a2 17       	cp	r26, r18
    2ade:	b3 07       	cpc	r27, r19
    2ae0:	e4 07       	cpc	r30, r20
    2ae2:	f5 07       	cpc	r31, r21
    2ae4:	20 f0       	brcs	.+8      	; 0x2aee <__udivmodsi4_ep>
    2ae6:	a2 1b       	sub	r26, r18
    2ae8:	b3 0b       	sbc	r27, r19
    2aea:	e4 0b       	sbc	r30, r20
    2aec:	f5 0b       	sbc	r31, r21

00002aee <__udivmodsi4_ep>:
    2aee:	66 1f       	adc	r22, r22
    2af0:	77 1f       	adc	r23, r23
    2af2:	88 1f       	adc	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	1a 94       	dec	r1
    2af8:	69 f7       	brne	.-38     	; 0x2ad4 <__udivmodsi4_loop>
    2afa:	60 95       	com	r22
    2afc:	70 95       	com	r23
    2afe:	80 95       	com	r24
    2b00:	90 95       	com	r25
    2b02:	9b 01       	movw	r18, r22
    2b04:	ac 01       	movw	r20, r24
    2b06:	bd 01       	movw	r22, r26
    2b08:	cf 01       	movw	r24, r30
    2b0a:	08 95       	ret

00002b0c <__prologue_saves__>:
    2b0c:	2f 92       	push	r2
    2b0e:	3f 92       	push	r3
    2b10:	4f 92       	push	r4
    2b12:	5f 92       	push	r5
    2b14:	6f 92       	push	r6
    2b16:	7f 92       	push	r7
    2b18:	8f 92       	push	r8
    2b1a:	9f 92       	push	r9
    2b1c:	af 92       	push	r10
    2b1e:	bf 92       	push	r11
    2b20:	cf 92       	push	r12
    2b22:	df 92       	push	r13
    2b24:	ef 92       	push	r14
    2b26:	ff 92       	push	r15
    2b28:	0f 93       	push	r16
    2b2a:	1f 93       	push	r17
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
    2b34:	ca 1b       	sub	r28, r26
    2b36:	db 0b       	sbc	r29, r27
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	de bf       	out	0x3e, r29	; 62
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	cd bf       	out	0x3d, r28	; 61
    2b42:	09 94       	ijmp

00002b44 <__epilogue_restores__>:
    2b44:	2a 88       	ldd	r2, Y+18	; 0x12
    2b46:	39 88       	ldd	r3, Y+17	; 0x11
    2b48:	48 88       	ldd	r4, Y+16	; 0x10
    2b4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b50:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b52:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b54:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b56:	b9 84       	ldd	r11, Y+9	; 0x09
    2b58:	c8 84       	ldd	r12, Y+8	; 0x08
    2b5a:	df 80       	ldd	r13, Y+7	; 0x07
    2b5c:	ee 80       	ldd	r14, Y+6	; 0x06
    2b5e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b60:	0c 81       	ldd	r16, Y+4	; 0x04
    2b62:	1b 81       	ldd	r17, Y+3	; 0x03
    2b64:	aa 81       	ldd	r26, Y+2	; 0x02
    2b66:	b9 81       	ldd	r27, Y+1	; 0x01
    2b68:	ce 0f       	add	r28, r30
    2b6a:	d1 1d       	adc	r29, r1
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	f8 94       	cli
    2b70:	de bf       	out	0x3e, r29	; 62
    2b72:	0f be       	out	0x3f, r0	; 63
    2b74:	cd bf       	out	0x3d, r28	; 61
    2b76:	ed 01       	movw	r28, r26
    2b78:	08 95       	ret

00002b7a <_exit>:
    2b7a:	f8 94       	cli

00002b7c <__stop_program>:
    2b7c:	ff cf       	rjmp	.-2      	; 0x2b7c <__stop_program>
